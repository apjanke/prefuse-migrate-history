head	1.1;
access;
symbols
	java_1_5:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2008.02.24.00.22.30;	author amarsden;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2008.02.24.00.22.30;	author amarsden;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2008.04.22.02.25.21;	author amarsden;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file PredefinedShape.java was initially added on branch java_1_5.
@
text
@@


1.1.2.1
log
@Refactored the shape work to allow for custom ShapeBuilders. VisualItem.SHAPE has been replaced with VisualItem.SHAPEBUILDER.
@
text
@a0 170
package prefuse;

import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;

/**
 * Predefined ShapeBuilders
 * 
 * @@author Anton Marsden
 */
public enum PredefinedShape implements ShapeBuilder {
	/** No shape. Draw nothing. */
	NONE {
		public Shape createEmptyShape() {
			return null;
		}
		public void updateShape(Shape shape, double x, double y, double width, double height) {
		}
	},
	/** Rectangle/Square shape */
	RECTANGLE {
		public Shape createEmptyShape() {
			return new Rectangle2D.Double();
		}
		public void updateShape(Shape shape, double x, double y, double width, double height) {
			Rectangle2D.Double s = (Rectangle2D.Double) shape;
			s.setFrame(x, y, width, height);
		}
	},
	/** Ellipse/Circle shape */
	ELLIPSE {
		public Shape createEmptyShape() {
			return new Ellipse2D.Double();
		}
		public void updateShape(Shape shape, double x, double y, double width, double height) {
			Ellipse2D.Double e = (Ellipse2D.Double) shape;
			e.setFrame(x, y, width, height);
		}
	},
	/** Diamond shape */
	DIAMOND {
		public void updateShape(Shape shape, double x, double y, double width, double height) {
			GeneralPath path = (GeneralPath) shape;
			path.reset();
	        path.moveTo(x,(y+0.5f*height));
	        path.lineTo((x+0.5f*height),y);
	        path.lineTo((x+height),(y+0.5f*height));
	        path.lineTo((x+0.5f*height),(y+height));
	        path.closePath();
		}
	},
	/** Cross shape */
	CROSS {
		public void updateShape(Shape shape, double x, double y, double width, double height) {
			GeneralPath path = (GeneralPath) shape;
	        double h14 = 3*height/8, h34 = 5*height/8;
	        path.reset();
	        path.moveTo(x+h14, y);
	        path.lineTo(x+h34, y);
	        path.lineTo(x+h34, y+h14);
	        path.lineTo(x+height, y+h14);
	        path.lineTo(x+height, y+h34);
	        path.lineTo(x+h34, y+h34);
	        path.lineTo(x+h34, y+height);
	        path.lineTo(x+h14, y+height);
	        path.lineTo(x+h14, y+h34);
	        path.lineTo(x, y+h34);
	        path.lineTo(x, y+h14);
	        path.lineTo(x+h14, y+h14);
	        path.closePath();
		}
	},
	/** Star shape */
	STAR {
		public void updateShape(Shape shape, double x, double y, double width, double height) {
	        double s = height/(2*Math.sin(Math.toRadians(54)));
	        double shortSide = height/(2*Math.tan(Math.toRadians(54)));
	        double mediumSide = s*Math.sin(Math.toRadians(18));
	        double longSide = s*Math.cos(Math.toRadians(18));
	        double innerLongSide = s/(2*Math.cos(Math.toRadians(36)));
	        double innerShortSide = innerLongSide*Math.sin(Math.toRadians(36));
	        double innerMediumSide = innerLongSide*Math.cos(Math.toRadians(36));
			GeneralPath path = (GeneralPath) shape;
			path.reset();
	        path.moveTo(x, y+shortSide);
	        path.lineTo((x+innerLongSide),(y+shortSide));
	        path.lineTo((x+height/2),y);
	        path.lineTo((x+height-innerLongSide),(y+shortSide));
	        path.lineTo((x+height),(y+shortSide));
	        path.lineTo((x+height-innerMediumSide),(y+shortSide+innerShortSide));
	        path.lineTo((x+height-mediumSide),(y+height));
	        path.lineTo((x+height/2),(y+shortSide+longSide-innerShortSide));
	        path.lineTo((x+mediumSide),(y+height));
	        path.lineTo((x+innerMediumSide),(y+shortSide+innerShortSide));
	        path.closePath();
		}
	},
	/** Up-pointing triangle shape */
	TRIANGLE_UP {
		public void updateShape(Shape shape, double x, double y, double width, double height) {
			GeneralPath path = (GeneralPath) shape;
			path.reset();
	        path.moveTo(x,y+height);
	        path.lineTo(x+height/2, y);
	        path.lineTo(x+height, (y+height));
	        path.closePath();
		}
	},
	/** Down-pointing triangle shape */
	TRIANGLE_DOWN {
		public void updateShape(Shape shape, double x, double y, double width, double height) {
			GeneralPath path = (GeneralPath) shape;
			path.reset();
	        path.moveTo(x,y);
	        path.lineTo(x+height, y);
	        path.lineTo(x+height/2, (y+height));
	        path.closePath();
		}
	},
	/** Left-pointing triangle shape */
	TRIANGLE_LEFT {
		public void updateShape(Shape shape, double x, double y, double width, double height) {
			GeneralPath path = new GeneralPath();
	        path.reset();
	        path.moveTo(x+height, y);
	        path.lineTo(x+height, y+height);
	        path.lineTo(x, y+height/2);
	        path.closePath();
		}
	},
	/** Right-pointing triangle shape */
	TRIANGLE_RIGHT {
		public void updateShape(Shape shape, double x, double y, double width, double height) {
			GeneralPath path = (GeneralPath) shape;
	        path.reset();
	        path.moveTo(x,y+height);
	        path.lineTo(x+height, y+height/2);
	        path.lineTo(x, y);
	        path.closePath();
		}
	},
	/** Hexagon shape */
	HEXAGON {
		public void updateShape(Shape shape, double x, double y, double width, double height) {
	        width = height/2; // !!
			GeneralPath path = (GeneralPath) shape;
	        path.reset();
	        path.moveTo(x,            y+0.5f*height);
	        path.lineTo(x+0.5f*width, y);
	        path.lineTo(x+1.5f*width, y);
	        path.lineTo(x+2.0f*width, y+0.5f*height);
	        path.lineTo(x+1.5f*width, y+height);
	        path.lineTo(x+0.5f*width, y+height);
	        path.closePath();
		}
	};
	
	public Shape createEmptyShape() {
		return new GeneralPath();
	}
	
	public Shape createShape(double x, double y, double width, double height) {
		Shape shape = createEmptyShape();
		updateShape(shape, x, y, width, height);
		return shape;
	}

}
@


1.1.2.2
log
@java 1.5 compatibility
@
text
@d10 1
a10 1
 *
d19 1
a19 3

		public void updateShape(Shape shape, double x, double y, double width,
				double height) {
d27 1
a27 3

		public void updateShape(Shape shape, double x, double y, double width,
				double height) {
d37 1
a37 3

		public void updateShape(Shape shape, double x, double y, double width,
				double height) {
d44 1
a44 2
		public void updateShape(Shape shape, double x, double y, double width,
				double height) {
d47 5
a51 5
			path.moveTo((float) x, (float) (y + 0.5f * height));
			path.lineTo((float) (x + 0.5f * height), (float) y);
			path.lineTo((float) (x + height), (float) (y + 0.5f * height));
			path.lineTo((float) (x + 0.5f * height), (float) (y + height));
			path.closePath();
d56 1
a56 2
		public void updateShape(Shape shape, double x, double y, double width,
				double height) {
d58 15
a72 15
			double h14 = 3 * height / 8, h34 = 5 * height / 8;
			path.reset();
			path.moveTo((float) (x + h14), (float) y);
			path.lineTo((float) (x + h34), (float) y);
			path.lineTo((float) (x + h34), (float) (y + h14));
			path.lineTo((float) (x + height), (float) (y + h14));
			path.lineTo((float) (x + height), (float) (y + h34));
			path.lineTo((float) (x + h34), (float) (y + h34));
			path.lineTo((float) (x + h34), (float) (y + height));
			path.lineTo((float) (x + h14), (float) (y + height));
			path.lineTo((float) (x + h14), (float) (y + h34));
			path.lineTo((float) x, (float) (y + h34));
			path.lineTo((float) x, (float) (y + h14));
			path.lineTo((float) (x + h14), (float) (y + h14));
			path.closePath();
d77 21
a97 29
		public void updateShape(Shape shape, double x, double y, double width,
				double height) {
			double s = height / (2 * Math.sin(Math.toRadians(54)));
			double shortSide = height / (2 * Math.tan(Math.toRadians(54)));
			double mediumSide = s * Math.sin(Math.toRadians(18));
			double longSide = s * Math.cos(Math.toRadians(18));
			double innerLongSide = s / (2 * Math.cos(Math.toRadians(36)));
			double innerShortSide = innerLongSide
					* Math.sin(Math.toRadians(36));
			double innerMediumSide = innerLongSide
					* Math.cos(Math.toRadians(36));
			GeneralPath path = (GeneralPath) shape;
			path.reset();
			path.moveTo((float) x, (float) (y + shortSide));
			path.lineTo((float) (x + innerLongSide), (float) (y + shortSide));
			path.lineTo((float) (x + height / 2), (float) y);
			path.lineTo((float) (x + height - innerLongSide),
					(float) (y + shortSide));
			path.lineTo((float) (x + height), (float) (y + shortSide));
			path.lineTo((float) (x + height - innerMediumSide), (float) (y
					+ shortSide + innerShortSide));
			path.lineTo((float) (x + height - mediumSide),
							(float) (y + height));
			path.lineTo((float) (x + height / 2), (float) (y + shortSide
					+ longSide - innerShortSide));
			path.lineTo((float) (x + mediumSide), (float) (y + height));
			path.lineTo((float) (x + innerMediumSide),
					(float) (y + shortSide + innerShortSide));
			path.closePath();
d102 1
a102 2
		public void updateShape(Shape shape, double x, double y, double width,
				double height) {
d105 4
a108 4
			path.moveTo((float) x, (float) (y + height));
			path.lineTo((float) (x + height / 2), (float) y);
			path.lineTo((float) (x + height), (float) (y + height));
			path.closePath();
d113 1
a113 2
		public void updateShape(Shape shape, double x, double y, double width,
				double height) {
d116 4
a119 4
			path.moveTo((float) x, (float) y);
			path.lineTo((float) (x + height), (float) y);
			path.lineTo((float) (x + height / 2), (float) (y + height));
			path.closePath();
d124 1
a124 2
		public void updateShape(Shape shape, double x, double y, double width,
				double height) {
d126 5
a130 5
			path.reset();
			path.moveTo((float) (x + height), (float) y);
			path.lineTo((float) (x + height), (float) (y + height));
			path.lineTo((float) x, (float) (y + height / 2));
			path.closePath();
d135 1
a135 2
		public void updateShape(Shape shape, double x, double y, double width,
				double height) {
d137 5
a141 5
			path.reset();
			path.moveTo((float) x, (float) (y + height));
			path.lineTo((float) (x + height), (float) (y + height / 2));
			path.lineTo((float) x, (float) y);
			path.closePath();
d146 2
a147 3
		public void updateShape(Shape shape, double x, double y, double width,
				double height) {
			width = height / 2; // !!
d149 8
a156 9
			path.reset();
			path.moveTo((float) x, (float) (y + 0.5f * height));
			path.lineTo((float) (x + 0.5f * width), (float) y);
			path.lineTo((float) (x + 1.5f * width), (float) y);
			path.lineTo((float) (x + 2.0f * width),
							(float) (y + 0.5f * height));
			path.lineTo((float) (x + 1.5f * width), (float) (y + height));
			path.lineTo((float) (x + 0.5f * width), (float) (y + height));
			path.closePath();
d159 1
a159 1

d163 1
a163 1

@


