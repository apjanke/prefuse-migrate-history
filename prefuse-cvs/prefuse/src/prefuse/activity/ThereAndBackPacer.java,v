head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.19;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.40;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.activity;

/**
 * Pacing function that maps the animation fraction f such that it ranges
 * from 0 to 1 and then back to 0 again. This is useful for animations
 * with periodic activity.
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class ThereAndBackPacer implements Pacer {

    /**
     * Pacing function for providing there-and-back (periodic) transitions.
     * @@see prefuse.activity.Pacer#pace(double)
     */
    public double pace(double f) {
        return 2*(f <= 0.5 ? f : (1-f));
    }

} // end of class ThereAndBackPacer
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d17 1
a17 1
        return 2*(f <= 0.5 ? f : 1-f);
@


1.1
log
@file ThereAndBackPacer.java was initially added on branch beta.
@
text
@d1 20
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 22
package prefuse.activity;

/**
 * Pacing function that maps the animation fraction f such that it ranges
 * from 0 to 1 and then back to 0 again. This is useful for animations
 * with periodic activity.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 * @@see prefuse.activity.Pacer
 */
public class ThereAndBackPacer implements Pacer {

    /**
     * Pacing function for providing there-and-back (periodic) transitions.
     * @@see prefuse.activity.Pacer#pace(double)
     */
    public double pace(double f) {
        return 2*(f <= 0.5 ? f : (1-f));
    } //

} // end of class ThereAndBackPacer
@


1.1.2.2
log
@Lots of javadoc
@
text
@d8 3
a10 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d20 1
a20 1
    }
@


