head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.19;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.39;	author jogiles;	state Exp;
branches;
next	2.0.4.2;

2.0.4.2
date	2008.04.27.22.00.40;	author amarsden;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.activity;

import java.util.HashMap;

/**
 * <p>Maps between Activity instances and user-defined keys. Can be used to
 * maintain and schedule Activity instances through a layer of indirection.</p>
 * 
 * <p>
 * For example, an Activity could be stored in the map using the method
 * call put("activity", activityRef). The Activity pointed to by activityRef
 * could then be subsequently scheduled using the method call 
 * run("activity"). Furthermore, the Activity referred to by the
 * key "activity" could be changed later by another call to put(), changing
 * a visualization's behavior without modifying any other application code.
 * </p>
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class ActivityMap {

    private HashMap     m_map;
    private ActivityMap m_parent;
    
    /**
     * Creates a new ActivityMap instance.
     */
    public ActivityMap() {
        this(null);
    }
    
    /**
     * Creates a new ActivityMap instance with the specified parent map.
     * @@param parent The parent map to use. This map is referred to to resolve
     * keys that are not found within this, the child map.
     */
    public ActivityMap(ActivityMap parent) {
        m_map = new HashMap();
        m_parent = parent;
    }
    
    /**
     * Clears the contents of this ActivityMap. Does not affect the parent map.
     */
    public void clear() {
        m_map.clear();
    }
    
    /**
     * Returns the number of mappings in this ActivityMap. Does not include
     * mappings stored in the parent map.
     * @@return the number of mappings in this ActivityMap
     */
    public int size() {
        return m_map.size();
    }
    
    /**
     * Returns the Activity associated with the given key. If the key is not
     * found in this map, the parent map is consulted. If no result is found,
     * null is returned.
     * @@param key the key corresponding to a requested Activity instance
     * @@return the requested Activity instance, or null if not found by this map
     * or the parent map.
     */
    public Activity get(String key) {
        Activity a = (Activity)m_map.get(key);
        return (a==null && m_parent!=null ? m_parent.get(key) : a);
    }

    /**
     * Runs the Activity corresponding to the given key with the
     * ActivityManager to begin at the specified time.
     * @@param key the key corresponding to the Activity to run
     * @@param time the start time at which to begin the Activity
     * @@return the scheduled Activity, or null if not found
     */
    public Activity runAt(String key, long time) {
        Activity a = get(key);
        if ( a != null )
            ActivityManager.scheduleAt(a,time);
        return a;
    }    
    
    /**
     * Schedules the Activity corresponding to the given key to be run
     * immediately by the ActivityManager.
     * @@param key the key corresponding to the Activity to run
     * @@return the scheduled Activity, or null if not found
     */
    public Activity run(String key) {
        Activity a = get(key);
        if ( a != null )
            ActivityManager.scheduleNow(a);
        return a;
    }
    
    /**
     * Schedules the Activity corresponding to the afterKey to be run
     * immediately after the completion of the Activity corresponding to 
     * the beforeKey. This method has no scheduling effect on the Activity
     * corresponding to the before key.
     * @@param beforeKey the key corresponding to the first Activity
     * @@param afterKey the key corresponding to the Activity to be scheduled
     *  after the completion of the first.
     * @@return the second, newly scheduled Activity, or null if either of the
     * keys are not found
     */
    public Activity runAfter(String beforeKey, String afterKey) {
        Activity before = get(beforeKey);
        Activity after  = get(afterKey);
        if ( before != null && after != null )
            ActivityManager.scheduleAfter(before, after);
        return after;
    }
    
    /**
     * Schedules the Activity corresponding to the afterKey to always be run
     * immediately after the completion of the Activity corresponding to 
     * the beforeKey. This method has no scheduling effect on the Activity
     * corresponding to the before key.
     * @@param beforeKey the key corresponding to the first Activity
     * @@param afterKey the key corresponding to the Activity to be scheduled
     *  after the completion of the first.
     * @@return the second, newly scheduled Activity, or null if either of the
     * keys are not found
     */
    public Activity alwaysRunAfter(String beforeKey, String afterKey) {
        Activity before = get(beforeKey);
        Activity after  = get(afterKey);
        if ( before != null && after != null )
            ActivityManager.alwaysScheduleAfter(before, after);
        return after;
    }
    
    /**
     * Cancels the Activity corresponding to the given key.
     * @@param key the lookup key for the Activity to cancel
     * @@return the cancelled Activity, or null if no Activity
     *  was found for the given key.
     */
    public Activity cancel(String key) {
        Activity a = get(key);
        if ( a != null )
            a.cancel();
        return a;
    }
    
    /**
     * Associates the given key with the given Activity
     * @@param key the key to associate with the Activity
     * @@param activity an Activity instance
     * @@return the Activity previously mapped to by the key, or null if none
     */
    public Activity put(String key, Activity activity) {
        return (Activity)m_map.put(key, activity);
    }
    
    /**
     * Removes a mapping from this ActivityMap. The parent map, if any,
     * is not effected by this method.
     * @@param key the key of the mapping to remove
     */
    public void remove(Object key) {
        m_map.remove(key);
    }
    
    /**
     * Returns an array consisting of all the keys associated with this
     * map. This does not include any mappings in the parent map.
     * @@return an array of all keys in this ActivityMap
     */
    public Object[] keys() {
        return m_map.keySet().toArray();
    }
    
    /**
     * Returns all keys in this ActivityMap, and in the parent map, and the
     * parent's parent, etc.
     * @@return an array of all keys in this ActivityMap and its parents
     */
    public Object[] allKeys() {
        Object[] a1 = m_map.keySet().toArray();
        if ( m_parent != null ) {
            Object[] a2 = m_parent.allKeys();
            if ( a2 != null && a2.length > 0 ) {
                Object[] o = new Object[a1.length+a2.length];
                System.arraycopy(a1,0,o,0,a1.length);
                System.arraycopy(a2,0,o,a1.length,a2.length);
                return o;
            }
        }
        return a1;
    }
    
    /**
     * Sets this ActivityMap's parent. null values are legal, and
     * indicate this map has no parent.
     * @@param parent the new parent for this map, or null for no parent
     */
    public void setParent(ActivityMap parent) {
        m_parent = parent;
    }
    
    /**
     * Returns this ActivityMap's parent map. This method return null if
     * this map has no parent.
     * @@return this map's parent map
     */
    public ActivityMap getParent() {
        return m_parent;
    }
    
} // end of class ActivityMap
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@a3 1
import java.util.Map;
d8 1
a8 1
 *
d12 1
a12 1
 * could then be subsequently scheduled using the method call
d22 1
a22 1
    private final Map<String, Activity>     m_map;
d24 1
a24 1

d31 1
a31 1

d38 1
a38 1
        m_map = new HashMap<String, Activity>();
d41 1
a41 1

d48 1
a48 1

d57 1
a57 1

d67 2
a68 2
        Activity a = m_map.get(key);
        return a==null && m_parent!=null ? m_parent.get(key) : a;
d80 2
a81 3
        if ( a != null ) {
			ActivityManager.scheduleAt(a,time);
		}
d83 2
a84 2
    }

d93 2
a94 3
        if ( a != null ) {
			ActivityManager.scheduleNow(a);
		}
d97 1
a97 1

d100 1
a100 1
     * immediately after the completion of the Activity corresponding to
d112 2
a113 3
        if ( before != null && after != null ) {
			ActivityManager.scheduleAfter(before, after);
		}
d116 1
a116 1

d119 1
a119 1
     * immediately after the completion of the Activity corresponding to
d131 2
a132 3
        if ( before != null && after != null ) {
			ActivityManager.alwaysScheduleAfter(before, after);
		}
d135 1
a135 1

d144 2
a145 3
        if ( a != null ) {
			a.cancel();
		}
d148 1
a148 1

d156 1
a156 1
        return m_map.put(key, activity);
d158 1
a158 1

d167 1
a167 1

d176 1
a176 1

d195 1
a195 1

d204 1
a204 1

d213 1
a213 1

@


2.0.4.2
log
@allowed all actions to be removed from the Visualization easily
@
text
@a2 2
import java.util.AbstractMap;
import java.util.ArrayList;
a3 2
import java.util.HashSet;
import java.util.List;
a4 1
import java.util.Set;
d21 1
a21 1
public class ActivityMap extends AbstractMap<String, Activity> {
d67 1
a67 1
    public Activity get(Object key) {
d170 11
a180 2
    public Activity remove(Object key) {
        return m_map.remove(key);
d188 12
a199 6
    public List<String> allKeys() {
    	List<String> keys = new ArrayList<String>();
    	for(ActivityMap m = this; m != null; m = m.getParent()) {
    		keys.addAll(m.keySet());
    	}
        return keys;
a219 5
	@@Override
	public Set<Map.Entry<String, Activity>> entrySet() {
		return m_map.entrySet();
	}

@


1.1
log
@file ActivityMap.java was initially added on branch beta.
@
text
@d1 214
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 213
package prefuse.activity;

import java.util.HashMap;

/**
 * Maps between Activity instances and user-defined keys. Can be used to
 * maintain and schedule Activity instances through a layer of indirection.
 * 
 * For example, an Activity could be stored in the map using the method
 * call put("activity", activityRef). The Activity pointed to by activityRef
 * could then be subsequently scheduled using the method call 
 * scheduleNow("activity"). Furthermore, the Activity referred to by the
 * key "activity" could be changed later by another call to put(), changing
 * a visualization's behavior without modifying any other application code.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class ActivityMap {

    private HashMap     m_map;
    private ActivityMap m_parent;
    
    /**
     * Creates a new ActivityMap instance.
     */
    public ActivityMap() {
        this(null);
    }
    
    /**
     * Creates a new ActivityMap instance with the specified parent map.
     * @@param parent The parent map to use. This map is referred to to resolve
     * keys that are not found within this, the child map.
     */
    public ActivityMap(ActivityMap parent) {
        m_map = new HashMap();
        m_parent = parent;
    }
    
    /**
     * Clears the contents of this ActivityMap. Does not affect the parent map.
     */
    public void clear() {
        m_map.clear();
    }
    
    /**
     * Returns the number of mappings in this ActivityMap. Does not include
     * mappings stored in the parent map.
     * @@return the number of mappings in this ActivityMap
     */
    public int size() {
        return m_map.size();
    }
    
    /**
     * Returns the Activity associated with the given key. If the key is not
     * found in this map, the parent map is consulted. If no result is found,
     * null is returned.
     * @@param key the key corresponding to a requested Activity instance
     * @@return the requested Activity instance, or null if not found by this map
     * or the parent map.
     */
    public Activity get(String key) {
        Activity a = (Activity)m_map.get(key);
        return (a==null && m_parent!=null ? m_parent.get(key) : a);
    }

    /**
     * Runs the Activity corresponding to the given key with the
     * ActivityManager to begin at the specified time.
     * @@param key the key corresponding to the Activity to run
     * @@param time the start time at which to begin the Activity
     * @@return the scheduled Activity, or null if not found
     */
    public Activity runAt(String key, long time) {
        Activity a = get(key);
        if ( a != null )
            ActivityManager.scheduleAt(a,time);
        return a;
    }    
    
    /**
     * Schedules the Activity corresponding to the given key to be run
     * immediately by the ActivityManager.
     * @@param key the key corresponding to the Activity to run
     * @@return the scheduled Activity, or null if not found
     */
    public Activity run(String key) {
        Activity a = get(key);
        if ( a != null )
            ActivityManager.scheduleNow(a);
        return a;
    } //
    
    /**
     * Schedules the Activity corresponding to the afterKey to be run
     * immediately after the completion of the Activity corresponding to 
     * the beforeKey. This method has no scheduling effect on the Activity
     * corresponding to the before key.
     * @@param beforeKey the key corresponding to the first Activity
     * @@param afterKey the key corresponding to the Activity to be scheduled
     *  after the completion of the first.
     * @@return the second, newly scheduled Activity, or null if either of the
     * keys are not found
     */
    public Activity runAfter(String beforeKey, String afterKey) {
        Activity before = get(beforeKey);
        Activity after  = get(afterKey);
        if ( before != null && after != null )
            ActivityManager.scheduleAfter(before, after);
        return after;
    } //
    
    /**
     * Schedules the Activity corresponding to the afterKey to always be run
     * immediately after the completion of the Activity corresponding to 
     * the beforeKey. This method has no scheduling effect on the Activity
     * corresponding to the before key.
     * @@param beforeKey the key corresponding to the first Activity
     * @@param afterKey the key corresponding to the Activity to be scheduled
     *  after the completion of the first.
     * @@return the second, newly scheduled Activity, or null if either of the
     * keys are not found
     */
    public Activity alwaysRunAfter(String beforeKey, String afterKey) {
        Activity before = get(beforeKey);
        Activity after  = get(afterKey);
        if ( before != null && after != null )
            ActivityManager.alwaysScheduleAfter(before, after);
        return after;
    }
    
    /**
     * Cancels the Activity corresponding to the given key.
     * @@param key the lookup key for the Activity to cancel
     * @@return the cancelled Activity, or null if no Activity
     *  was found for the given key.
     */
    public Activity cancel(String key) {
        Activity a = get(key);
        if ( a != null )
            a.cancel();
        return a;
    }
    
    /**
     * Associates the given key with the given Activity
     * @@param key the key to associate with the Activity
     * @@param activity an Activity instance
     * @@return the Activity previously mapped to by the key, or null if none
     */
    public Activity put(String key, Activity activity) {
        return (Activity)m_map.put(key, activity);
    }
    
    /**
     * Removes a mapping from this ActivityMap. The parent map, if any,
     * is not effected by this method.
     * @@param key the key of the mapping to remove
     */
    public void remove(Object key) {
        m_map.remove(key);
    }
    
    /**
     * Returns an array consisting of all the keys associated with this
     * map. This does not include any mappings in the parent map.
     * @@return an array of all keys in this ActivityMap
     */
    public Object[] keys() {
        return m_map.keySet().toArray();
    }
    
    /**
     * Returns all keys in this ActivityMap, and in the parent map, and the
     * parent's parent, etc.
     * @@return an array of all keys in this ActivityMap and its parents
     */
    public Object[] allKeys() {
        Object[] a1 = m_map.keySet().toArray();
        if ( m_parent != null ) {
            Object[] a2 = m_parent.allKeys();
            if ( a2 != null && a2.length > 0 ) {
                Object[] o = new Object[a1.length+a2.length];
                System.arraycopy(a1,0,o,0,a1.length);
                System.arraycopy(a2,0,o,a1.length,a2.length);
                return o;
            }
        }
        return a1;
    }
    
    /**
     * Sets this ActivityMap's parent. null values are legal, and
     * indicate this map has no parent.
     * @@param parent the new parent for this map, or null for no parent
     */
    public void setParent(ActivityMap parent) {
        m_parent = parent;
    }
    
    /**
     * Returns this ActivityMap's parent map. This method return null if
     * this map has no parent.
     * @@return this map's parent map
     */
    public ActivityMap getParent() {
        return m_parent;
    }
    
} // end of class ActivityMap
@


1.1.2.2
log
@Lots of javadoc
@
text
@d6 2
a7 2
 * <p>Maps between Activity instances and user-defined keys. Can be used to
 * maintain and schedule Activity instances through a layer of indirection.</p>
a8 1
 * <p>
d12 1
a12 1
 * run("activity"). Furthermore, the Activity referred to by the
a14 1
 * </p>
d16 2
a17 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d95 1
a95 1
    }
d114 1
a114 1
    }
@


