head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.19;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.02.01.19.22.43;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.39;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.activity;

/**
 * A Pacer, or pacing function, maps one double value to another; they
 * are used to parameterize animation rates, where the input value f moves
 * from 0 to 1 linearly, but the returned output can vary quite differently
 * in response to the input.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 * @@see prefuse.action.Action
 * @@see prefuse.activity.SlowInSlowOutPacer
 * @@see prefuse.activity.ThereAndBackPacer
 */
public interface Pacer {

    /**
     * Maps one double value to another to determine animation pacing. Under
     * most circumstances, both the input and output values should be in the
     * range 0-1, inclusive.
     * @@param f the input value, should be between 0-1
     * @@return the output value, should be between 0-1
     */
    public double pace(double f);
    
} // end of interface Pacer
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d25 1
a25 1

@


1.1
log
@file Pacer.java was initially added on branch beta.
@
text
@d1 26
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 25
package prefuse.activity;

/**
 * A Pacer, or pacing function, simply maps one double value to another. They
 * are used to parameterize animation rates, where the input value f moves
 * from 0 to 1 linearly, but the returned output can vary quite differently
 * in response to the input.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 * @@see prefuse.activity.ActionList
 * @@see prefuse.activity.SlowInSlowOutPacer
 * @@see prefuse.activity.ThereAndBackPacer
 */
public interface Pacer {

    /**
     * Maps one double value to another to determine animation pacing. Both
     * the input and output values should be in the range 0-1, inclusive.
     * @@param f the input value, should be between 0-1
     * @@return the output value, should be between 0-1
     */
    public double pace(double f);
    
} // end of interface Pacer
@


1.1.2.2
log
@Lots of javadoc
@
text
@d4 1
a4 1
 * A Pacer, or pacing function, maps one double value to another; they
d10 1
a10 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d18 2
a19 3
     * Maps one double value to another to determine animation pacing. Under
     * most circumstances, both the input and output values should be in the
     * range 0-1, inclusive.
@


1.1.2.3
log
@Javadoc'd.
@
text
@d11 1
a11 1
 * @@see prefuse.action.Action
@


