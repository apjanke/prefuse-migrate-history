head	2.1;
access;
symbols
	java_1_5:2.1.0.4
	Root_java_1_5:2.1
	beta:2.1.0.2
	beta-20080113:2.1
	beta-20071021:2.1
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.1
date	2007.10.21.21.36.05;	author jheer;	state Exp;
branches
	2.1.4.1;
next	2.0;

2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.19;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.23.07.18;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.02.01.19.22.43;	author jheer;	state Exp;
branches;
next	;

2.1.4.1
date	2008.01.23.23.55.40;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.1
log
@Added root node checks to TreeNodeIterator to avoid iteration errors
Updated IOLib to support relative file paths (Bug #1775875 from anonymous)
Updated JRangeSlider to support drags from arrow buttons (Bug #1747778 from colincombe)
Updated ExpressionParser to avoid long parse bug (Bug #1741759)
Updated TupleManager to expand tuple list in face of valid rows from CascadedTable instances (Bug #1741106)
Added checks for min==max condition in NumberRangeModel (Bug #1731911)
Added patch to Activity and ActivityManager to avoid deadlock on Activity.cancel() (Bug #1708926 fix from joperry)
Fixed javadoc example for DefaultRendererFactory (Bug #1674371 from cab938)
Fixed ENDPOLYGON field in VisualItem (Bug #1554408 from dimerman)
Fixed FisheyeMenu demo to avoid deadlock (Bug #1672798)
Updated Tree.getDepth to return -1 if node is valid (in the node table) but not in tree (fix from joperry)
Added Display.reset method to release used memory from an idle, unused Display instance
Added Graph.removeAllGraphListeners() method
Added Table.removeAllTableListeners() method
Added isAsynchronous / setAsynchronous methods to ImageFactory
Updated Visualization.invalidate to invalidate just the group specified (it incorrectly was invalidating all groups)
Updated ActivityManager._schedule to call notifyAll when an already scheduled item is re-scheduled
@
text
@package prefuse.activity;

import prefuse.util.collections.CopyOnWriteArrayList;


/**
 * Represents an activity that can be scheduled and run. This could include
 * data processing, animation, and time-sensitive operations.
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 * @@see prefuse.activity.ActivityManager
 * @@see prefuse.action.Action
 */
public abstract class Activity {

    public static final long INFINITY = -1L; // specifies infinite duration
    public static final long DEFAULT_STEP_TIME = 15L;
    
    private boolean m_enabled = true;
    private Pacer m_pacer;
    
    private long m_startTime = -1L;
    private long m_duration  = -1L;
    private long m_stepTime  = -1L;
    private long m_nextTime  = -1L;
    private boolean m_isRunning = false;
    private boolean m_isScheduled = false;
    
    private CopyOnWriteArrayList m_listeners;
    
    /**
     * Creates a new Activity.
     * @@param duration the length of this activity.
     *  A value of {@@link #INFINITY} indicates an infinite running time.
     * @@see prefuse.activity.Activity#Activity(long, long, long)     
     */
    public Activity(long duration) {
        this(duration, DEFAULT_STEP_TIME);
    }
    
    /**
     * Creates a new Activity.
     * @@param duration the length of this activity.
     *  A value of {@@link #INFINITY} indicates an infinite running time.
     * @@param stepTime the delay time between steps of this activity
     * @@see prefuse.activity.Activity#Activity(long, long, long)
     */
    public Activity(long duration, long stepTime) {
        this(duration, stepTime, System.currentTimeMillis());
    }
    
    /**
     * Creates a new Activity.
     * @@param duration the length of this activity. 
     *  A value of {@@link #INFINITY} indicates an infinite running time.
     * @@param stepTime the delay time between steps of this activity
     * @@param startTime the time at which this activity should begin
     */
    public Activity(long duration, long stepTime, long startTime) {
        m_startTime = startTime;
        m_nextTime  = startTime;
        m_duration  = duration;
        m_stepTime  = stepTime;
    }
       
    /**
     * Schedules this Activity to start immediately.
     */
    public void run() {
        ActivityManager.scheduleNow(this);
    }
    
    /**
     * Schedules this Activity for the specified startTime, overwriting the
     * Activity's currently set startTime.
     * @@param startTime the time at which the activity should run
     */
    public void runAt(long startTime) {
        ActivityManager.scheduleAt(this,startTime);
    }
    
    /**
     * Schedules this Activity to start immediately after another Activity.
     * This Activity will be scheduled to start immediately after the
     * first one finishes, overwriting any previously set startTime. If the
     * first Activity is cancelled, this one will not run.
     * 
     * This functionality is provided by using an ActivityListener to monitor
     * the first Activity. The listener is removed upon completion or
     * cancellation of the first Activity.
     * 
     * This method does not in any way affect the scheduling of the first 
     * Activity. If the first Activity is never scheduled, this Activity
     * will correspondingly never be run unless scheduled by a separate
     * scheduling call.
     * @@param before the Activity that must finish before this one starts
     */
    public void runAfter(Activity before) {
        ActivityManager.scheduleAfter(before, this);
    }
    
    /**
     * Schedules this Activity to start immediately after another Activity.
     * This Activity will be scheduled to start immediately after the
     * first one finishes, overwriting any previously set startTime. If the
     * first Activity is cancelled, this one will not run.
     * 
     * This functionality is provided by using an ActivityListener to monitor
     * the first Activity. The listener will persist across mulitple runs,
     * meaning the second Activity will always be evoked upon a successful
     * finish of the first.
     * 
     * This method does not in any way affect the scheduling of the first 
     * Activity. If the first Activity is never scheduled, this Activity
     * will correspondingly never be run unless scheduled by a separate
     * scheduling call.
     * @@param before the Activity that must finish before this one starts
     */
    public void alwaysRunAfter(Activity before) {
        ActivityManager.alwaysScheduleAfter(before, this);
    }
    
    /**
     * Run this activity one step. Subclasses should override this method to
     * specify the actions this activity should perform.
     * @@param elapsedTime the time elapsed since the start of the activity.
     */
    protected abstract void run(long elapsedTime);
    
    /**
     * Run this activity for a single step. This method is called by the
     * ActivityManager -- outside code should have no need to call or
     * override this method. To implement custom activities, override the
     * run() method instead.
     * @@param currentTime the time at which this step is being run.
     * @@return the time (in milliseconds) when this activity should be
     *  run again. A return value of -1 indicates this activity is finished.
     */
    long runActivity(long currentTime) {
        if (currentTime < m_startTime) {
            return m_startTime - currentTime;  
        }
        
        long elapsedTime = currentTime - m_startTime;
        
        if ( m_duration == 0 || currentTime >= getStopTime() )
        {
            if ( !setRunning(true) ) {
                fireActivityStarted();
            }
            if ( m_enabled ) {               
                run(elapsedTime);
                fireActivityStepped();
            }
            setRunning(false);
            
            fireActivityFinished();
            return -1;
        }
        else if ( currentTime >= m_nextTime )
        {
            if ( !setRunning(true) )
                fireActivityStarted();
            if ( m_enabled ) {
                run(elapsedTime);
                fireActivityStepped();
            }
            m_nextTime = currentTime + m_stepTime;
        }
        
        return (m_nextTime-currentTime);
    }
    
    /**
     * Cancels this activity, if scheduled. This will stop a
     * running activity, and will remove the activity from
     * the ActivityManager's schedule.
     */
    public void cancel() {
    /*
     * Prefuse Bug ID #1708926
     * The fix ("Contribution") has not been tested and/or validated for release as or in products,
     * combinations with products or other commercial use.
     * Any use of the Contribution is entirely made at the user's own responsibility and the user can
     * not rely on any features, functionalities or performances Alcatel-Lucent has attributed to the Contribution.
     * THE CONTRIBUTION BY ALCATEL-LUCENT (...) IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND,
     * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE, COMPLIANCE, NON-INTERFERENCE  AND/OR INTERWORKING WITH THE SOFTWARE
     * TO WHICH THE CONTRIBUTION HAS BEEN MADE, TITLE AND NON-INFRINGEMENT.
     * IN NO EVENT SHALL ALCATEL-LUCENT (...) BE LIABLE FOR ANY DAMAGES OR OTHER LIABLITY,
     * WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE CONTRIBUTION
     * OR THE USE OR OTHER DEALINGS IN THE CONTRIBUTION,
     * WHETHER TOGETHER WITH THE SOFTWARE TO WHICH THE CONTRIBUTION RELATES OR ON A STAND ALONE BASIS.
     */
    	ActivityManager.cancelActivity(this);
    }
    
    /**
     * Indicates if this activity is currently scheduled 
     *  with the ActivityManager
     * @@return true if scheduled, false otherwise
     */
    public synchronized boolean isScheduled() {
        return m_isScheduled;
    }
    
    /**
     * Sets whether or not this Activity has been scheduled. This method should
     * only be called by the ActivityManager.
     * @@param s the scheduling state of this Activity
     */
    void setScheduled(boolean s) {
        boolean fire;
        synchronized ( this ) {
            fire = (s && !m_isScheduled);
            m_isScheduled = s;
        }
        if ( fire )
            fireActivityScheduled();
    }
    
    /**
     * Sets a flag indicating whether or not this activity is currently running
     * @@param s the new running state of this activity
     */
    synchronized boolean setRunning(boolean s) {
        boolean b = m_isRunning;
        m_isRunning = s;
        return b;
    }
    
    /**
     * Indicates if this activity is currently running.
     * @@return true if running, false otherwise
     */
    public synchronized boolean isRunning() {
        return m_isRunning;
    }
    
    // ------------------------------------------------------------------------
    // Activity Listeners
    
    /**
     * Add an ActivityListener to monitor this activity's events.
     * @@param l the ActivityListener to add
     */
    public void addActivityListener(ActivityListener l) {
        if ( m_listeners == null )
            m_listeners = new CopyOnWriteArrayList();
        if ( !m_listeners.contains(l) )
            m_listeners.add(l);
    }
    
    /**
     * Remove a registered ActivityListener
     * @@param l the ActivityListener to remove
     */
    public void removeActivityListener(ActivityListener l) {
        if ( m_listeners == null )
            return;
        m_listeners.remove(l);
        if ( m_listeners.size() == 0 )
            m_listeners = null;
    }

    protected void fireActivityScheduled() {
        if ( m_listeners == null ) return;
        Object[] a = m_listeners.getArray();
        for ( int i=0; i<a.length; ++i ) {
            ((ActivityListener)a[i]).activityScheduled(this);
        }
    }
    
    protected void fireActivityStarted() {
        if ( m_listeners == null ) return;
        Object[] a = m_listeners.getArray();
        for ( int i=0; i<a.length; ++i ) {
            ((ActivityListener)a[i]).activityStarted(this);
        }
    }
    
    protected void fireActivityStepped() {
        if ( m_listeners == null ) return;
        Object[] a = m_listeners.getArray();
        for ( int i=0; i<a.length; ++i ) {
            ((ActivityListener)a[i]).activityStepped(this);
        }
    }
    
    protected void fireActivityFinished() {
        if ( m_listeners == null ) return;
        Object[] a = m_listeners.getArray();
        for ( int i=0; i<a.length; ++i ) {
            ((ActivityListener)a[i]).activityFinished(this);
        }
    }
    
    protected void fireActivityCancelled() {
        if ( m_listeners == null ) return;
        Object[] a = m_listeners.getArray();
        for ( int i=0; i<a.length; ++i ) {
            ((ActivityListener)a[i]).activityCancelled(this);
        }
    }
    
    // ------------------------------------------------------------------------
    // Accessor / Mutator Methods
    
    /**
     * Returns a value between 0 and 1 inclusive, indicating the current
     * position in an animation or other similarly parameterized activity.
     * The returned value is determined by consulting this Activity's
     * pacing function.
     * @@param elapsedTime the time in milliseconds since the start of this
     *  Activity.
     * @@return a value between 0 and 1 indicating the current position in
     *  an animation.
     * @@see prefuse.activity.Activity#getPacingFunction()
     */
    public double getPace(long elapsedTime) {
        long duration = getDuration();
        double frac = (duration == 0L ? 0.0 : ((double)elapsedTime)/duration);
        frac = Math.min(1, Math.max(0, frac));
        return m_pacer!=null ? m_pacer.pace(frac) : frac;
    }
    
    /**
     * Returns the pacing function associated with this Activity. Pacing
     * functions are used to control the pace of animations.
     * @@return this Activity's pacing function. A value of null indicates a
     *  basic, linear pace is used, moving from 0 to 1 uniformly over time.
     */
    public synchronized Pacer getPacingFunction() {
        return m_pacer;
    }
    
    /**
     * Sets the pacing function associated with this Activity. Pacing
     * functions are used to control the pace of animations.
     * @@param pfunc this Activity's new pacing function, or null to
     *  indicate a basic, linear pace moving from 0 to 1 uniformly
     *  over time.
     */
    public synchronized void setPacingFunction(Pacer pfunc) {
        m_pacer = pfunc;
    }
    
    /**
     * Get the time at which this activity should complete.
     * @@return the stopping time for this activity, or Long.MAX_VALUE
     *  if this activity should run indefinitely.
     */
    public long getStopTime() {
        if (m_duration == -1) {
            return Long.MAX_VALUE;
        }
        return m_startTime + m_duration;
    }
    
    /**
     * Get the time at which this activity should be run next.
     * @@return the time this activity should run next
     */
    public long getNextTime() {
        return m_nextTime;
    }
    
    /**
     * Returns the duration of this activity
     * @@return the duration of this activity, in milliseconds
     */
    public long getDuration() {
        return m_duration;
    }

    /**
     * Set the duration of this activity
     * @@param duration The new duration, in milliseconds, for this activity.
     *  A value of {@@link #INFINITY} indicates that this activity should run
     *  indefinitely.
     */
    public void setDuration(long duration) {
        this.m_duration = duration;
    }

    /**
     * Returns this activity's start time
     * @@return the starting time for this activity
     */
    public long getStartTime() {
        return m_startTime;
    }

    /**
     * Sets this activity's start time
     * @@param time the new starting time for this activity
     */
    public void setStartTime(long time) {
        m_startTime = time;
    }

    /**
     * Returns the delay between runs for this activity
     * @@return the step time between runs of this activity
     */
    public long getStepTime() {
        return m_stepTime;
    }

    /**
     * Sets the delay between runs for this activity
     * @@param time the new step time between runs of this activity
     */
    public void setStepTime(long time) {
        m_stepTime = time;
    }
    
    /**
     * Indicates whether or not this activity is currently enabled.
     * @@return true if enabled, false otherwise
     */
    public boolean isEnabled() {
        return m_enabled;
    }
    
    /**
     * Sets whether this component is enabled.
     * @@param s true to enable component, false to disable it
     */
    public void setEnabled(boolean s) {
        m_enabled = s;
    }
    
} // end of class Activity
@


2.1.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d3 1
a3 1
import java.util.concurrent.CopyOnWriteArrayList;
d18 1
a18 1

d21 1
a21 1

d28 3
a30 3

    private CopyOnWriteArrayList<ActivityListener> m_listeners;

d35 1
a35 1
     * @@see prefuse.activity.Activity#Activity(long, long, long)
d40 1
a40 1

d51 1
a51 1

d54 1
a54 1
     * @@param duration the length of this activity.
d65 1
a65 1

d72 1
a72 1

d81 1
a81 1

d87 1
a87 1
     *
d91 2
a92 2
     *
     * This method does not in any way affect the scheduling of the first
d101 1
a101 1

d107 1
a107 1
     *
d112 2
a113 2
     *
     * This method does not in any way affect the scheduling of the first
d122 1
a122 1

d129 1
a129 1

d141 1
a141 1
            return m_startTime - currentTime;
d143 1
a143 1

d145 1
a145 1

d151 1
a151 1
            if ( m_enabled ) {
d156 1
a156 1

d162 2
a163 3
            if ( !setRunning(true) ) {
				fireActivityStarted();
			}
d170 2
a171 2

        return m_nextTime-currentTime;
d173 1
a173 1

d180 16
a195 16
        /*
         * Prefuse Bug ID #1708926
         * The fix ("Contribution") has not been tested and/or validated for release as or in products,
         * combinations with products or other commercial use.
         * Any use of the Contribution is entirely made at the user's own responsibility and the user can
         * not rely on any features, functionalities or performances Alcatel-Lucent has attributed to the Contribution.
         * THE CONTRIBUTION BY ALCATEL-LUCENT (...) IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND,
         * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         * FITNESS FOR A PARTICULAR PURPOSE, COMPLIANCE, NON-INTERFERENCE  AND/OR INTERWORKING WITH THE SOFTWARE
         * TO WHICH THE CONTRIBUTION HAS BEEN MADE, TITLE AND NON-INFRINGEMENT.
         * IN NO EVENT SHALL ALCATEL-LUCENT (...) BE LIABLE FOR ANY DAMAGES OR OTHER LIABLITY,
         * WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE CONTRIBUTION
         * OR THE USE OR OTHER DEALINGS IN THE CONTRIBUTION,
         * WHETHER TOGETHER WITH THE SOFTWARE TO WHICH THE CONTRIBUTION RELATES OR ON A STAND ALONE BASIS.
         */
      	ActivityManager.cancelActivity(this);
d197 1
a197 1

d199 1
a199 1
     * Indicates if this activity is currently scheduled
d206 1
a206 1

d215 1
a215 1
            fire = s && !m_isScheduled;
d218 2
a219 3
        if ( fire ) {
			fireActivityScheduled();
		}
d221 1
a221 1

d231 1
a231 1

d239 1
a239 1

d242 1
a242 1

d248 4
a251 6
        if ( m_listeners == null ) {
			m_listeners = new CopyOnWriteArrayList<ActivityListener>();
		}
        if ( !m_listeners.contains(l) ) {
			m_listeners.add(l);
		}
d253 1
a253 1

d259 2
a260 3
        if ( m_listeners == null ) {
			return;
		}
d262 2
a263 3
        if ( m_listeners.size() == 0 ) {
			m_listeners = null;
		}
d267 4
a270 5
        if ( m_listeners == null ) {
			return;
		}
        for(ActivityListener l : m_listeners) {
            l.activityScheduled(this);
d273 1
a273 1

d275 4
a278 5
        if ( m_listeners == null ) {
			return;
		}
        for(ActivityListener l : m_listeners) {
            l.activityStarted(this);
d281 1
a281 1

d283 4
a286 5
        if ( m_listeners == null ) {
			return;
		}
        for(ActivityListener l : m_listeners) {
            l.activityStepped(this);
d289 1
a289 1

d291 4
a294 5
        if ( m_listeners == null ) {
			return;
		}
        for(ActivityListener l : m_listeners) {
            l.activityFinished(this);
d297 1
a297 1

d299 4
a302 5
        if ( m_listeners == null ) {
			return;
		}
        for(ActivityListener l : m_listeners) {
            l.activityCancelled(this);
d305 1
a305 1

d308 1
a308 1

d322 1
a322 1
        double frac = duration == 0L ? 0.0 : (double)elapsedTime/duration;
d326 1
a326 1

d336 1
a336 1

d347 1
a347 1

d359 1
a359 1

d367 1
a367 1

d417 1
a417 1

d425 1
a425 1

d433 1
a433 1

@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d180 16
a195 12
        boolean fire = false;
        synchronized ( this ) {
            if ( isScheduled() ) {
                // attempt to remove this activity, if the remove fails,
                // this activity is not currently scheduled with the manager
                ActivityManager.removeActivity(this);
                fire = true;
            }
            setRunning(false);
        }
        if ( fire )
            fireActivityCancelled();
@


1.1
log
@file Activity.java was initially added on branch beta.
@
text
@d1 430
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 430
package prefuse.activity;

import prefuse.util.collections.CopyOnWriteArrayList;


/**
 * Represents an activity that can be scheduled and run. This could include
 * data processing, animation, and time-sensitive operations.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 * @@see prefuse.activity.ActivityManager
 * @@see prefuse.activity.ActionList
 */
public abstract class Activity {

    public static final long INFINITY = -1L; // specifies infinite duration
    public static final long DEFAULT_STEP_TIME = 15L;
    
    private boolean m_enabled = true;
    private Pacer m_pacer;
    
    private long m_startTime = -1L;
    private long m_duration  = -1L;
    private long m_stepTime  = -1L;
    private long m_nextTime  = -1L;
    private boolean m_isRunning = false;
    private boolean m_isScheduled = false;
    
    private CopyOnWriteArrayList m_listeners;
    
    /**
     * Creates a new Activity.
     * @@param duration the length of this activity.
     *  A value of -1 indicates an infinite running time.
     * @@see prefuse.activity.Activity#Activity(long, long, long)     
     */
    public Activity(long duration) {
        this(duration, DEFAULT_STEP_TIME);
    } //
    
    /**
     * Creates a new Activity.
     * @@param duration the length of this activity.
     *  A value of -1 indicates an infinite running time.
     * @@param stepTime the delay time between steps of this activity
     * @@see prefuse.activity.Activity#Activity(long, long, long)
     */
    public Activity(long duration, long stepTime) {
        this(duration, stepTime, System.currentTimeMillis());
    } //
    
    /**
     * Creates a new Activity.
     * @@param duration the length of this activity. 
     *  A value of -1 indicates an infinite running time.
     * @@param stepTime the delay time between steps of this activity
     * @@param startTime the time at which this activity should begin
     */
    public Activity(long duration, long stepTime, long startTime) {
        m_startTime = startTime;
        m_nextTime  = startTime;
        m_duration  = duration;
        m_stepTime  = stepTime;
    } //
       
    /**
     * Schedules this Activity to start immediately.
     */
    public void run() {
        ActivityManager.scheduleNow(this);
    } //
    
    /**
     * Schedules this Activity for the specified startTime, overwriting the
     * Activity's currently set startTime.
     * @@param startTime the time at which the activity should run
     */
    public void runAt(long startTime) {
        ActivityManager.scheduleAt(this,startTime);
    } //
    
    /**
     * Schedules this Activity to start immediately after another Activity.
     * This Activity will be scheduled to start immediately after the
     * first one finishes, overwriting any previously set startTime. If the
     * first Activity is cancelled, this one will not run.
     * 
     * This functionality is provided by using an ActivityListener to monitor
     * the first Activity. The listener is removed upon completion or
     * cancellation of the first Activity.
     * 
     * This method does not in any way affect the scheduling of the first 
     * Activity. If the first Activity is never scheduled, this Activity
     * will correspondingly never be run unless scheduled by a separate
     * scheduling call.
     * @@param before the Activity that must finish before this one starts
     */
    public void runAfter(Activity before) {
        ActivityManager.scheduleAfter(before, this);
    } //
    
    /**
     * Schedules this Activity to start immediately after another Activity.
     * This Activity will be scheduled to start immediately after the
     * first one finishes, overwriting any previously set startTime. If the
     * first Activity is cancelled, this one will not run.
     * 
     * This functionality is provided by using an ActivityListener to monitor
     * the first Activity. The listener will persist across mulitple runs,
     * meaning the second Activity will always be evoked upon a successful
     * finish of the first.
     * 
     * This method does not in any way affect the scheduling of the first 
     * Activity. If the first Activity is never scheduled, this Activity
     * will correspondingly never be run unless scheduled by a separate
     * scheduling call.
     * @@param before the Activity that must finish before this one starts
     */
    public void alwaysRunAfter(Activity before) {
        ActivityManager.alwaysScheduleAfter(before, this);
    } //
    
    /**
     * Run this activity one step. Subclasses should override this method to
     * specify the actions this activity should perform.
     * @@param elapsedTime the time elapsed since the start of the activity.
     */
    protected abstract void run(long elapsedTime);
    
    /**
     * Run this activity for a single step. This method is called by the
     * ActivityManager -- outside code should have no need to call or
     * override this method. To implement custom activities, override the
     * run() method instead.
     * @@param currentTime the time at which this step is being run.
     * @@return the time (in milliseconds) when this activity should be
     *  run again. A return value of -1 indicates this activity is finished.
     */
    long runActivity(long currentTime) {
        if (currentTime < m_startTime) {
            return m_startTime - currentTime;  
        }
        
        long elapsedTime = currentTime - m_startTime;
        
        if ( m_duration == 0 || currentTime >= getStopTime() )
        {
            if ( !setRunning(true) ) {
                fireActivityStarted();
            }
            if ( m_enabled ) {               
                run(elapsedTime);
                fireActivityStepped();
            }
            setRunning(false);
            
            fireActivityFinished();
            return -1;
        }
        else if ( currentTime >= m_nextTime )
        {
            if ( !setRunning(true) )
                fireActivityStarted();
            if ( m_enabled ) {
                run(elapsedTime);
                fireActivityStepped();
            }
            m_nextTime = currentTime + m_stepTime;
        }
        
        return (m_nextTime-currentTime);
    } //
    
    /**
     * Cancels this activity, if scheduled. This will stop a
     * running activity, and will remove the activity from
     * the ActivityManager's schedule.
     */
    public void cancel() {
        boolean fire = false;
        synchronized ( this ) {
            if ( isScheduled() ) {
                // attempt to remove this activity, if the remove fails,
                // this activity is not currently scheduled with the manager
                ActivityManager.removeActivity(this);
                fire = true;
            }
            setRunning(false);
        }
        if ( fire )
            fireActivityCancelled();
    } //
    
    /**
     * Indicates if this activity is currently scheduled 
     *  with the ActivityManager
     * @@return true if scheduled, false otherwise
     */
    public synchronized boolean isScheduled() {
        return m_isScheduled;
    } //
    
    /**
     * Sets whether or not this Activity has been scheduled. This method should
     * only be called by the ActivityManager.
     * @@param s the scheduling state of this Activity
     */
    void setScheduled(boolean s) {
        boolean fire;
        synchronized ( this ) {
            fire = (s && !m_isScheduled);
            m_isScheduled = s;
        }
        if ( fire )
            fireActivityScheduled();
    } //
    
    /**
     * Sets a flag indicating whether or not this activity is currently running
     * @@param s the new running state of this activity
     */
    synchronized boolean setRunning(boolean s) {
        boolean b = m_isRunning;
        m_isRunning = s;
        return b;
    } //
    
    /**
     * Indicates if this activity is currently running.
     * @@return true if running, false otherwise
     */
    public synchronized boolean isRunning() {
        return m_isRunning;
    } //
    
    // ------------------------------------------------------------------------
    // Activity Listeners
    
    /**
     * Add an ActivityListener to monitor this activity's events.
     * @@param l the ActivityListener to add
     */
    public void addActivityListener(ActivityListener l) {
    	if ( m_listeners == null )
    		m_listeners = new CopyOnWriteArrayList();
    	if ( !m_listeners.contains(l) )
    		m_listeners.add(l);
    } //
    
    /**
     * Remove a registered ActivityListener
     * @@param l the ActivityListener to remove
     */
    public void removeActivityListener(ActivityListener l) {
    	if ( m_listeners == null )
    		return;
    	m_listeners.remove(l);
    	if ( m_listeners.size() == 0 )
    		m_listeners = null;
    } //

    protected void fireActivityScheduled() {
    	if ( m_listeners == null ) return;
    	Object[] a = m_listeners.getArray();
    	for ( int i=0; i<a.length; ++i ) {
    		((ActivityListener)a[i]).activityScheduled(this);
    	}
    }
    
    protected void fireActivityStarted() {
    	if ( m_listeners == null ) return;
    	Object[] a = m_listeners.getArray();
    	for ( int i=0; i<a.length; ++i ) {
    		((ActivityListener)a[i]).activityStarted(this);
    	}
    }
    
    protected void fireActivityStepped() {
    	if ( m_listeners == null ) return;
    	Object[] a = m_listeners.getArray();
    	for ( int i=0; i<a.length; ++i ) {
    		((ActivityListener)a[i]).activityStepped(this);
    	}
    }
    
    protected void fireActivityFinished() {
    	if ( m_listeners == null ) return;
    	Object[] a = m_listeners.getArray();
    	for ( int i=0; i<a.length; ++i ) {
    		((ActivityListener)a[i]).activityFinished(this);
    	}
    }
    
    protected void fireActivityCancelled() {
    	if ( m_listeners == null ) return;
    	Object[] a = m_listeners.getArray();
    	for ( int i=0; i<a.length; ++i ) {
    		((ActivityListener)a[i]).activityCancelled(this);
    	}
    }
    
    // ------------------------------------------------------------------------
    // Accessor / Mutator Methods
    
    /**
     * Returns a value between 0 and 1 inclusive, indicating the current
     * position in an animation or other similarly parameterized activity.
     * The returned value is determined by consulting this Activity's
     * pacing function.
     * @@param elapsedTime the time in milliseconds since the start of this
     *  Activity.
     * @@return a value between 0 and 1 indicating the current position in
     *  an animation.
     * @@see prefuse.activity.Activity#getPacingFunction()
     */
    public double getPace(long elapsedTime) {
        long duration = getDuration();
        double frac = (duration == 0L ? 0.0 : ((double)elapsedTime)/duration);
        frac = Math.min(1, Math.max(0, frac));
        return m_pacer!=null ? m_pacer.pace(frac) : frac;
    } //
    
    /**
     * Returns the pacing function associated with this Activity. Pacing
     * functions are used to control the pace of animations.
     * @@return this Activity's pacing function. A value of null indicates a
     *  basic, linear pace is used, moving from 0 to 1 uniformly over time.
     */
    public synchronized Pacer getPacingFunction() {
        return m_pacer;
    } //
    
    /**
     * Sets the pacing function associated with this Activity. Pacing
     * functions are used to control the pace of animations.
     * @@param pfunc this Activity's new pacing function, or null to
     *  indicate a basic, linear pace moving from 0 to 1 uniformly
     *  over time.
     */
    public synchronized void setPacingFunction(Pacer pfunc) {
        m_pacer = pfunc;
    } //
    
    /**
     * Get the time at which this activity should complete.
     * @@return the stopping time for this activity, or Long.MAX_VALUE
     *  if this activity should run indefinitely.
     */
    public long getStopTime() {
        if (m_duration == -1) {
            return Long.MAX_VALUE;
        }
        return m_startTime + m_duration;
    } //
    
    /**
     * Get the time at which this activity should be run next.
     * @@return the time this activity should run next
     */
    public long getNextTime() {
        return m_nextTime;
    } //
    
    /**
     * Returns the duration of this activity
     * @@return the duration of this activity, in milliseconds
     */
    public long getDuration() {
        return m_duration;
    } //

    /**
     * Set the duration of this activity
     * @@param duration The new duration, in milliseconds, for this activity.
     *  A value of -1 indicates that this activity should run indefinitely.
     */
    public void setDuration(long duration) {
        this.m_duration = duration;
    } //

    /**
     * Returns this activity's start time
     * @@return the starting time for this activity
     */
    public long getStartTime() {
        return m_startTime;
    } //

    /**
     * Sets this activity's start time
     * @@param time the new starting time for this activity
     */
    public void setStartTime(long time) {
        m_startTime = time;
    } //

    /**
     * Returns the delay between runs for this activity
     * @@return the step time between runs of this activity
     */
    public long getStepTime() {
        return m_stepTime;
    } //

    /**
     * Sets the delay between runs for this activity
     * @@param time the new step time between runs of this activity
     */
    public void setStepTime(long time) {
        m_stepTime = time;
    } //
    
    /**
     * Indicates whether or not this activity is currently enabled.
     * @@return true if enabled, false otherwise
     */
    public boolean isEnabled() {
        return m_enabled;
    } //
    
    /**
     * Sets whether this component is enabled.
     * @@param s true to enable component, false to disable it
     */
    public void setEnabled(boolean s) {
        m_enabled = s;
    } //
    
} // end of class Activity
@


1.1.2.2
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d245 4
a248 4
        if ( m_listeners == null )
            m_listeners = new CopyOnWriteArrayList();
        if ( !m_listeners.contains(l) )
            m_listeners.add(l);
d256 5
a260 5
        if ( m_listeners == null )
            return;
        m_listeners.remove(l);
        if ( m_listeners.size() == 0 )
            m_listeners = null;
d264 5
a268 5
        if ( m_listeners == null ) return;
        Object[] a = m_listeners.getArray();
        for ( int i=0; i<a.length; ++i ) {
            ((ActivityListener)a[i]).activityScheduled(this);
        }
d272 5
a276 5
        if ( m_listeners == null ) return;
        Object[] a = m_listeners.getArray();
        for ( int i=0; i<a.length; ++i ) {
            ((ActivityListener)a[i]).activityStarted(this);
        }
d280 5
a284 5
        if ( m_listeners == null ) return;
        Object[] a = m_listeners.getArray();
        for ( int i=0; i<a.length; ++i ) {
            ((ActivityListener)a[i]).activityStepped(this);
        }
d288 5
a292 5
        if ( m_listeners == null ) return;
        Object[] a = m_listeners.getArray();
        for ( int i=0; i<a.length; ++i ) {
            ((ActivityListener)a[i]).activityFinished(this);
        }
d296 5
a300 5
        if ( m_listeners == null ) return;
        Object[] a = m_listeners.getArray();
        for ( int i=0; i<a.length; ++i ) {
            ((ActivityListener)a[i]).activityCancelled(this);
        }
@


1.1.2.3
log
@Lots of javadoc
@
text
@d10 2
a11 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d35 1
a35 1
     *  A value of {@@link #INFINITY} indicates an infinite running time.
d40 1
a40 1
    }
d45 1
a45 1
     *  A value of {@@link #INFINITY} indicates an infinite running time.
d51 1
a51 1
    }
d56 1
a56 1
     *  A value of {@@link #INFINITY} indicates an infinite running time.
d65 1
a65 1
    }
d72 1
a72 1
    }
d81 1
a81 1
    }
d101 1
a101 1
    }
d122 1
a122 1
    }
d173 1
a173 1
    }
d193 1
a193 1
    }
d202 1
a202 1
    }
d217 1
a217 1
    }
d227 1
a227 1
    }
d235 1
a235 1
    }
d249 1
a249 1
    }
d261 1
a261 1
    }
d322 1
a322 1
    }
d332 1
a332 1
    }
d343 1
a343 1
    }
d355 1
a355 1
    }
d363 1
a363 1
    }
d371 1
a371 1
    }
d376 1
a376 2
     *  A value of {@@link #INFINITY} indicates that this activity should run
     *  indefinitely.
d380 1
a380 1
    }
d388 1
a388 1
    }
d396 1
a396 1
    }
d404 1
a404 1
    }
d412 1
a412 1
    }
d420 1
a420 1
    }
d428 1
a428 1
    }
@


1.1.2.4
log
@Javadoc'd.
@
text
@d12 1
a12 1
 * @@see prefuse.action.Action
@


