head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.42;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.20;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.24.09.07.08;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.25.21.32.08;	author jheer;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@<body>
<p>
<a href="http://prefuse.org">
<span style="font-family: Verdana, Arial, sans-serif; font-style: italic; font-weight: bold">
prefuse</span></a> is a user interface
toolkit for building highly-interactive information visualization applications.
Prefuse provides facilities for data management,
spatial layout, color, size, and shape encodings, rendering, zooming,
animation, search, and interaction. Furthermore, it attempts to do so in a
modular way, allowing users to piece together desired functionality to
build custom visualization applications.
</p>

<p>
The general pattern of building prefuse applications is to
<ol>
<li>Load the data to be visualized into prefuse's data structures. prefuse provides built-in
support for {@@link prefuse.data.Table Table}, {@@link prefuse.data.Graph Graph}, and 
{@@link prefuse.data.Tree Tree} data structures, and can read from a number of different
file formats ({@@link prefuse.data.io}) as well as communicate with relational databases
({@@link prefuse.data.io.sql}).</li>

<li>Create a {@@link prefuse.Visualization Visualization} that maps the loaded data
to a <i>visual abstraction</i> -- a representation of the data amenable to visual processing,
rendering, and interaction. Each data element can have one or more corresponding
{@@link prefuse.visual.VisualItem VisualItems} that represent an interactive object on the
screen. Each VisualItem includes properties such as the x,y location of the object 
and color, shape, and size settings, while providing access to the underlying data.</li>

<li>Construct a series of data processing {@@link prefuse.action Actions} that operate 
on the visual abstraction. These
operations can involve just about anything, but common examples include setting the
location, color, size, and shape of visual items or animating these properties between
different configurations. These {@@link prefuse.action.Action Action} instances can
be grouped into {@@link prefuse.action.ActionList ActionLists} for performing various
processing tasks, and are backed by a flexible {@@link prefuse.activity.ActivityManager
ActivityManager} supporting event scheduling and animation. Furthermore, the API
for these {@@link prefuse.action.Action Actions} is very simple--just a single method--
making it easy to extend prefuse to suit your own needs or explore new ideas.</li>

<li>Specify how visual items will be drawn to the screen. For example, do you want to see abstract shapes,
text labels, or images? This is determined by constructing a
{@@link prefuse.render.RendererFactory RendererFactory} which maps visual items to
{@@link prefuse.render.Renderer Renderer} instances responsible for drawing visual items
to the screen.</li>

<li>Initialize one or more interactive {@@link prefuse.Display Displays} for viewing and
manipulating visual items. Displays provide optimized rendering of a viewing region,
and also support view transformations, such as panning and zooming.
Interactivity can be supplied using any number of pre-built controls
({@@link prefuse.controls}), or custom interactions can be written by
implemening the {@@link prefuse.controls.Control Control} interface. Also, to support
rich search and filtering through data items, various search engines
({@@link prefuse.data.search}) and dynamic query bindings ({@@link prefuse.data.query})
 are available.</li>
</ol>
</p>

<p>Prefuse also provides a host of other features, including a physics simulation engine
for layout and interaction ({@@link prefuse.util.force}), bounds management for optimized
rendering, data indexing and internal query optimization, and a small SQL-like expression
language  for creating queries to prefuse's data structures, manipulating data, and creating
derived data columns ({@@link prefuse.data.expression}). Not all of this, however, is required
for taking advantage of the toolkit, and often much of it is done for you in the background.
</p>

<p>The latest version of the <span class="prefuse">prefuse</span> code, this
documentation, a user's manual, and example applications are available
online at <a href="http://prefuse.org">http://prefuse.org</a></p>
</body>@


1.1
log
@file overview.html was initially added on branch beta.
@
text
@d1 70
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 57
<body>
<strong><font face="Verdana,Arial,Helvetica,Sans-Serif">prefuse</font></strong> is a user interface
toolkit for constructing highly-interactive visualizations of graph-structured
(i.e. node-link) data. <font face="Verdana,Arial,Helvetica,Sans-Serif">prefuse</font>
applications are built by stringing together composable modules (called
<code>{@@link edu.berkeley.guir.prefuse.action.Action Actions}</code>) into
<code>{@@link edu.berkeley.guir.prefuse.activity.ActionList ActionLists}</code>
that perform various tasks such as graph processing and animation.

<br/><br/>

Other features of the toolkit include:
<ul>
  <li>Libraries of composable actions, including layout algorithms (see
      the <code>{@@link edu.berkeley.guir.prefuse.action action}</code> and
      <code>{@@link edu.berkeley.guir.prefusex.layout layout}</code> packages).
  <li>Filtering and caching schemes to support large data sets through a
  	  centralized <code>{@@link edu.berkeley.guir.prefuse.ItemRegistry ItemRegistry}
  	  </code>.
  <li>A physics simulation engine supporting physically-based layout and interaction
      (see the <code>{@@link edu.berkeley.guir.prefusex.force force}</code> package).
  <li>Flexible activity scheduling and animation support (see the
      <code>{@@link edu.berkeley.guir.prefuse.activity activity}</code> package);
  <li>User interface event handling (see the
      <code>{@@link edu.berkeley.guir.prefuse.event event}</code> and
      <code>{@@link edu.berkeley.guir.prefusex.controls controls}</code> packages).
  <li>View transformations, as well as panning and zooming (see the
  	  <code>{@@link edu.berkeley.guir.prefuse.Display Display}</code> class and
  	  the <code>{@@link edu.berkeley.guir.prefusex.distortion distortion}</code>
  	  package).
</ul>

<br/>

The general pattern of building a prefuse visualization component is to first
determine the <code>{@@link edu.berkeley.guir.prefuse.graph.Graph Graph}</code>
data structure to visualize, and construct an 
<code>{@@link edu.berkeley.guir.prefuse.ItemRegistry ItemRegistry}</code>
to create and store visual representations of the graph data along with one or more
<code>{@@link edu.berkeley.guir.prefuse.Display Display}</code> instances to draw
these visual representations to the screen. One then assigns a 
<code>{@@link edu.berkeley.guir.prefuse.render.RendererFactory RendererFactory}</code>
to the <code>{@@link edu.berkeley.guir.prefuse.ItemRegistry ItemRegistry}</code>,
which determines which
<code>{@@link edu.berkeley.guir.prefuse.render.Renderer Renderer}</code>
instances are used to draw individual items. Then any number of 
<code>{@@link edu.berkeley.guir.prefuse.activity.ActionList ActionLists}</code>
can be created and scheduled to perform graph operations such as layout, color
assignment, and animation. Finally, interactive behaviors can be specified by
adding custom 
<code>{@@link edu.berkeley.guir.prefuse.event.ControlListener ControlListeners}</code>
or pre-built <code>{@@link edu.berkeley.guir.prefusex.controls Controls}</code>
to the <code>{@@link edu.berkeley.guir.prefuse.Display Display}</code> instances.

For working examples of this process, take a look at the provided
{@@link edu.berkeley.guir.prefuse.demos demonstration applications}.
</body>@


1.1.2.2
log
@Added javadoc overview and package text.
@
text
@d2 52
a53 9
<p>
<span class="prefuse">prefuse</span> is a user interface
toolkit for building highly-interactive information visualization applications.
<span class="prefuse">prefuse</span> provides facilities for data management,
spatial layout, color, size, and shape encodings, rendering, zooming,
animation, search, and interaction. Furthermore, it attempts to do so in a
modular way, allowing users to piece together desired functionality to
build custom visualization applications.
</p>
d55 2
a56 56
<p>
The general pattern of building prefuse applications is to
<ol>
<li>Load the data to be visualized into prefuse's data structures. prefuse provides built-in
support for {@@link prefuse.data.Table Table}, {@@link prefuse.data.Graph Graph}, and 
{@@link prefuse.data.Tree Tree} data structures, and can read from a number of different
file formats ({@@link prefuse.data.io}) as well as communicate with relational databases
({@@link prefuse.data.io.sql}).</li>

<li>Create a {@@link prefuse.Visualization Visualization} that maps the loaded data
to a <i>visual abstraction</i> -- a representation of the data amenable to visual processing,
rendering, and interaction. Each data element can have one or more corresponding
{@@link prefuse.visual.VisualItem VisualItems} that represent an interactive object on the
screen. Each VisualItem includes properties such as the x,y location of the object 
and color, shape, and size settings, while providing access to the underlying data.</li>

<li>Construct a series of data processing {@@link prefuse.action Actions} that operate 
on the visual abstraction. These
operations can involve just about anything, but common examples include setting the
location, color, size, and shape of visual items or animating these properties between
different configurations. These {@@link prefuse.action.Action Action} instances can
be grouped into {@@link prefuse.action.ActionList ActionLists} for performing various
processing tasks, and are backed by a flexible {@@link prefuse.activity.ActivityManager
ActivityManager} supporting event scheduling and animation. Furthermore, the API
for these {@@link prefuse.action.Action Actions} is very simple--just a single method--
making it easy to extend prefuse to suit your own needs or explore new ideas.</li>

<li>Specify how visual items will be drawn to the screen. For example, do you want to see abstract shapes,
text labels, or images? This is determined by constructing a
{@@link prefuse.render.RendererFactory RendererFactory} which maps visual items to
{@@link prefuse.render.Renderer Renderer} instances responsible for drawing visual items
to the screen.</li>

<li>Initialize one or more interactive {@@link prefuse.Display Displays} for viewing and
manipulating visual items. Displays provide optimized rendering of a viewing region,
and also support view transformations, such as panning and zooming.
Interactivity can be supplied using any number of pre-built controls
({@@link prefuse.controls}), or custom interactions can be written by
implemening the {@@link prefuse.controls.Control Control} interface. Also, to support
rich search and filtering through data items, various search engines
({@@link prefuse.data.search}) and dynamic query bindings ({@@link prefuse.data.query})
 are available.</li>
</ol>
</p>

<p>prefuse also provides a host of other features, including a physics simulation engine
for layout and interaction ({@@link prefuse.util.force}), bounds management for optimized
rendering, data indexing and internal query optimization, and a small SQL-like expression
language  for creating queries to prefuse's data structures, manipulating data, and creating
derived data columns ({@@link prefuse.data.expression}). Not all of this, however, is required
for taking advantage of the toolkit, and often much of it is done for you in the background.
</p>

<p>The latest version of the <span class="prefuse">prefuse</span> code, this
documentation, a user's manual, and example applications are available
online at <a href="http://prefuse.org">http://prefuse.org</a></p>
@


1.1.2.3
log
@Updated javadoc.
@
text
@d3 1
a3 3
<a href="http://prefuse.org">
<span style="font-family: Verdana, Arial, sans-serif; font-style: italic; font-weight: bold">
prefuse</span></a> is a user interface
d5 1
a5 1
Prefuse provides facilities for data management,
d57 1
a57 1
<p>Prefuse also provides a host of other features, including a physics simulation engine
@


