head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.20;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.16.20.07.42;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.01.23.23.07.20;	author jheer;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2006.02.01.19.22.44;	author jheer;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2006.02.02.19.01.52;	author jheer;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2006.02.07.00.42.53;	author jheer;	state dead;
branches;
next	;


desc
@@


1.1
log
@file DataColorFunction.java was initially added on branch beta.
@
text
@@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 143
package prefuse.action.assignment;

import java.awt.Color;
import java.awt.Paint;
import java.util.Map;

import prefuse.Constants;
import prefuse.data.Table;
import prefuse.data.column.ColumnMetadata;
import prefuse.data.tuple.TupleSet;
import prefuse.util.ColorLib;
import prefuse.util.ColorMap;
import prefuse.util.MathLib;
import prefuse.visual.VisualItem;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class DataColorFunction extends ColorFunction {

    private String m_dataField;
    private int    m_type;
    private int    m_scale = Constants.LINEAR_SCALE;
    
    private double   m_min;
    private double   m_max;
    private int      m_bins = Constants.CONTINUOUS;
    private Map      m_omap;
    private ColorMap m_cmap;
    private Color[]  m_palette;
    
    public DataColorFunction(String group, String dataField, 
                             int dataType, String colorField)
    {
        super(group, colorField);
        setDataType(dataType);
        setDataField(dataField);
    }
    
    public DataColorFunction(String group, String dataField, 
            int dataType, String colorField, Color[] palette)
    {
        super(group, colorField);
        setDataType(dataType);
        setDataField(dataField);
        m_palette = palette;
    }
    
    // ------------------------------------------------------------------------

    public String getDataField() {
        return m_dataField;
    }
    
    public void setDataField(String field) {
        m_dataField = field;
    }
    
    public int getDataType() {
        return m_type;
    }
    
    public void setDataType(int type) {
        if ( type < 0 || type >= Constants.DATATYPE_COUNT )
            throw new IllegalArgumentException(
                    "Unrecognized data type: "+type);
        m_type = type;
    }
    
    public int getScale() {
        return m_scale;
    }
    
    public void setScale(int scale) {
        if ( scale < 0 || scale >= Constants.SCALE_COUNT )
            throw new IllegalArgumentException(
                    "Unrecognized scale value: "+scale);
        m_scale = scale;
    }
    
    // ------------------------------------------------------------------------    
    
    public void run(double frac) {
        TupleSet ts = m_vis.getGroup(m_group);
        if ( !(ts instanceof Table) )
            return; // TODO: exception?
        Table t = (Table)ts;
        setup(t);
        
        super.run(frac);
    }
    
    protected void setup(Table t) {
        ColumnMetadata md = t.getMetadata(m_dataField);
        int size = 64;
        
        Paint[] palette = m_palette;
        
        switch ( m_type ) {
        case Constants.NOMINAL:
            m_omap = md.getOrdinalMap(); 
            m_min = 0;
            m_max = size = m_omap.size();
            palette = (m_palette!=null ? m_palette 
                                       : ColorMap.getCategoryPalette(size));
            break;
        case Constants.ORDINAL:
            m_omap = md.getOrdinalMap();
            m_min = 0;
            m_max = size = m_omap.size();
            palette = (m_palette!=null ? m_palette 
                                       : ColorMap.getGrayscalePalette(size));
            break;
        case Constants.NUMERICAL:
            m_min = t.getDouble(m_dataField, md.getMinimumRow());
            m_max = t.getDouble(m_dataField, md.getMaximumRow());
            m_omap = null;
            size = m_bins > 0 ? m_bins : size;
            palette = (m_palette!=null ? m_palette 
                                       : ColorMap.getHotPalette(size));
            break;
        }
        m_cmap = new ColorMap(palette, 0, 1);
    }
    
    protected int getColor(VisualItem item) {
        Paint c = null;
        switch ( m_type ) {
        case Constants.NOMINAL:
        case Constants.ORDINAL:
            Integer idx = (Integer)m_omap.get(item.get(m_dataField));
            c = m_cmap.getColor(idx.doubleValue());
            break;
        case Constants.NUMERICAL:
            double v = item.getDouble(m_dataField);
            double f = MathLib.interp(m_scale, v, m_min, m_max);
            c = m_cmap.getColor(f);
            break;
        }
        return ColorLib.color((Color)c);
    }
    
} // end of class DataColorFunction
@


1.1.2.2
log
@Table method refactoring. Added PredicateChain, included in ColorFunction, SizeFunction, and RendererFactory. Added ItemBoundsListener, included in GraphView demo. Updated ColorMap to use int representation, moved palette creators to ColorLib. Added minExtent to JRangeSlider. Fixed round-off rendering glitches int optimized rendering, added RenderingAccuracy test class. Updated PrefuseConfig to support logging output to file system. Added DelmitedTextTableWriter. Added CompositeTupleSet. Added directionality to edges, increased support to EdgeRenderer, including reversed directionality.
@
text
@d3 2
d29 2
a30 2
    private ColorMap m_cmap = new ColorMap(null,0,1);
    private int[]    m_palette;
d41 1
a41 1
            int dataType, String colorField, int[] palette)
d97 1
a97 1
        int[] palette = m_palette;
d101 6
d108 1
a108 1
            m_omap = md.getOrdinalMap(); 
d110 1
a110 1
            m_max = size = m_omap.size()-1;
d112 2
a113 4
                                       : createPalette(m_type, size));
            m_cmap.setColorPalette(palette);
            m_cmap.setMinValue(m_min); m_cmap.setMaxValue(m_max);
            return;
d115 2
a116 2
            m_min = t.getDouble(md.getMinimumRow(), m_dataField);
            m_max = t.getDouble(md.getMaximumRow(), m_dataField);
d120 2
a121 4
                                       : createPalette(m_type, size));
            m_cmap.setColorPalette(palette);
            m_cmap.setMinValue(0.0); m_cmap.setMaxValue(1.0);
            return;
d123 1
d126 3
a128 2
    protected static int[] createPalette(int type, int size) {
    	switch ( type ) {
a129 3
            return ColorLib.getCategoryPalette(size);
        case Constants.NUMERICAL:
        	return ColorLib.getHotPalette(size);
d131 3
a133 7
        default:
            return ColorLib.getGrayscalePalette(size);
        }
    }
    
    protected int getColor(VisualItem item) {
        switch ( m_type ) {
d137 2
a138 4
            return m_cmap.getColor(f);
        default:
            Integer idx = (Integer)m_omap.get(item.get(m_dataField));
            return m_cmap.getColor(idx.doubleValue());
d140 1
@


1.1.2.3
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@d133 1
a133 1
    public int getColor(VisualItem item) {
@


1.1.2.4
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d122 1
a122 1
        switch ( type ) {
d126 1
a126 1
            return ColorLib.getHotPalette(size);
@


1.1.2.5
log
@Lots of javadoc
@
text
@a29 10
    /**
     * Create a new DataColorFunction
     * @@param group the data group to process
     * @@param dataField the data field to base size assignments on
     * @@param dataType the data type to use for the data field. One of
     * {@@link prefuse.Constants#LINEAR_SCALE},
     * {@@link prefuse.Constants#LOG_SCALE}, or
     * {@@link prefuse.Constants#SQRT_SCALE}. 
     * @@param colorField the color field to assign
     */
a37 12
    /**
     * Create a new DataColorFunction
     * @@param group the data group to process
     * @@param dataField the data field to base size assignments on
     * @@param dataType the data type to use for the data field. One of
     * {@@link prefuse.Constants#LINEAR_SCALE},
     * {@@link prefuse.Constants#LOG_SCALE}, or
     * {@@link prefuse.Constants#SQRT_SCALE}. 
     * @@param colorField the color field to assign
     * @@param paletter the color palette to use. See
     * {@@link prefuse.util.ColorLib} for color palette generators.
     */
a48 4
    /**
     * Returns the data field used to encode size values.
     * @@return the data field that is mapped to size values
     */
a52 4
    /**
     * Set the data field used to encode size values.
     * @@param field the data field to map to size values
     */
a56 7
    /**
     * Return the data type used by this action. This value is one of
     * {@@link prefuse.Constants#NOMINAL}, {@@link prefuse.Constants#ORDINAL},
     * {@@link prefuse.Constants#NUMERICAL}, or
     * {@@link prefuse.Constants#UNKNOWN}.
     * @@return the data type used by this action
     */
a60 7
    /**
     * Set the data type used by this action.
     * @@param type the data type used by this action, one of
     * {@@link prefuse.Constants#NOMINAL}, {@@link prefuse.Constants#ORDINAL},
     * {@@link prefuse.Constants#NUMERICAL}, or
     * {@@link prefuse.Constants#UNKNOWN}.
     */
a67 7
    /**
     * Returns the scale type used for encoding size values from the data.
     * @@return the scale type. One of
     * {@@link prefuse.Constants.LINEAR_SCALE}, 
     * {@@link prefuse.Constants.SQRT_SCALE}, or
     * {@@link Constants.LOG_SCALE}.
     */
a71 8
    /**
     * Set the scale (linear, square root, or log) to use for encoding size
     * values from the data.
     * @@param scale the scale type to use. This value should be one of
     * {@@link prefuse.Constants.LINEAR_SCALE}, 
     * {@@link prefuse.Constants.SQRT_SCALE}, or
     * {@@link Constants.LOG_SCALE}.
     */
a80 3
    /**
     * @@see prefuse.action.Action#run(double)
     */
a90 3
    /**
     * Set up the state of this function for the provided Table.
     */
a120 3
    /**
     * Create a color palette of the requested type and size.
     */
a132 3
    /**
     * @@see prefuse.action.assignment.ColorFunction#getColor(prefuse.visual.VisualItem)
     */
@


1.1.2.6
log
@Javadoc'd.
@
text
@d57 1
a57 1
     * @@param palette the color palette to use. See
d115 3
a117 3
     * {@@link prefuse.Constants#LINEAR_SCALE}, 
     * {@@link prefuse.Constants#SQRT_SCALE}, or
     * {@@link prefuse.Constants#LOG_SCALE}.
d127 3
a129 3
     * {@@link prefuse.Constants#LINEAR_SCALE}, 
     * {@@link prefuse.Constants#SQRT_SCALE}, or
     * {@@link prefuse.Constants#LOG_SCALE}.
@


1.1.2.7
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@d15 1
a15 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
@


1.1.2.8
log
@Intermediate commit in run-up to release.
Upgraded Tuple, Node, and Edge to the data package.
Renamed "Function" classes to "Action" classes.
Added Shape to VisualItem Schema.
Added ShapeActions, moved Shape constants to Constants interface.
Added Background image handling to the Display class.
Added social network data file.
@
text
@@


