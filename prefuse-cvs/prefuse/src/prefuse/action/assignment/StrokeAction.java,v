head	1.2;
access;
symbols
	java_1_5:1.2.0.4
	Root_java_1_5:1.2
	beta:1.2.0.2
	beta-20080113:1.2
	beta-20071021:1.2
	beta-20060220:1.1;
locks; strict;
comment	@# @;


1.2
date	2006.02.27.04.02.14;	author jheer;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2006.02.18.23.41.14;	author jheer;	state Exp;
branches;
next	;

1.2.4.1
date	2008.01.23.23.55.37;	author jogiles;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Added new EncoderAction abstract base class.
Updated assignment package to subclass EncoderAction.
setup() and finish() template methods now allow delegate assignment actions to be properly initialized.
@
text
@package prefuse.action.assignment;

import java.awt.BasicStroke;
import java.awt.Stroke;
import java.util.logging.Logger;

import prefuse.action.EncoderAction;
import prefuse.data.expression.Predicate;
import prefuse.data.expression.parser.ExpressionParser;
import prefuse.util.StrokeLib;
import prefuse.visual.VisualItem;


/**
 * <p>Assignment Action that assigns <code>Stroke</code> values to VisualItems.
 * The Stroke instance determines how lines and shape outlines are drawn,
 * including the base size of the line, the line endings and line join types,
 * and whether the line is solid or dashed. By default, a StrokeAction simply
 * sets each VisualItem to use a default 1-pixel wide solid line. Clients can
 * change this default value to achieve uniform Stroke assignment, or can add
 * any number of additional rules for Stroke assignment.
 * Rules are specified by a Predicate instance which, if returning true, will
 * trigger that rule, causing either the provided Stroke value or the result of
 * a delegate StrokeAction to be applied. Rules are evaluated in the order in
 * which they are added to the StrokeAction, so earlier rules will have
 * precedence over rules added later.
 * </p>
 * 
 * <p>In addition, subclasses can simply override
 * {@@link #getStroke(VisualItem)} to achieve custom Stroke assignment. In some
 * cases, this may be the simplest or most flexible approach.</p>
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class StrokeAction extends EncoderAction {

    protected BasicStroke defaultStroke = StrokeLib.getStroke(1.0f);
    
    /**
     * Create a new StrokeAction that processes all data groups.
     */
    public StrokeAction() {
        super();
    }
    
    /**
     * Create a new StrokeAction that processes the specified group.
     * @@param group the data group to process
     */
    public StrokeAction(String group) {
        super(group);
    }
    
    /**
     * Create a new StrokeAction that processes the specified group.
     * @@param group the data group to process
     * @@param defaultStroke the default Stroke to assign
     */
    public StrokeAction(String group, BasicStroke defaultStroke) {
        super(group);
        this.defaultStroke = defaultStroke;
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * Set the default BasicStroke to be assigned to items. Items will be
     * assigned the default Stroke if they do not match any registered rules.
     * @@param f the default BasicStroke to use
     */
    public void setDefaultStroke(BasicStroke f) {
        defaultStroke = f;
    }
    
    /**
     * Get the default BasicStroke assigned to items.
     * @@return the default BasicStroke
     */
    public BasicStroke getDefaultStroke() {
        return defaultStroke;
    }
    
    /**
     * Add a mapping rule to this StrokeAction. VisualItems that match
     * the provided predicate will be assigned the given BasicStroke value
     * (assuming they do not match an earlier rule).
     * @@param p the rule Predicate 
     * @@param stroke the BasicStroke
     */
    public void add(Predicate p, BasicStroke stroke) {
        super.add(p, stroke);
    }

    /**
     * Add a mapping rule to this StrokeAction. VisualItems that match
     * the provided expression will be assigned the given BasicStroke value
     * (assuming they do not match an earlier rule). The provided expression
     * String will be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param stroke the BasicStroke
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, BasicStroke stroke) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        add(p, stroke);       
    }
    
    /**
     * Add a mapping rule to this StrokeAction. VisualItems that match
     * the provided predicate will be assigned the BasicStroke value returned
     * by the given StrokeAction's getStroke() method.
     * @@param p the rule Predicate 
     * @@param f the delegate StrokeAction to use
     */
    public void add(Predicate p, StrokeAction f) {
        super.add(p, f);
    }

    /**
     * Add a mapping rule to this StrokeAction. VisualItems that match
     * the provided expression will be assigned the given BasicStroke value
     * (assuming they do not match an earlier rule). The provided expression
     * String will be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param f the delegate StrokeAction to use
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, StrokeAction f) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        super.add(p, f);
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see prefuse.action.ItemAction#process(prefuse.visual.VisualItem, double)
     */
    public void process(VisualItem item, double frac) {
        item.setStroke(getStroke(item));
    }
    
    /**
     * Returns the stroke to use for a given VisualItem. Subclasses should
     * override this method to perform customized Stroke assignment.
     * @@param item the VisualItem for which to get the Stroke
     * @@return the BasicStroke for the given item
     */
    public BasicStroke getStroke(VisualItem item) {
        Object o = lookup(item);
        if ( o != null ) {
            if ( o instanceof StrokeAction ) {
                return ((StrokeAction)o).getStroke(item);
            } else if ( o instanceof Stroke ) {
                return (BasicStroke)o;
            } else {
                Logger.getLogger(this.getClass().getName())
                    .warning("Unrecognized Object from predicate chain.");
            }
        }
        return defaultStroke;   
    }

} // end of class StrokeAction
@


1.2.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d28 1
a28 1
 *
d32 1
a32 1
 *
d38 1
a38 1

d45 1
a45 1

d53 1
a53 1

d63 1
a63 1

d65 1
a65 1

d74 1
a74 1

d82 1
a82 1

d87 1
a87 1
     * @@param p the rule Predicate
d99 1
a99 1
     * @@param expr the expression String, should parse to a Predicate.
d106 1
a106 1
        add(p, stroke);
d108 1
a108 1

d113 1
a113 1
     * @@param p the rule Predicate
d125 1
a125 1
     * @@param expr the expression String, should parse to a Predicate.
d134 1
a134 1

d136 1
a136 1

d140 1
a140 2
    @@Override
	public void process(VisualItem<?> item, double frac) {
d143 1
a143 1

d150 1
a150 1
    public BasicStroke getStroke(VisualItem<?> item) {
d162 1
a162 1
        return defaultStroke;
@


1.1
log
@Added StrokeAction class
@
text
@d7 1
a7 1
import prefuse.action.ItemAction;
a9 1
import prefuse.util.PredicateChain;
d35 1
a35 1
public class StrokeAction extends ItemAction {
a36 1
    protected PredicateChain m_chain = null;
d91 1
a91 2
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, stroke);
d117 1
a117 2
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, f);
d132 1
a132 1
        add(p, f);
d151 9
a159 11
        if ( m_chain != null ) {
            Object o = m_chain.get(item);
            if ( o != null ) {
                if ( o instanceof StrokeAction ) {
                    return ((StrokeAction)o).getStroke(item);
                } else if ( o instanceof Stroke ) {
                    return (BasicStroke)o;
                } else {
                    Logger.getLogger(this.getClass().getName())
                        .warning("Unrecognized Object from predicate chain.");
                }
@

