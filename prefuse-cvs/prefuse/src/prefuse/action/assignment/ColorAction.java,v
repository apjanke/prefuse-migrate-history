head	2.4;
access;
symbols
	java_1_5:2.4.0.4
	Root_java_1_5:2.4
	beta:2.4.0.2
	beta-20080113:2.4
	beta-20071021:2.4
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.4
date	2006.07.15.16.31.33;	author jheer;	state Exp;
branches
	2.4.4.1;
next	2.3;

2.3
date	2006.04.10.18.53.20;	author jheer;	state Exp;
branches;
next	2.2;

2.2
date	2006.03.01.08.19.53;	author jheer;	state Exp;
branches;
next	2.1;

2.1
date	2006.02.27.04.02.14;	author jheer;	state Exp;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.42;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.07.00.42.53;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.02.07.00.42.53;	author jheer;	state Exp;
branches;
next	;

2.4.4.1
date	2008.01.23.23.55.37;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.4
log
@Added new convenience constructors for including a filter predicate.
Thanks to Vadim Gritsenko for the suggestion.
@
text
@/**
 * Copyright (c) 2004-2006 Regents of the University of California.
 * See "license-prefuse.txt" for licensing terms.
 */
package prefuse.action.assignment;

import java.util.logging.Logger;

import prefuse.action.EncoderAction;
import prefuse.data.expression.Predicate;
import prefuse.data.expression.parser.ExpressionParser;
import prefuse.util.ColorLib;
import prefuse.util.PrefuseLib;
import prefuse.visual.VisualItem;


/**
 * <p>Assignment Action that assigns color values to VisualItems for a
 * given color field (e.g., the stroke, text, or fill color).</p>
 * 
 * <p>By default, a ColorAction simply assigns a single default color value
 * to all items (the initial default color is black). Clients can change this 
 * default value to achieve uniform color assignment, or can add any number 
 * of additional rules for color assignment. Rules are specified by a Predicate
 * instance which, if returning true, will trigger that rule, causing either the
 * provided color value or the result of a delegate ColorAction to be
 * applied. Rules are evaluated in the order in which they are added to the
 * ColorAction, so earlier rules will have precedence over rules added later.
 * </p>
 * 
 * <p>In addition, subclasses can simply override {@@link #getColor(VisualItem)}
 * to achieve custom color assignment. In some cases, this may be the simplest
 * or most flexible approach.</p>
 * 
 * <p>To automatically assign color values based on varying values of a
 * particular data field, consider using the DataColorAction.</p>
 * 
 * <p>Color values are represented using integers, into which 8-bit values for
 * the red, green, blue, and alpha channels are stored. For more information
 * and utilities for creating and manipulating color values, see the
 * {@@link prefuse.util.ColorLib} class.</p>
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 * @@see prefuse.util.ColorLib
 * @@see DataColorAction
 */
public class ColorAction extends EncoderAction {
    
    protected String m_colorField;
    protected String m_startField;
    protected String m_endField;
    
    protected int m_cidx, m_sidx, m_eidx;
    
    protected int m_defaultColor = ColorLib.gray(0); // initial default = black
    
    /**
     * Constructor, sets the data group and color field for color assignment.
     * Uses an initial default color value of black [RGB value (0,0,0)].
     * @@param group the data group processed by this Action
     * @@param field the color field assigned by this Action
     */
    public ColorAction(String group, String field) {
        super(group);
        setField(field);
    }

    /**
     * Constructor, sets the data group, color field, and default color value
     * for color assignment.
     * @@param group the data group processed by this Action
     * @@param field the color field assigned by this Action
     * @@param color the default color value assigned by this ColorAction
     */
    public ColorAction(String group, String field, int color) {
        this(group, field);
        m_defaultColor = color;
    }
    
    /**
     * Constructor, sets the data group, filter predicate and color field
     * for color assignment.
     * Uses an initial default color value of black [RGB value (0,0,0)].
     * @@param group the data group processed by this Action
     * @@param filter the filter predicate
     *  {@@link prefuse.data.expression.Predicate}
     * @@param field the color field assigned by this Action
     */
    public ColorAction(String group, Predicate filter, String field) {
    	super(group, filter);
    	setField(field);
    }
     
    /**
     * Constructor, sets the data group, filter predicate,
     * color field, and default color value for color assignment.
     * @@param group the data group processed by this Action
     * @@param filter the filter predicate 
     * 	{@@link prefuse.data.expression.Predicate}
     * @@param field the color field assigned by this Action
     * @@param color the default color value assigned by this ColorAction
     */
    public ColorAction(String group, Predicate filter, String field, int color)
    {
    	this(group, filter, field);
    	setDefaultColor(color);
    }    
    
    /**
     * Set the color field name that this ColorAction should set. The
     * ColorAction will automatically try to update the start and end
     * values for this field if it is an interpolated field.
     * @@param field
     */
    public void setField(String field) {
        m_colorField = field;
        m_startField = PrefuseLib.getStartField(field);
        m_endField = PrefuseLib.getEndField(field);
    }
    
    /**
     * Returns the default color for this ColorAction
     * @@return the default color value
     */
    public int getDefaultColor() {
        return m_defaultColor;
    }
    
    /**
     * Sets the default color for this ColorAction. Items will be assigned
     * the default color if they do not match any registered rules.
     * @@param color the new default color
     */
    public void setDefaultColor(int color) {
        m_defaultColor = color;
    }
    
    /**
     * Add a color mapping rule to this ColorAction. VisualItems that match
     * the provided predicate will be assigned the given color value (assuming
     * they do not match an earlier rule).
     * @@param p the rule Predicate 
     * @@param color the color value
     */
    public void add(Predicate p, int color) {
        super.add(p, new Integer(color));
    }

    /**
     * Add a color mapping rule to this ColorAction. VisualItems that match
     * the provided expression will be assigned the given color value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param color the color value
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, int color) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        add(p, color);      
    }
    
    /**
     * Add a color mapping rule to this ColorAction. VisualItems that match
     * the provided predicate will be assigned the color value returned by
     * the given ColorAction's getColor() method.
     * @@param p the rule Predicate 
     * @@param f the delegate ColorAction to use
     */
    public void add(Predicate p, ColorAction f) {
        super.add(p, f);
    }

    /**
     * Add a color mapping rule to this ColorAction. VisualItems that match
     * the provided expression will be assigned the given color value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param f the delegate ColorAction to use
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, ColorAction f) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        super.add(p, f);
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see prefuse.action.ItemAction#process(prefuse.visual.VisualItem, double)
     */
    public void process(VisualItem item, double frac) {
        int c = getColor(item);
        int o = item.getInt(m_colorField);
        item.setInt(m_startField, o);
        item.setInt(m_endField, c);
        item.setInt(m_colorField, c);
    }

    /**
     * Returns a color value for the given item. Colors are represented as
     * integers, interpreted as holding values for the red, green, blue, and 
     * alpha channels. This is the same color representation returned by
     * the Color.getRGB() method.
     * @@param item the item for which to get the color value
     * @@return the color value for the item
     */
    public int getColor(VisualItem item) {
        Object o = lookup(item);
        if ( o != null ) {
            if ( o instanceof ColorAction ) {
                return ((ColorAction)o).getColor(item);
            } else if ( o instanceof Integer ) {
                return ((Integer)o).intValue();
            } else {
                Logger.getLogger(this.getClass().getName())
                    .warning("Unrecognized Object from predicate chain.");
            }
        }
        return m_defaultColor;   
    }
    
} // end of class ColorAction
@


2.4.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d20 1
a20 1
 *
d22 2
a23 2
 * to all items (the initial default color is black). Clients can change this
 * default value to achieve uniform color assignment, or can add any number
d30 1
a30 1
 *
d34 1
a34 1
 *
d37 1
a37 1
 *
d42 1
a42 1
 *
d48 1
a48 1

d52 1
a52 1

d54 1
a54 1

d56 1
a56 1

d79 1
a79 1

d93 1
a93 1

d98 1
a98 1
     * @@param filter the filter predicate
d107 2
a108 2
    }

d120 1
a120 1

d128 1
a128 1

d137 1
a137 1

d142 1
a142 1
     * @@param p the rule Predicate
d154 1
a154 1
     * @@param expr the expression String, should parse to a Predicate.
d161 1
a161 1
        add(p, color);
d163 1
a163 1

d168 1
a168 1
     * @@param p the rule Predicate
d180 1
a180 1
     * @@param expr the expression String, should parse to a Predicate.
d189 1
a189 1

d191 1
a191 1

d195 1
a195 2
    @@Override
	public void process(VisualItem<?> item, double frac) {
d205 1
a205 1
     * integers, interpreted as holding values for the red, green, blue, and
d211 1
a211 1
    public int getColor(VisualItem<?> item) {
d223 1
a223 1
        return m_defaultColor;
d225 1
a225 1

@


2.3
log
@Updated constructors to NOT call setDefaultXXX, which is now overridden in subclasses
@
text
@d81 29
@


2.2
log
@Added new DataParser format(Object) functionality
Added DataParser instance to AbstractColumn
Added CSVTableWriter
Deleted Columns class, replaced with DataLib
Updated assignment Actions to work over arbitrary TupleSets (not just Tables)
@
text
@d77 1
a77 1
        setDefaultColor(color);
@


2.1
log
@Added new EncoderAction abstract base class.
Updated assignment package to subclass EncoderAction.
setup() and finish() template methods now allow delegate assignment actions to be properly initialized.
@
text
@d183 1
a183 1
        Object o =lookup(item);
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d9 1
a9 1
import prefuse.action.ItemAction;
a12 1
import prefuse.util.PredicateChain;
d47 1
a47 1
public class ColorAction extends ItemAction {
a48 1
    protected PredicateChain m_chain = null;
d117 1
a117 2
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, new Integer(color));
d143 1
a143 2
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, f);
d158 1
a158 1
        add(p, f);
d183 9
a191 11
        if ( m_chain != null ) {
            Object o = m_chain.get(item);
            if ( o != null ) {
                if ( o instanceof ColorAction ) {
                    return ((ColorAction)o).getColor(item);
                } else if ( o instanceof Integer ) {
                    return ((Integer)o).intValue();
                } else {
                    Logger.getLogger(this.getClass().getName())
                        .warning("Unrecognized Object from predicate chain.");
                }
@


1.1
log
@file ColorAction.java was initially added on branch beta.
@
text
@d1 203
@


1.1.2.1
log
@Intermediate commit in run-up to release.
Upgraded Tuple, Node, and Edge to the data package.
Renamed "Function" classes to "Action" classes.
Added Shape to VisualItem Schema.
Added ShapeActions, moved Shape constants to Constants interface.
Added Background image handling to the Display class.
Added social network data file.
@
text
@a0 203
/**
 * Copyright (c) 2004-2006 Regents of the University of California.
 * See "license-prefuse.txt" for licensing terms.
 */
package prefuse.action.assignment;

import java.util.logging.Logger;

import prefuse.action.ItemAction;
import prefuse.data.expression.Predicate;
import prefuse.data.expression.parser.ExpressionParser;
import prefuse.util.ColorLib;
import prefuse.util.PredicateChain;
import prefuse.util.PrefuseLib;
import prefuse.visual.VisualItem;


/**
 * <p>Assignment Action that assigns color values to VisualItems for a
 * given color field (e.g., the stroke, text, or fill color).</p>
 * 
 * <p>By default, a ColorAction simply assigns a single default color value
 * to all items (the initial default color is black). Clients can change this 
 * default value to achieve uniform color assignment, or can add any number 
 * of additional rules for color assignment. Rules are specified by a Predicate
 * instance which, if returning true, will trigger that rule, causing either the
 * provided color value or the result of a delegate ColorAction to be
 * applied. Rules are evaluated in the order in which they are added to the
 * ColorAction, so earlier rules will have precedence over rules added later.
 * </p>
 * 
 * <p>In addition, subclasses can simply override {@@link #getColor(VisualItem)}
 * to achieve custom color assignment. In some cases, this may be the simplest
 * or most flexible approach.</p>
 * 
 * <p>To automatically assign color values based on varying values of a
 * particular data field, consider using the DataColorAction.</p>
 * 
 * <p>Color values are represented using integers, into which 8-bit values for
 * the red, green, blue, and alpha channels are stored. For more information
 * and utilities for creating and manipulating color values, see the
 * {@@link prefuse.util.ColorLib} class.</p>
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 * @@see prefuse.util.ColorLib
 * @@see DataColorAction
 */
public class ColorAction extends ItemAction {
    
    protected PredicateChain m_chain = null;
    protected String m_colorField;
    protected String m_startField;
    protected String m_endField;
    
    protected int m_cidx, m_sidx, m_eidx;
    
    protected int m_defaultColor = ColorLib.gray(0); // initial default = black
    
    /**
     * Constructor, sets the data group and color field for color assignment.
     * Uses an initial default color value of black [RGB value (0,0,0)].
     * @@param group the data group processed by this Action
     * @@param field the color field assigned by this Action
     */
    public ColorAction(String group, String field) {
        super(group);
        setField(field);
    }

    /**
     * Constructor, sets the data group, color field, and default color value
     * for color assignment.
     * @@param group the data group processed by this Action
     * @@param field the color field assigned by this Action
     * @@param color the default color value assigned by this ColorAction
     */
    public ColorAction(String group, String field, int color) {
        this(group, field);
        setDefaultColor(color);
    }
    
    /**
     * Set the color field name that this ColorAction should set. The
     * ColorAction will automatically try to update the start and end
     * values for this field if it is an interpolated field.
     * @@param field
     */
    public void setField(String field) {
        m_colorField = field;
        m_startField = PrefuseLib.getStartField(field);
        m_endField = PrefuseLib.getEndField(field);
    }
    
    /**
     * Returns the default color for this ColorAction
     * @@return the default color value
     */
    public int getDefaultColor() {
        return m_defaultColor;
    }
    
    /**
     * Sets the default color for this ColorAction. Items will be assigned
     * the default color if they do not match any registered rules.
     * @@param color the new default color
     */
    public void setDefaultColor(int color) {
        m_defaultColor = color;
    }
    
    /**
     * Add a color mapping rule to this ColorAction. VisualItems that match
     * the provided predicate will be assigned the given color value (assuming
     * they do not match an earlier rule).
     * @@param p the rule Predicate 
     * @@param color the color value
     */
    public void add(Predicate p, int color) {
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, new Integer(color));
    }

    /**
     * Add a color mapping rule to this ColorAction. VisualItems that match
     * the provided expression will be assigned the given color value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param color the color value
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, int color) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        add(p, color);      
    }
    
    /**
     * Add a color mapping rule to this ColorAction. VisualItems that match
     * the provided predicate will be assigned the color value returned by
     * the given ColorAction's getColor() method.
     * @@param p the rule Predicate 
     * @@param f the delegate ColorAction to use
     */
    public void add(Predicate p, ColorAction f) {
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, f);
    }

    /**
     * Add a color mapping rule to this ColorAction. VisualItems that match
     * the provided expression will be assigned the given color value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param f the delegate ColorAction to use
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, ColorAction f) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        add(p, f);
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see prefuse.action.ItemAction#process(prefuse.visual.VisualItem, double)
     */
    public void process(VisualItem item, double frac) {
        int c = getColor(item);
        int o = item.getInt(m_colorField);
        item.setInt(m_startField, o);
        item.setInt(m_endField, c);
        item.setInt(m_colorField, c);
    }

    /**
     * Returns a color value for the given item. Colors are represented as
     * integers, interpreted as holding values for the red, green, blue, and 
     * alpha channels. This is the same color representation returned by
     * the Color.getRGB() method.
     * @@param item the item for which to get the color value
     * @@return the color value for the item
     */
    public int getColor(VisualItem item) {
        if ( m_chain != null ) {
            Object o = m_chain.get(item);
            if ( o != null ) {
                if ( o instanceof ColorAction ) {
                    return ((ColorAction)o).getColor(item);
                } else if ( o instanceof Integer ) {
                    return ((Integer)o).intValue();
                } else {
                    Logger.getLogger(this.getClass().getName())
                        .warning("Unrecognized Object from predicate chain.");
                }
            }
        }
        return m_defaultColor;   
    }
    
} // end of class ColorAction
@

