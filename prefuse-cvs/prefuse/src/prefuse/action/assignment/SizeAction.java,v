head	2.2;
access;
symbols
	java_1_5:2.2.0.4
	Root_java_1_5:2.2
	beta:2.2.0.2
	beta-20080113:2.2
	beta-20071021:2.2
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.2
date	2006.04.10.18.53.20;	author jheer;	state Exp;
branches
	2.2.4.1;
next	2.1;

2.1
date	2006.02.27.04.02.14;	author jheer;	state Exp;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.42;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.07.00.42.53;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.02.07.00.42.53;	author jheer;	state Exp;
branches;
next	;

2.2.4.1
date	2008.01.23.23.55.37;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.2
log
@Updated constructors to NOT call setDefaultXXX, which is now overridden in subclasses
@
text
@package prefuse.action.assignment;

import java.util.logging.Logger;

import prefuse.action.EncoderAction;
import prefuse.data.expression.Predicate;
import prefuse.data.expression.parser.ExpressionParser;
import prefuse.visual.VisualItem;


/**
 * <p>Assignment Action that assigns size values to VisualItems.</p>
 * 
 * <p>
 * By default, a SizeAction simply assigns a single default size value to
 * all items (the initial default size is 1.0). Clients can change this 
 * default value to achieve uniform size assignment, or can add any number 
 * of additional rules for size assignment. Rules are specified by a Predicate
 * instance which, if returning true, will trigger that rule, causing either the
 * provided size value or the result of a delegate SizeAction to be
 * applied. Rules are evaluated in the order in which they are added to the
 * SizeAction, so earlier rules will have precedence over rules added later.
 * </p>
 * 
 * <p>In addition, subclasses can simply override {@@link #getSize(VisualItem)}
 * to achieve custom size assignment. In some cases, this may be the simplest
 * or most flexible approach.</p>
 * 
 * <p>To automatically assign size values based on varying values of a
 * particular data field, consider using the {@@link DataSizeAction}.</p>
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class SizeAction extends EncoderAction {

    protected double m_defaultSize = 1.0;
    
    /**
     * Constructor. A default size value of 1.0 will be used.
     */
    public SizeAction() {
        super();
    }
    
    /**
     * Constructor. A default size value of 1.0 will be used.
     * @@param group the data group processed by this Action.
     */
    public SizeAction(String group) {
        super(group);
    }

    /**
     * Constructor which specified a default size value.
     * @@param group the data group processed by this Action.
     * @@param size the default size to use
     */
    public SizeAction(String group, double size) {
        super(group);
        m_defaultSize = size;
    }
    
    /**
     * Returns the default size value assigned to items.
     * @@return the default size value
     */
    public double getDefaultSize() {
        return m_defaultSize;
    }
    
    /**
     * Sets the default size value assigned to items. Items will be assigned
     * the default size if they do not match any registered rules.
     * @@param defaultSize the new default size value
     */
    public void setDefaultSize(double defaultSize) {
        m_defaultSize = defaultSize;
    }
    
    /**
     * Add a size mapping rule to this SizeAction. VisualItems that match
     * the provided predicate will be assigned the given size value (assuming
     * they do not match an earlier rule).
     * @@param p the rule Predicate 
     * @@param size the size value
     */
    public void add(Predicate p, double size) {
        super.add(p, new Double(size));
    }

    /**
     * Add a size mapping rule to this SizeAction. VisualItems that match
     * the provided expression will be assigned the given size value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param size the size value
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, double size) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        add(p, size);       
    }
    
    /**
     * Add a size mapping rule to this SizeAction. VisualItems that match
     * the provided predicate will be assigned the size value returned by
     * the given SizeAction's getSize() method.
     * @@param p the rule Predicate 
     * @@param f the delegate SizeAction to use
     */
    public void add(Predicate p, SizeAction f) {
        super.add(p, f);
    }

    /**
     * Add a size mapping rule to this SizeAction. VisualItems that match
     * the provided expression will be assigned the given size value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param f the delegate SizeAction to use
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, SizeAction f) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        super.add(p, f);
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see prefuse.action.ItemAction#process(prefuse.visual.VisualItem, double)
     */
    public void process(VisualItem item, double frac) {
        double size = getSize(item);
        double old = item.getSize();
        item.setStartSize(old);
        item.setEndSize(size);
        item.setSize(size);
    }
    
    /**
     * Returns a size value for the given item.
     * @@param item the item for which to get the size value
     * @@return the size value for the item
     */
    public double getSize(VisualItem item) {
        Object o = lookup(item);
        if ( o != null ) {
            if ( o instanceof SizeAction ) {
                return ((SizeAction)o).getSize(item);
            } else if ( o instanceof Number ) {
                return ((Number)o).doubleValue();
            } else {
                Logger.getLogger(this.getClass().getName())
                    .warning("Unrecognized Object from predicate chain.");
            }
        }
        return m_defaultSize;   
    }

} // end of class SizeAction
@


2.2.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d13 1
a13 1
 *
d16 2
a17 2
 * all items (the initial default size is 1.0). Clients can change this
 * default value to achieve uniform size assignment, or can add any number
d24 1
a24 1
 *
d28 1
a28 1
 *
d31 1
a31 1
 *
d37 1
a37 1

d44 1
a44 1

d62 1
a62 1

d70 1
a70 1

d79 1
a79 1

d84 1
a84 1
     * @@param p the rule Predicate
d96 1
a96 1
     * @@param expr the expression String, should parse to a Predicate.
d103 1
a103 1
        add(p, size);
d105 1
a105 1

d110 1
a110 1
     * @@param p the rule Predicate
d122 1
a122 1
     * @@param expr the expression String, should parse to a Predicate.
d131 1
a131 1

d133 1
a133 1

d137 1
a137 2
    @@Override
	public void process(VisualItem<?> item, double frac) {
d144 1
a144 1

d150 1
a150 1
    public double getSize(VisualItem<?> item) {
d162 1
a162 1
        return m_defaultSize;
@


2.1
log
@Added new EncoderAction abstract base class.
Updated assignment package to subclass EncoderAction.
setup() and finish() template methods now allow delegate assignment actions to be properly initialized.
@
text
@d60 1
a60 1
        setDefaultSize(size);
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d5 1
a5 1
import prefuse.action.ItemAction;
a7 1
import prefuse.util.PredicateChain;
d34 1
a34 1
public class SizeAction extends ItemAction {
a35 1
    protected PredicateChain m_chain = null;
d88 1
a88 2
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, new Double(size));
d114 1
a114 2
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, f);
d129 1
a129 1
        add(p, f);
d151 9
a159 11
        if ( m_chain != null ) {
            Object o = m_chain.get(item);
            if ( o != null ) {
                if ( o instanceof SizeAction ) {
                    return ((SizeAction)o).getSize(item);
                } else if ( o instanceof Number ) {
                    return ((Number)o).doubleValue();
                } else {
                    Logger.getLogger(this.getClass().getName())
                        .warning("Unrecognized Object from predicate chain.");
                }
@


1.1
log
@file SizeAction.java was initially added on branch beta.
@
text
@d1 171
@


1.1.2.1
log
@Intermediate commit in run-up to release.
Upgraded Tuple, Node, and Edge to the data package.
Renamed "Function" classes to "Action" classes.
Added Shape to VisualItem Schema.
Added ShapeActions, moved Shape constants to Constants interface.
Added Background image handling to the Display class.
Added social network data file.
@
text
@a0 171
package prefuse.action.assignment;

import java.util.logging.Logger;

import prefuse.action.ItemAction;
import prefuse.data.expression.Predicate;
import prefuse.data.expression.parser.ExpressionParser;
import prefuse.util.PredicateChain;
import prefuse.visual.VisualItem;


/**
 * <p>Assignment Action that assigns size values to VisualItems.</p>
 * 
 * <p>
 * By default, a SizeAction simply assigns a single default size value to
 * all items (the initial default size is 1.0). Clients can change this 
 * default value to achieve uniform size assignment, or can add any number 
 * of additional rules for size assignment. Rules are specified by a Predicate
 * instance which, if returning true, will trigger that rule, causing either the
 * provided size value or the result of a delegate SizeAction to be
 * applied. Rules are evaluated in the order in which they are added to the
 * SizeAction, so earlier rules will have precedence over rules added later.
 * </p>
 * 
 * <p>In addition, subclasses can simply override {@@link #getSize(VisualItem)}
 * to achieve custom size assignment. In some cases, this may be the simplest
 * or most flexible approach.</p>
 * 
 * <p>To automatically assign size values based on varying values of a
 * particular data field, consider using the {@@link DataSizeAction}.</p>
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class SizeAction extends ItemAction {

    protected PredicateChain m_chain = null;
    protected double m_defaultSize = 1.0;
    
    /**
     * Constructor. A default size value of 1.0 will be used.
     */
    public SizeAction() {
        super();
    }
    
    /**
     * Constructor. A default size value of 1.0 will be used.
     * @@param group the data group processed by this Action.
     */
    public SizeAction(String group) {
        super(group);
    }

    /**
     * Constructor which specified a default size value.
     * @@param group the data group processed by this Action.
     * @@param size the default size to use
     */
    public SizeAction(String group, double size) {
        super(group);
        setDefaultSize(size);
    }
    
    /**
     * Returns the default size value assigned to items.
     * @@return the default size value
     */
    public double getDefaultSize() {
        return m_defaultSize;
    }
    
    /**
     * Sets the default size value assigned to items. Items will be assigned
     * the default size if they do not match any registered rules.
     * @@param defaultSize the new default size value
     */
    public void setDefaultSize(double defaultSize) {
        m_defaultSize = defaultSize;
    }
    
    /**
     * Add a size mapping rule to this SizeAction. VisualItems that match
     * the provided predicate will be assigned the given size value (assuming
     * they do not match an earlier rule).
     * @@param p the rule Predicate 
     * @@param size the size value
     */
    public void add(Predicate p, double size) {
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, new Double(size));
    }

    /**
     * Add a size mapping rule to this SizeAction. VisualItems that match
     * the provided expression will be assigned the given size value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param size the size value
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, double size) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        add(p, size);       
    }
    
    /**
     * Add a size mapping rule to this SizeAction. VisualItems that match
     * the provided predicate will be assigned the size value returned by
     * the given SizeAction's getSize() method.
     * @@param p the rule Predicate 
     * @@param f the delegate SizeAction to use
     */
    public void add(Predicate p, SizeAction f) {
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, f);
    }

    /**
     * Add a size mapping rule to this SizeAction. VisualItems that match
     * the provided expression will be assigned the given size value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param f the delegate SizeAction to use
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, SizeAction f) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        add(p, f);
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see prefuse.action.ItemAction#process(prefuse.visual.VisualItem, double)
     */
    public void process(VisualItem item, double frac) {
        double size = getSize(item);
        double old = item.getSize();
        item.setStartSize(old);
        item.setEndSize(size);
        item.setSize(size);
    }
    
    /**
     * Returns a size value for the given item.
     * @@param item the item for which to get the size value
     * @@return the size value for the item
     */
    public double getSize(VisualItem item) {
        if ( m_chain != null ) {
            Object o = m_chain.get(item);
            if ( o != null ) {
                if ( o instanceof SizeAction ) {
                    return ((SizeAction)o).getSize(item);
                } else if ( o instanceof Number ) {
                    return ((Number)o).doubleValue();
                } else {
                    Logger.getLogger(this.getClass().getName())
                        .warning("Unrecognized Object from predicate chain.");
                }
            }
        }
        return m_defaultSize;   
    }

} // end of class SizeAction
@

