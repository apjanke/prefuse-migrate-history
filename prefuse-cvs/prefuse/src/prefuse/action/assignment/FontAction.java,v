head	2.2;
access;
symbols
	java_1_5:2.2.0.4
	Root_java_1_5:2.2
	beta:2.2.0.2
	beta-20080113:2.2
	beta-20071021:2.2
	beta-20060220:2.1
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.2
date	2006.02.27.04.02.14;	author jheer;	state Exp;
branches
	2.2.4.1;
next	2.1;

2.1
date	2006.02.18.23.42.24;	author jheer;	state Exp;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.42;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.07.00.42.53;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.02.07.00.42.53;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.02.09.05.12.45;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.02.09.10.33.59;	author jheer;	state Exp;
branches;
next	;

2.2.4.1
date	2008.01.23.23.55.37;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.2
log
@Added new EncoderAction abstract base class.
Updated assignment package to subclass EncoderAction.
setup() and finish() template methods now allow delegate assignment actions to be properly initialized.
@
text
@package prefuse.action.assignment;

import java.awt.Font;
import java.util.logging.Logger;

import prefuse.action.EncoderAction;
import prefuse.data.expression.Predicate;
import prefuse.data.expression.parser.ExpressionParser;
import prefuse.util.FontLib;
import prefuse.visual.VisualItem;


/**
 * <p>Assignment Action that assigns font values to VisualItems.
 * By default, a FontAction simply sets each VisualItem to use a default 
 * 10 point sans-serif font (10 point sans-serif). Clients can change this
 * default value to achieve uniform font assignment, or can add any number
 * of additional rules for font assignment.
 * Rules are specified by a Predicate instance which, if returning true, will
 * trigger that rule, causing either the provided font value or the result of
 * a delegate FontAction to be applied. Rules are evaluated in the order in
 * which they are added to the FontAction, so earlier rules will have
 * precedence over rules added later.
 * </p>
 * 
 * <p>In addition, subclasses can simply override {@@link #getFont(VisualItem)}
 * to achieve custom font assignment. In some cases, this may be the simplest
 * or most flexible approach.</p>
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class FontAction extends EncoderAction {

    protected Font defaultFont = FontLib.getFont("SansSerif",Font.PLAIN,10);
    
    /**
     * Create a new FontAction that processes all data groups.
     */
    public FontAction() {
        super();
    }
    
    /**
     * Create a new FontAction that processes the specified group.
     * @@param group the data group to process
     */
    public FontAction(String group) {
        super(group);
    }
    
    /**
     * Create a new FontAction that processes the specified group.
     * @@param group the data group to process
     * @@param defaultFont the default Font to assign
     */
    public FontAction(String group, Font defaultFont) {
        super(group);
        this.defaultFont = defaultFont;
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * Set the default font to be assigned to items. Items will be assigned
     * the default font if they do not match any registered rules.
     * @@param f the default font to use
     */
    public void setDefaultFont(Font f) {
        defaultFont = f;
    }
    
    /**
     * Get the default font assigned to items.
     * @@return the default font
     */
    public Font getDefaultFont() {
        return defaultFont;
    }
    
    /**
     * Add a font mapping rule to this FontAction. VisualItems that match
     * the provided predicate will be assigned the given font value (assuming
     * they do not match an earlier rule).
     * @@param p the rule Predicate 
     * @@param font the font
     */
    public void add(Predicate p, Font font) {
        super.add(p, font);
    }

    /**
     * Add a font mapping rule to this FontAction. VisualItems that match
     * the provided expression will be assigned the given font value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param font the font
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, Font font) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        super.add(p, font);       
    }
    
    /**
     * Add a font mapping rule to this FontAction. VisualItems that match
     * the provided predicate will be assigned the font value returned by
     * the given FontAction's getFont() method.
     * @@param p the rule Predicate 
     * @@param f the delegate FontAction to use
     */
    public void add(Predicate p, FontAction f) {
        super.add(p, f);
    }

    /**
     * Add a font mapping rule to this FontAction. VisualItems that match
     * the provided expression will be assigned the given font value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param f the delegate FontAction to use
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, FontAction f) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        super.add(p, f);
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see prefuse.action.ItemAction#process(prefuse.visual.VisualItem, double)
     */
    public void process(VisualItem item, double frac) {
        Font f = getFont(item);
        Font o = item.getFont();
        item.setStartFont(o);
        item.setEndFont(f);
        item.setFont(f);
    }
    
    /**
     * Returns the Font to use for a given VisualItem. Subclasses should
     * override this method to perform customized font assignment.
     * @@param item the VisualItem for which to get the Font
     * @@return the Font for the given item
     */
    public Font getFont(VisualItem item) {
        Object o = lookup(item);
        if ( o != null ) {
            if ( o instanceof FontAction ) {
                return ((FontAction)o).getFont(item);
            } else if ( o instanceof Font ) {
                return (Font)o;
            } else {
                Logger.getLogger(this.getClass().getName())
                    .warning("Unrecognized Object from predicate chain.");
            }
        }
        return defaultFont;   
    }

} // end of class FontAction
@


2.2.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d15 1
a15 1
 * By default, a FontAction simply sets each VisualItem to use a default
d25 1
a25 1
 *
d29 1
a29 1
 *
d35 1
a35 1

d42 1
a42 1

d50 1
a50 1

d60 1
a60 1

d62 1
a62 1

d71 1
a71 1

d79 1
a79 1

d84 1
a84 1
     * @@param p the rule Predicate
d96 1
a96 1
     * @@param expr the expression String, should parse to a Predicate.
d103 1
a103 1
        super.add(p, font);
d105 1
a105 1

d110 1
a110 1
     * @@param p the rule Predicate
d122 1
a122 1
     * @@param expr the expression String, should parse to a Predicate.
d131 1
a131 1

d133 1
a133 1

d137 1
a137 2
    @@Override
	public void process(VisualItem<?> item, double frac) {
d144 1
a144 1

d151 1
a151 1
    public Font getFont(VisualItem<?> item) {
d163 1
a163 1
        return defaultFont;
@


2.1
log
@Added quantile scale for statistics-driven binning of data values
@
text
@d6 1
a6 1
import prefuse.action.ItemAction;
a9 1
import prefuse.util.PredicateChain;
d32 1
a32 1
public class FontAction extends ItemAction {
a33 1
    protected PredicateChain m_chain = null;
d88 1
a88 2
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, font);
d103 1
a103 1
        add(p, font);       
d114 1
a114 2
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, f);
d129 1
a129 1
        add(p, f);
d152 9
a160 11
        if ( m_chain != null ) {
            Object o = m_chain.get(item);
            if ( o != null ) {
                if ( o instanceof FontAction ) {
                    return ((FontAction)o).getFont(item);
                } else if ( o instanceof Font ) {
                    return (Font)o;
                } else {
                    Logger.getLogger(this.getClass().getName())
                        .warning("Unrecognized Object from predicate chain.");
                }
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d122 1
a122 1
     * Add a shape mapping rule to this FontAction. VisualItems that match
@


1.1
log
@file FontAction.java was initially added on branch beta.
@
text
@d1 172
@


1.1.2.1
log
@Intermediate commit in run-up to release.
Upgraded Tuple, Node, and Edge to the data package.
Renamed "Function" classes to "Action" classes.
Added Shape to VisualItem Schema.
Added ShapeActions, moved Shape constants to Constants interface.
Added Background image handling to the Display class.
Added social network data file.
@
text
@a0 75
package prefuse.action.assignment;

import java.awt.Font;

import prefuse.action.ItemAction;
import prefuse.util.FontLib;
import prefuse.visual.VisualItem;


/**
 * Assignment Action that sets the Font to be used by VisualItems.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class FontAction extends ItemAction {

    protected Font defaultFont = FontLib.getFont("SansSerif",Font.PLAIN,10);
    
    /**
     * Create a new FontAction that processes all data groups.
     */
    public FontAction() {
        super();
    }
    
    /**
     * Create a new FontAction that processes the specified group.
     * @@param group the data group to process
     */
    public FontAction(String group) {
        super(group);
    }
    
    /**
     * Create a new FontAction that processes the specified group.
     * @@param group the data group to process
     * @@param defaultFont the default Font to assign
     */
    public FontAction(String group, Font defaultFont) {
        super(group);
        this.defaultFont = defaultFont;
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * Set the default font to be assigned to VisualItems.
     * @@param f the default font to use
     */
    public void setDefaultFont(Font f) {
        defaultFont = f;
    }
    
    /**
     * @@see prefuse.action.ItemAction#process(prefuse.visual.VisualItem, double)
     */
    public void process(VisualItem item, double frac) {
        Font f = getFont(item);
        Font o = item.getFont();
        item.setStartFont(o);
        item.setEndFont(f);
        item.setFont(f);
    }
    
    /**
     * Returns the Font to use for a given VisualItem. Subclasses should
     * override this method to perform customized font assignment.
     * @@param item the VisualItem for which to get the Font
     * @@return the Font for the given item
     */
    public Font getFont(VisualItem item) {
        return defaultFont;
    }

} // end of class FontAction
@


1.1.2.2
log
@Various pre-release edits
Added RadialGraphView
Added new applets
Renamed ShapeRenderer to AbstractShapeRenderer
Renamed ShapeItemRenderer to ShapeRenderer
Merged TextItemRenderer and ImageItemRenderer into LabelRenderer
Removed demo launcher (and commented line in build.xml), will reintroduce demo launcher later
@
text
@a3 1
import java.util.logging.Logger;
a5 2
import prefuse.data.expression.Predicate;
import prefuse.data.expression.parser.ExpressionParser;
a6 1
import prefuse.util.PredicateChain;
d11 1
a11 15
 * <p>Assignment Action that assigns font values to VisualItems.
 * By default, a FontAction simply sets each VisualItem to use a default 
 * 10 point sans-serif font (10 point sans-serif). Clients can change this
 * default value to achieve uniform font assignment, or can add any number
 * of additional rules for font assignment.
 * Rules are specified by a Predicate instance which, if returning true, will
 * trigger that rule, causing either the provided font value or the result of
 * a delegate FontAction to be applied. Rules are evaluated in the order in
 * which they are added to the FontAction, so earlier rules will have
 * precedence over rules added later.
 * </p>
 * 
 * <p>In addition, subclasses can simply override {@@link #getFont(VisualItem)}
 * to achieve custom shape assignment. In some cases, this may be the simplest
 * or most flexible approach.</p>
a16 1
    protected PredicateChain m_chain = null;
d47 1
a47 2
     * Set the default font to be assigned to items. Items will be assigned
     * the default font if they do not match any registered rules.
a54 64
     * Get the default font assigned to items.
     * @@return the default font
     */
    public Font getDefaultFont() {
        return defaultFont;
    }
    
    /**
     * Add a font mapping rule to this FontAction. VisualItems that match
     * the provided predicate will be assigned the given font value (assuming
     * they do not match an earlier rule).
     * @@param p the rule Predicate 
     * @@param font the font
     */
    public void add(Predicate p, Font font) {
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, font);
    }

    /**
     * Add a font mapping rule to this FontAction. VisualItems that match
     * the provided expression will be assigned the given font value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param shape the shape value
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, Font font) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        add(p, font);       
    }
    
    /**
     * Add a font mapping rule to this FontAction. VisualItems that match
     * the provided predicate will be assigned the font value returned by
     * the given FontAction's getFont() method.
     * @@param p the rule Predicate 
     * @@param f the delegate FontAction to use
     */
    public void add(Predicate p, FontAction f) {
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, f);
    }

    /**
     * Add a shape mapping rule to this FontAction. VisualItems that match
     * the provided expression will be assigned the given font value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param f the delegate FontAction to use
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, FontAction f) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        add(p, f);
    }
    
    // ------------------------------------------------------------------------
    
    /**
d72 1
a72 14
        if ( m_chain != null ) {
            Object o = m_chain.get(item);
            if ( o != null ) {
                if ( o instanceof FontAction ) {
                    return ((FontAction)o).getFont(item);
                } else if ( o instanceof Font ) {
                    return (Font)o;
                } else {
                    Logger.getLogger(this.getClass().getName())
                        .warning("Unrecognized Object from predicate chain.");
                }
            }
        }
        return defaultFont;   
@


1.1.2.3
log
@Changed interaction mechanism of RotationControl
Added documentation of expression language to ExpressionParser javadoc
Added inclusion of edge arrows in bounds computation for EdgeRenderer
Added integer dimensions check to LabelRenderer
Added new readme file
@
text
@d28 1
a28 1
 * to achieve custom font assignment. In some cases, this may be the simplest
d100 1
a100 1
     * @@param font the font
@


