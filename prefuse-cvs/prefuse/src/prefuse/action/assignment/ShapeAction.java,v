head	2.2;
access;
symbols
	java_1_5:2.2.0.4
	Root_java_1_5:2.2
	beta:2.2.0.2
	beta-20080113:2.2
	beta-20071021:2.2
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.2
date	2006.04.10.18.53.20;	author jheer;	state Exp;
branches
	2.2.4.1;
next	2.1;

2.1
date	2006.02.27.04.02.14;	author jheer;	state Exp;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.42;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.07.00.42.53;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.02.07.00.42.53;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.02.09.05.12.45;	author jheer;	state Exp;
branches;
next	;

2.2.4.1
date	2008.01.23.23.55.37;	author jogiles;	state Exp;
branches;
next	2.2.4.2;

2.2.4.2
date	2008.02.24.00.22.30;	author amarsden;	state Exp;
branches;
next	2.2.4.3;

2.2.4.3
date	2008.02.28.01.09.32;	author amarsden;	state Exp;
branches;
next	;


desc
@@


2.2
log
@Updated constructors to NOT call setDefaultXXX, which is now overridden in subclasses
@
text
@package prefuse.action.assignment;

import java.util.logging.Logger;

import prefuse.Constants;
import prefuse.action.EncoderAction;
import prefuse.data.expression.Predicate;
import prefuse.data.expression.parser.ExpressionParser;
import prefuse.visual.VisualItem;


/**
 * <p>Assignment Action that assigns shape values to VisualItems.
 * Shape values are simple integer codes that indicate to
 * appropriate renderer instances what shape should be drawn. The default
 * list of shape values is included in the {@@link prefuse.Constants} class,
 * all beginning with the prefix <code>SHAPE</code>. Of course, clients can
 * always create their own shape codes that are handled by a custom Renderer. 
 * </p>
 * 
 * <p>
 * By default, a ShapeAction simply sets each VisualItem to be a
 * rectangle. Clients can change this default value to achieve uniform shape
 * assignment, or can add any number of additional rules for shape assignment.
 * Rules are specified by a Predicate instance which, if returning true, will
 * trigger that rule, causing either the provided shape value or the result of
 * a delegate ShapeAction to be applied. Rules are evaluated in the order in
 * which they are added to the ShapeAction, so earlier rules will have
 * precedence over rules added later.
 * </p>
 * 
 * <p>In addition, subclasses can simply override {@@link #getShape(VisualItem)}
 * to achieve custom shape assignment. In some cases, this may be the simplest
 * or most flexible approach.</p>
 * 
 * <p>This Action only sets the shape field of the VisualItem. For this value
 * to have an effect, a renderer instance that takes this shape value
 * into account must be used (e.g., {@@link prefuse.render.ShapeRenderer}).
 * </p>
 * 
 * <p>To automatically assign shape values based on varying values of a
 * particular data field, consider using the {@@link DataShapeAction}.</p>
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class ShapeAction extends EncoderAction {

    protected int m_defaultShape = Constants.SHAPE_RECTANGLE;
    
    /**
     * Constructor. A default rectangle shape will be used.
     */
    public ShapeAction() {
        super();
    }
    
    /**
     * Constructor. A default rectangle shape will be used.
     * @@param group the data group processed by this Action.
     */
    public ShapeAction(String group) {
        super(group);
    }

    /**
     * Constructor with a specified a default shape value.
     * @@param group the data group processed by this Action.
     * @@param shape the default shape value to use
     */
    public ShapeAction(String group, int shape) {
        super(group);
        m_defaultShape = shape;
    }
    
    /**
     * Returns the default shape value assigned to items.
     * @@return the default shape value
     */
    public int getDefaultSize() {
        return m_defaultShape;
    }
    
    /**
     * Sets the default shape value assigned to items. Items will be assigned
     * the default shape if they do not match any registered rules.
     * @@param defaultShape the new default shape value
     */
    public void setDefaultShape(int defaultShape) {
        m_defaultShape = defaultShape;
    }
    
    /**
     * Add a shape mapping rule to this ShapeAction. VisualItems that match
     * the provided predicate will be assigned the given shape value (assuming
     * they do not match an earlier rule).
     * @@param p the rule Predicate 
     * @@param shape the shape value
     */
    public void add(Predicate p, int shape) {
        super.add(p, new Integer(shape));
    }

    /**
     * Add a shape mapping rule to this ShapeAction. VisualItems that match
     * the provided expression will be assigned the given shape value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param shape the shape value
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, int shape) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        add(p, shape);       
    }
    
    /**
     * Add a size mapping rule to this ShapeAction. VisualItems that match
     * the provided predicate will be assigned the shape value returned by
     * the given ShapeAction's getSize() method.
     * @@param p the rule Predicate 
     * @@param f the delegate ShapeAction to use
     */
    public void add(Predicate p, ShapeAction f) {
        super.add(p, f);
    }

    /**
     * Add a shape mapping rule to this ShapeAction. VisualItems that match
     * the provided expression will be assigned the given shape value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param f the delegate ShapeAction to use
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, ShapeAction f) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        super.add(p, f);
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see prefuse.action.ItemAction#process(prefuse.visual.VisualItem, double)
     */
    public void process(VisualItem item, double frac) {
        item.setShape(getShape(item));
    }
    
    /**
     * Returns a shape value for the given item.
     * @@param item the item for which to get the shape value
     * @@return the shape value for the item
     */
    public int getShape(VisualItem item) {
        Object o = lookup(item);
        if ( o != null ) {
            if ( o instanceof ShapeAction ) {
                return ((ShapeAction)o).getShape(item);
            } else if ( o instanceof Number ) {
                return ((Number)o).intValue();
            } else {
                Logger.getLogger(this.getClass().getName())
                    .warning("Unrecognized Object from predicate chain.");
            }
        }
        return m_defaultShape;   
    }

} // end of class ShapeAction
@


2.2.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d5 1
a5 1
import prefuse.ShapeType;
d16 1
a16 1
 * list of shape values is included in the prefuse.Constants class,
d18 1
a18 2
 * always create their own shape codes that are handled by a custom Renderer.
 * FIXME: this has changed now that ShapeType is an Enum!
d20 1
a20 1
 *
d31 1
a31 1
 *
d35 1
a35 1
 *
d40 1
a40 1
 *
d43 1
a43 1
 *
d48 2
a49 2
    protected ShapeType m_defaultShape = ShapeType.RECTANGLE;

d56 1
a56 1

d70 1
a70 1
    public ShapeAction(String group, ShapeType shape) {
d74 1
a74 1

d79 1
a79 1
    public ShapeType getDefaultShape() {
d82 1
a82 1

d88 1
a88 1
    public void setDefaultShape(ShapeType defaultShape) {
d91 1
a91 1

d96 1
a96 1
     * @@param p the rule Predicate
d99 2
a100 2
    public void add(Predicate p, ShapeType shape) {
        super.add(p, shape.ordinal());
d108 1
a108 1
     * @@param expr the expression String, should parse to a Predicate.
d115 1
a115 1
        add(p, shape);
d117 1
a117 1

d122 1
a122 1
     * @@param p the rule Predicate
d134 1
a134 1
     * @@param expr the expression String, should parse to a Predicate.
d143 1
a143 1

d145 1
a145 1

d149 1
a149 2
    @@Override
	public void process(VisualItem<?> item, double frac) {
d152 1
a152 1

d158 1
a158 1
    public ShapeType getShape(VisualItem<?> item) {
d164 1
a164 1
                return ShapeType.values()[((Number)o).intValue()];
d170 1
a170 1
        return m_defaultShape;
@


2.2.4.2
log
@Refactored the shape work to allow for custom ShapeBuilders. VisualItem.SHAPE has been replaced with VisualItem.SHAPEBUILDER.
@
text
@d5 1
a5 2
import prefuse.ShapeBuilder;
import prefuse.PredefinedShape;
d13 7
a19 4
 * <p>Assignment Action that assigns ShapeBuilder values to VisualItems.
 * ShapeBuilders know how to draw certain shapes. The default ShapeBuilders are
 * in the PredefinedShape class. Of course, clients can always create their own
 * ShapeBuilders.
a44 3
 * @@see PredefinedShape
 * @@see ShapeRenderer
 * 
d49 1
a49 1
    protected ShapeBuilder m_defaultShape = PredefinedShape.RECTANGLE;
d71 1
a71 1
    public ShapeAction(String group, ShapeBuilder shape) {
d80 1
a80 1
    public ShapeBuilder getDefaultShape() {
d89 1
a89 1
    public void setDefaultShape(ShapeBuilder defaultShape) {
d100 2
a101 2
    public void add(Predicate p, ShapeBuilder shape) {
        super.add(p, shape);
d114 1
a114 1
    public void add(String expr, ShapeBuilder shape) {
d152 1
a152 1
        item.setShapeBuilder(getShape(item));
d160 1
a160 1
    public ShapeBuilder getShape(VisualItem<?> item) {
d165 2
a166 2
            } else if ( o instanceof ShapeBuilder) {
            	return (ShapeBuilder) o;
@


2.2.4.3
log
@Documentation improvements
@
text
@d44 2
a45 3
 * @@see prefuse.render.ShapeRenderer
 * @@see VisualItem#SHAPEBUILDER
 *
d152 1
a152 1
    public void process(VisualItem<?> item, double frac) {
d167 1
a167 1
                return (ShapeBuilder) o;
@


2.1
log
@Added new EncoderAction abstract base class.
Updated assignment package to subclass EncoderAction.
setup() and finish() template methods now allow delegate assignment actions to be properly initialized.
@
text
@d72 1
a72 1
        setDefaultShape(shape);
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d6 1
a6 1
import prefuse.action.ItemAction;
a8 1
import prefuse.util.PredicateChain;
d46 1
a46 1
public class ShapeAction extends ItemAction {
a47 1
    protected PredicateChain m_chain = null;
d100 1
a100 2
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, new Integer(shape));
d126 1
a126 2
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, f);
d141 1
a141 1
        add(p, f);
d159 9
a167 11
        if ( m_chain != null ) {
            Object o = m_chain.get(item);
            if ( o != null ) {
                if ( o instanceof ShapeAction ) {
                    return ((ShapeAction)o).getShape(item);
                } else if ( o instanceof Number ) {
                    return ((Number)o).intValue();
                } else {
                    Logger.getLogger(this.getClass().getName())
                        .warning("Unrecognized Object from predicate chain.");
                }
@


1.1
log
@file ShapeAction.java was initially added on branch beta.
@
text
@d1 179
@


1.1.2.1
log
@Intermediate commit in run-up to release.
Upgraded Tuple, Node, and Edge to the data package.
Renamed "Function" classes to "Action" classes.
Added Shape to VisualItem Schema.
Added ShapeActions, moved Shape constants to Constants interface.
Added Background image handling to the Display class.
Added social network data file.
@
text
@a0 179
package prefuse.action.assignment;

import java.util.logging.Logger;

import prefuse.Constants;
import prefuse.action.ItemAction;
import prefuse.data.expression.Predicate;
import prefuse.data.expression.parser.ExpressionParser;
import prefuse.util.PredicateChain;
import prefuse.visual.VisualItem;


/**
 * <p>Assignment Action that assigns shape values to VisualItems.
 * Shape values are simple integer codes that indicate to
 * appropriate renderer instances what shape should be drawn. The default
 * list of shape values is included in the {@@link prefuse.Constants} class,
 * all beginning with the prefix <code>SHAPE</code>. Of course, clients can
 * always create their own shape codes that are handled by a custom Renderer. 
 * </p>
 * 
 * <p>
 * By default, a ShapeAction simply sets each VisualItem to be a
 * rectangle. Clients can change this default value to achieve uniform shape
 * assignment, or can add any number of additional rules for shape assignment.
 * Rules are specified by a Predicate instance which, if returning true, will
 * trigger that rule, causing either the provided shape value or the result of
 * a delegate ShapeAction to be applied. Rules are evaluated in the order in
 * which they are added to the ShapeAction, so earlier rules will have
 * precedence over rules added later.
 * </p>
 * 
 * <p>In addition, subclasses can simply override {@@link #getShape(VisualItem)}
 * to achieve custom shape assignment. In some cases, this may be the simplest
 * or most flexible approach.</p>
 * 
 * <p>This Action only sets the shape field of the VisualItem. For this value
 * to have an effect, a renderer instance that takes this shape value
 * into account must be used (e.g., {@@link prefuse.render.ShapeItemRenderer}).
 * </p>
 * 
 * <p>To automatically assign shape values based on varying values of a
 * particular data field, consider using the {@@link DataShapeAction}.</p>
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class ShapeAction extends ItemAction {

    protected PredicateChain m_chain = null;
    protected int m_defaultShape = Constants.SHAPE_RECTANGLE;
    
    /**
     * Constructor. A default rectangle shape will be used.
     */
    public ShapeAction() {
        super();
    }
    
    /**
     * Constructor. A default rectangle shape will be used.
     * @@param group the data group processed by this Action.
     */
    public ShapeAction(String group) {
        super(group);
    }

    /**
     * Constructor with a specified a default shape value.
     * @@param group the data group processed by this Action.
     * @@param shape the default shape value to use
     */
    public ShapeAction(String group, int shape) {
        super(group);
        setDefaultShape(shape);
    }
    
    /**
     * Returns the default shape value assigned to items.
     * @@return the default shape value
     */
    public int getDefaultSize() {
        return m_defaultShape;
    }
    
    /**
     * Sets the default shape value assigned to items. Items will be assigned
     * the default shape if they do not match any registered rules.
     * @@param defaultShape the new default shape value
     */
    public void setDefaultShape(int defaultShape) {
        m_defaultShape = defaultShape;
    }
    
    /**
     * Add a shape mapping rule to this SizeAction. VisualItems that match
     * the provided predicate will be assigned the given shape value (assuming
     * they do not match an earlier rule).
     * @@param p the rule Predicate 
     * @@param shape the shape value
     */
    public void add(Predicate p, int shape) {
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, new Integer(shape));
    }

    /**
     * Add a shape mapping rule to this SizeAction. VisualItems that match
     * the provided expression will be assigned the given shape value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param shape the shape value
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, int shape) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        add(p, shape);       
    }
    
    /**
     * Add a size mapping rule to this ShapeAction. VisualItems that match
     * the provided predicate will be assigned the shape value returned by
     * the given ShapeAction's getSize() method.
     * @@param p the rule Predicate 
     * @@param f the delegate ShapeAction to use
     */
    public void add(Predicate p, ShapeAction f) {
        if ( m_chain == null ) m_chain = new PredicateChain();
        m_chain.add(p, f);
    }

    /**
     * Add a shape mapping rule to this SizeAction. VisualItems that match
     * the provided expression will be assigned the given shape value (assuming
     * they do not match an earlier rule). The provided expression String will
     * be parsed to generate the needed rule Predicate.
     * @@param expr the expression String, should parse to a Predicate. 
     * @@param f the delegate ShapeAction to use
     * @@throws RuntimeException if the expression does not parse correctly or
     * does not result in a Predicate instance.
     */
    public void add(String expr, ShapeAction f) {
        Predicate p = (Predicate)ExpressionParser.parse(expr);
        add(p, f);
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see prefuse.action.ItemAction#process(prefuse.visual.VisualItem, double)
     */
    public void process(VisualItem item, double frac) {
        item.setShape(getShape(item));
    }
    
    /**
     * Returns a shape value for the given item.
     * @@param item the item for which to get the shape value
     * @@return the shape value for the item
     */
    public int getShape(VisualItem item) {
        if ( m_chain != null ) {
            Object o = m_chain.get(item);
            if ( o != null ) {
                if ( o instanceof ShapeAction ) {
                    return ((ShapeAction)o).getShape(item);
                } else if ( o instanceof Number ) {
                    return ((Number)o).intValue();
                } else {
                    Logger.getLogger(this.getClass().getName())
                        .warning("Unrecognized Object from predicate chain.");
                }
            }
        }
        return m_defaultShape;   
    }

} // end of class ShapeAction
@


1.1.2.2
log
@Various pre-release edits
Added RadialGraphView
Added new applets
Renamed ShapeRenderer to AbstractShapeRenderer
Renamed ShapeItemRenderer to ShapeRenderer
Merged TextItemRenderer and ImageItemRenderer into LabelRenderer
Removed demo launcher (and commented line in build.xml), will reintroduce demo launcher later
@
text
@d39 1
a39 1
 * into account must be used (e.g., {@@link prefuse.render.ShapeRenderer}).
d95 1
a95 1
     * Add a shape mapping rule to this ShapeAction. VisualItems that match
d107 1
a107 1
     * Add a shape mapping rule to this ShapeAction. VisualItems that match
d134 1
a134 1
     * Add a shape mapping rule to this ShapeAction. VisualItems that match
@


