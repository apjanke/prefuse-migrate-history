head	2.1;
access;
symbols
	java_1_5:2.1.0.4
	Root_java_1_5:2.1
	beta:2.1.0.2
	beta-20080113:2.1
	beta-20071021:2.1
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.1
date	2006.07.15.19.59.12;	author jheer;	state Exp;
branches
	2.1.4.1;
next	2.0;

2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.16.18;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.18;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.23.07.20;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.1.4.1
date	2008.01.23.23.55.39;	author jogiles;	state Exp;
branches;
next	2.1.4.2;

2.1.4.2
date	2008.03.26.09.11.00;	author amarsden;	state Exp;
branches;
next	;


desc
@@


2.1
log
@Made minor changes to CircleLayout javadoc.
@
text
@package prefuse.action.layout;

import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import prefuse.data.tuple.TupleSet;
import prefuse.visual.VisualItem;

/**
 * Layout action that positions visual items along a circle. By default,
 * items are sorted in the order in which they iterated over.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class CircleLayout extends Layout {
    
    private double m_radius; // radius of the circle layout
    
    /**
     * Create a CircleLayout; the radius of the circle layout will be computed
     * automatically based on the display size.
     * @@param group the data group to layout
     */
    public CircleLayout(String group) {
        super(group);
    }
    
    /**
     * Create a CircleLayout; use the specified radius for the the circle layout,
     * regardless of the display size.
     * @@param group the data group to layout
     * @@param radius the radius of the circle layout.
     */
    public CircleLayout(String group, double radius) {
        super(group);
        m_radius = radius;
    }
    
    /**
     * Return the radius of the layout circle.
     * @@return the circle radius
     */
    public double getRadius() {
        return m_radius;
    }

    /**
     * Set the radius of the layout circle.
     * @@param radius the circle radius to use
     */
    public void setRadius(double radius) {
        m_radius = radius;
    }
    
    /**
     * @@see prefuse.action.Action#run(double)
     */
    public void run(double frac) {
        TupleSet ts = m_vis.getGroup(m_group); 
        
        int nn = ts.getTupleCount();
        
        Rectangle2D r = getLayoutBounds();  
        double height = r.getHeight();
        double width = r.getWidth();
        double cx = r.getCenterX();
        double cy = r.getCenterY();

        double radius = m_radius;
        if (radius <= 0) {
            radius = 0.45 * (height < width ? height : width);
        }

        Iterator items = ts.tuples();
        for (int i=0; items.hasNext(); i++) {
            VisualItem n = (VisualItem)items.next();
            double angle = (2*Math.PI*i) / nn;
            double x = Math.cos(angle)*radius + cx;
            double y = Math.sin(angle)*radius + cy;
            setX(n, null, x);
            setY(n, null, y);
        }
    }

} // end of class CircleLayout
@


2.1.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d4 2
d12 1
a12 1
 *
d16 1
a16 1

d18 1
a18 1

d27 1
a27 1

d38 1
a38 1

d54 1
a54 1

d58 3
a60 4
    @@Override
	public void run(double frac) {
        TupleSet<? extends VisualItem<?>> ts = m_vis.getGroup(m_group);

d62 2
a63 2

        Rectangle2D r = getLayoutBounds();
d74 4
a77 4
        int i = 0;

        for(VisualItem<?> n : ts.tuples()) {
            double angle = 2*Math.PI*i / nn;
a81 1
            i++;
@


2.1.4.2
log
@minor optimisation
@
text
@a4 1
import prefuse.util.MathLib;
d76 1
a76 1
            double angle = MathLib.TWO_PI * i / nn;
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d10 2
a11 1
 * Layout action that uniformly positions visual items along a circle.
@


1.1
log
@file CircleLayout.java was initially added on branch beta.
@
text
@d1 84
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 76
package prefuse.action.layout;

import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import prefuse.data.tuple.TupleSet;
import prefuse.visual.VisualItem;



/**
 * Layout algorithm that positions graph elements along a circle.
 *
 * Ported from the implementation in the <a href="http://jung.sourceforge.net/">JUNG</a> framework.
 * 
 * @@author Masanori Harada
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org</a>
 */
public class CircleLayout extends Layout {
    
    private double m_radius; // radius of the circle layout
    
    /**
     * Default constructor. The radius of the circle layout will be computed
     * automatically based on the display size.
     */
    public CircleLayout(String group) {
        super(group);
    } //
    
    /**
     * Constructor. Use the specified radius for the the circle layout,
     * regardless of the display size.
     * @@param radius the radius of the circle layout.
     */
    public CircleLayout(String group, double radius) {
        super(group);
        m_radius = radius;
    } //
    
	public double getRadius() {
		return m_radius;
	} //

	public void setRadius(double radius) {
		m_radius = radius;
	} //
    
	public void run(double frac) {
	    TupleSet ts = m_vis.getGroup(m_group); 
	    
	    int nn = ts.getTupleCount();
	    
	    Rectangle2D r = getLayoutBounds();	
		double height = r.getHeight();
		double width = r.getWidth();
		double cx = r.getCenterX();
		double cy = r.getCenterY();

		double radius = m_radius;
		if (radius <= 0) {
			radius = 0.45 * (height < width ? height : width);
		}

        Iterator nodeIter = ts.tuples();
		for (int i=0; nodeIter.hasNext(); i++) {
		    VisualItem n = (VisualItem)nodeIter.next();
		    double angle = (2*Math.PI*i) / nn;
		    double x = Math.cos(angle)*radius + cx;
		    double y = Math.sin(angle)*radius + cy;
            setX(n, null, x);
            setY(n, null, y);
		}
	} //

} // end of class CircleLayout
@


1.1.2.2
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d41 3
a43 3
    public double getRadius() {
        return m_radius;
    } //
d45 3
a47 3
    public void setRadius(double radius) {
        m_radius = radius;
    } //
d49 10
a58 10
    public void run(double frac) {
        TupleSet ts = m_vis.getGroup(m_group); 
        
        int nn = ts.getTupleCount();
        
        Rectangle2D r = getLayoutBounds();  
        double height = r.getHeight();
        double width = r.getWidth();
        double cx = r.getCenterX();
        double cy = r.getCenterY();
d60 4
a63 4
        double radius = m_radius;
        if (radius <= 0) {
            radius = 0.45 * (height < width ? height : width);
        }
d66 5
a70 5
        for (int i=0; nodeIter.hasNext(); i++) {
            VisualItem n = (VisualItem)nodeIter.next();
            double angle = (2*Math.PI*i) / nn;
            double x = Math.cos(angle)*radius + cx;
            double y = Math.sin(angle)*radius + cy;
d73 2
a74 2
        }
    } //
@


1.1.2.3
log
@Lots of javadoc
@
text
@d9 2
d12 3
a14 1
 * Layout action that uniformly positions visual items along a circle.
d16 2
a17 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d24 1
a24 1
     * Create a CircleLayout; the radius of the circle layout will be computed
a25 1
     * @@param group the data group to layout
d29 1
a29 1
    }
d32 1
a32 1
     * Create a CircleLayout; use the specified radius for the the circle layout,
a33 1
     * @@param group the data group to layout
d39 1
a39 1
    }
a40 4
    /**
     * Return the radius of the layout circle.
     * @@return the circle radius
     */
d43 1
a43 1
    }
a44 4
    /**
     * Set the radius of the layout circle.
     * @@param radius the circle radius to use
     */
d47 1
a47 1
    }
a48 3
    /**
     * @@see prefuse.action.Action#run(double)
     */
d65 3
a67 3
        Iterator items = ts.tuples();
        for (int i=0; items.hasNext(); i++) {
            VisualItem n = (VisualItem)items.next();
d74 1
a74 1
    }
@


