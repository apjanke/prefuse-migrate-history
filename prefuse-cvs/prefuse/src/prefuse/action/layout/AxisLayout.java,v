head	2.6;
access;
symbols
	java_1_5:2.6.0.4
	Root_java_1_5:2.6
	beta:2.6.0.2
	beta-20080113:2.6
	beta-20071021:2.6
	beta-20060220:2.1
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.6
date	2006.04.12.03.08.05;	author jheer;	state Exp;
branches
	2.6.4.1;
next	2.5;

2.5
date	2006.04.05.17.07.25;	author jheer;	state Exp;
branches;
next	2.4;

2.4
date	2006.03.06.00.35.27;	author jheer;	state Exp;
branches;
next	2.3;

2.3
date	2006.03.01.08.41.09;	author jheer;	state Exp;
branches;
next	2.2;

2.2
date	2006.02.22.20.59.58;	author jheer;	state Exp;
branches;
next	2.1;

2.1
date	2006.02.18.23.42.24;	author jheer;	state Exp;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.16.18;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.18;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.09.23.13.07;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.16.20.07.41;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.01.27.09.05.18;	author jheer;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2006.02.01.19.22.02;	author jheer;	state Exp;
branches;
next	;

2.6.4.1
date	2008.01.23.23.55.39;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.6
log
@Changed setField to setDataField
@
text
@package prefuse.action.layout;

import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import prefuse.Constants;
import prefuse.data.Table;
import prefuse.data.Tuple;
import prefuse.data.expression.Predicate;
import prefuse.data.query.NumberRangeModel;
import prefuse.data.query.ObjectRangeModel;
import prefuse.data.tuple.TupleSet;
import prefuse.util.DataLib;
import prefuse.util.MathLib;
import prefuse.util.ui.ValuedRangeModel;
import prefuse.visual.VisualItem;

/**
 * Layout Action that assigns positions along a single dimension (either x or
 * y) according to a specified data field. By default, the range of values
 * along the axis is automatically determined by the minimum and maximum
 * values of the data field. The range bounds can be manually set using the
 * {@@link #setRangeModel(ValuedRangeModel)} method. Also, the set of items
 * processed by this layout can be filtered by providing a filtering
 * predicate (@@link #setFilter(Predicate)).
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class AxisLayout extends Layout {

    private String m_field;
    private int m_scale = Constants.LINEAR_SCALE;
    private int m_axis = Constants.X_AXIS;
    private int m_type = Constants.UNKNOWN;
    
    // visible region of the layout (in item coordinates)
    // if false, the table will be consulted
    private boolean m_modelSet = false;
    private ValuedRangeModel m_model = null;
    private Predicate m_filter = null;
    
    // screen coordinate range
    private double m_min;
    private double m_range;
    
    // value range / distribution
    private double[] m_dist = new double[2];
    
    /**
     * Create a new AxisLayout. Defaults to using the x-axis.
     * @@param group the data group to layout
     * @@param field the data field upon which to base the layout
     */
    public AxisLayout(String group, String field) {
        super(group);
        m_field = field;
    }
    
    /**
     * Create a new AxisLayout.
     * @@param group the data group to layout
     * @@param field the data field upon which to base the layout
     * @@param axis the axis type, either {@@link prefuse.Constants#X_AXIS}
     * or {@@link prefuse.Constants#Y_AXIS}.
     */
    public AxisLayout(String group, String field, int axis) {
        this(group, field);
        setAxis(axis);
    }
    
    /**
     * Create a new AxisLayout.
     * @@param group the data group to layout
     * @@param field the data field upon which to base the layout
     * @@param axis the axis type, either {@@link prefuse.Constants#X_AXIS}
     * or {@@link prefuse.Constants#Y_AXIS}.
     * @@param filter an optional predicate filter for limiting which items
     * to layout.
     */
    public AxisLayout(String group, String field, int axis, Predicate filter) {
        this(group, field, axis);
        setFilter(filter);
    }

    // ------------------------------------------------------------------------
    
    /**
     * Set the data field used by this axis layout action. The values of the
     * data field will determine the position of items along the axis. Note
     * that this method does not affect the other parameters of this action. In
     * particular, clients that have provided a custom range model for
     * setting the axis range may need to appropriately update the model
     * setting for use with the new data field setting.
     * @@param field the name of the data field that determines the layout
     */
    public void setDataField(String field) {
        m_field = field;
        if ( !m_modelSet )
            m_model = null;
    }
    
    /**
     * Get the data field used by this axis layout action. The values of the
     * data field determine the position of items along the axis.
     * @@return the name of the data field that determines the layout
     */
    public String getDataField() {
        return m_field;
    }
    
    /**
     * Set the range model determing the span of the axis. This model controls
     * the minimum and maximum values of the layout, as provided by the
     * {@@link prefuse.util.ui.ValuedRangeModel#getLowValue()} and
     * {@@link prefuse.util.ui.ValuedRangeModel#getHighValue()} methods.
     * @@param model the range model for the axis.
     */
    public void setRangeModel(ValuedRangeModel model) {
        m_model = model;
        m_modelSet = (model != null);
    }
    
    /**
     * Get the range model determing the span of the axis. This model controls
     * the minimum and maximum values of the layout, as provided by the
     * {@@link prefuse.util.ui.ValuedRangeModel#getLowValue()} and
     * {@@link prefuse.util.ui.ValuedRangeModel#getHighValue()} methods.
     * @@return the range model for the axis.
     */
    public ValuedRangeModel getRangeModel() {
        return m_model;
    }
    
    /**
     * Set a predicate filter to limit which items are considered for layout.
     * Only items for which the predicate returns a true value are included
     * in the layout computation. 
     * @@param filter the predicate filter to use. If null, no filtering
     * will be performed.
     */
    public void setFilter(Predicate filter) {
        m_filter = filter;
    }
    
    /**
     * Get the predicate filter to limit which items are considered for layout.
     * Only items for which the predicate returns a true value are included
     * in the layout computation. 
     * @@return the predicate filter used by this layout. If null, no filtering
     * is performed.
     */
    public Predicate getFilter() {
        return m_filter;
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * Returns the scale type used for the axis. This setting only applies
     * for numerical data types (i.e., when axis values are from a
     * <code>NumberValuedRange</code>).
     * @@return the scale type. One of
     * {@@link prefuse.Constants#LINEAR_SCALE}, 
     * {@@link prefuse.Constants#SQRT_SCALE}, or
     * {@@link Constants#LOG_SCALE}.
     */
    public int getScale() {
        return m_scale;
    }
    
    /**
     * Sets the scale type used for the axis. This setting only applies
     * for numerical data types (i.e., when axis values are from a
     * <code>NumberValuedRange</code>).
     * @@param scale the scale type. One of
     * {@@link prefuse.Constants#LINEAR_SCALE}, 
     * {@@link prefuse.Constants#SQRT_SCALE}, or
     * {@@link Constants#LOG_SCALE}.
     */
    public void setScale(int scale) {
        if ( scale < 0 || scale >= Constants.SCALE_COUNT )
            throw new IllegalArgumentException(
                    "Unrecognized scale value: "+scale);
        m_scale = scale;
    }
    
    /**
     * Return the axis type of this layout, either
     * {@@link prefuse.Constants#X_AXIS} or {@@link prefuse.Constants#Y_AXIS}.
     * @@return the axis type of this layout.
     */
    public int getAxis() {
        return m_axis;
    }

    /**
     * Set the axis type of this layout.
     * @@param axis the axis type to use for this layout, either
     * {@@link prefuse.Constants#X_AXIS} or {@@link prefuse.Constants#Y_AXIS}.
     */
    public void setAxis(int axis) {
        if ( axis < 0 || axis >= Constants.AXIS_COUNT )
            throw new IllegalArgumentException(
                    "Unrecognized axis value: "+axis);
        m_axis = axis;
    }
    
    /**
     * Return the data type used by this layout. This value is one of
     * {@@link prefuse.Constants#NOMINAL}, {@@link prefuse.Constants#ORDINAL},
     * {@@link prefuse.Constants#NUMERICAL}, or
     * {@@link prefuse.Constants#UNKNOWN}.
     * @@return the data type used by this layout
     */
    public int getDataType() {
        return m_type;
    }
    
    /**
     * Set the data type used by this layout.
     * @@param type the data type used by this layout, one of
     * {@@link prefuse.Constants#NOMINAL}, {@@link prefuse.Constants#ORDINAL},
     * {@@link prefuse.Constants#NUMERICAL}, or
     * {@@link prefuse.Constants#UNKNOWN}.
     */
    public void setDataType(int type) {
        if ( type < 0 || type >= Constants.DATATYPE_COUNT )
            throw new IllegalArgumentException(
                    "Unrecognized data type value: "+type);
        m_type = type;
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see prefuse.action.Action#run(double)
     */
    public void run(double frac) {
        TupleSet ts = m_vis.getGroup(m_group);
        setMinMax();
        
        switch ( getDataType(ts) ) {
        case Constants.NUMERICAL:
            numericalLayout(ts);
            break;
        default:
            ordinalLayout(ts);
        }
    }
    
    /**
     * Retrieve the data type.
     */
    protected int getDataType(TupleSet ts) {
        if ( m_type == Constants.UNKNOWN ) {
            boolean numbers = true;
            if ( ts instanceof Table ) {
                numbers = ((Table)ts).canGetDouble(m_field);
            } else {
                for ( Iterator it = ts.tuples(); it.hasNext(); ) {
                    if ( !((Tuple)it.next()).canGetDouble(m_field) ) {
                        numbers = false;
                        break;
                    }
                }
            }
            if ( numbers ) {
                return Constants.NUMERICAL;
            } else {
                return Constants.ORDINAL;
            }
        } else {
            return m_type;
        }
    }
    
    /**
     * Set the minimum and maximum pixel values.
     */
    private void setMinMax() {
        Rectangle2D b = getLayoutBounds();
        if ( m_axis == Constants.X_AXIS ) {
            m_min = b.getMinX();
            m_range = b.getMaxX() - m_min;
        } else {
            m_min = b.getMaxY();
            m_range = b.getMinY() - m_min;
        }
    }
    
    /**
     * Set the layout position of an item.
     */
    protected void set(VisualItem item, double frac) {
        double xOrY = m_min + frac*m_range;
        if ( m_axis == Constants.X_AXIS ) {
            setX(item, null, xOrY);
        } else {
            setY(item, null, xOrY);
        }
    }
    
    /**
     * Compute a quantitative axis layout.
     */
    protected void numericalLayout(TupleSet ts) {
        if ( !m_modelSet ) {
            m_dist[0] = DataLib.min(ts, m_field).getDouble(m_field);
            m_dist[1] = DataLib.max(ts, m_field).getDouble(m_field);
            
            double lo = m_dist[0], hi = m_dist[1];
            if ( m_model == null ) {
                m_model = new NumberRangeModel(lo, hi, lo, hi);
            } else {
                ((NumberRangeModel)m_model).setValueRange(lo, hi, lo, hi);
            }
        } else {
            m_dist[0] = ((Number)m_model.getLowValue()).doubleValue();
            m_dist[1] = ((Number)m_model.getHighValue()).doubleValue();
        }
        
        Iterator iter = m_vis.items(m_group, m_filter);
        while ( iter.hasNext() ) {
            VisualItem item = (VisualItem)iter.next();
            double v = item.getDouble(m_field);
            double f = MathLib.interp(m_scale, v, m_dist);
            set(item, f);
        }
    }
    
    /**
     * Compute an ordinal axis layout.
     */
    protected void ordinalLayout(TupleSet ts) {
        if ( !m_modelSet) {
            Object[] array = DataLib.ordinalArray(ts, m_field);
            
            if ( m_model == null ) {
                m_model = new ObjectRangeModel(array);
            } else {
                ((ObjectRangeModel)m_model).setValueRange(array);
            }
        }
        
        ObjectRangeModel model = (ObjectRangeModel)m_model;
        int start = model.getValue();
        int end = start + model.getExtent();
        double total = (double)(end-start);
        
        Iterator iter = m_vis.items(m_group, m_filter);
        while ( iter.hasNext() ) {
            VisualItem item = (VisualItem)iter.next();
            int order = model.getIndex(item.get(m_field)) - start;
            set(item, order/total);
        }
    }
    
} // end of class AxisLayout
@


2.6.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d4 3
a6 1
import prefuse.action.DataType;
a14 1
import prefuse.util.Scale;
d26 1
a26 1
 *
d32 4
a35 4
    private Scale m_scale = Scale.LINEAR;
    private Axis m_axis = Axis.X;
    private DataType m_type = DataType.UNKNOWN;

d41 1
a41 1

d45 1
a45 1

d47 2
a48 2
    private final double[] m_dist = new double[2];

d58 1
a58 1

d63 2
a64 1
     * @@param axis the axis type
d66 1
a66 1
    public AxisLayout(String group, String field, Axis axis) {
d70 1
a70 1

d75 2
a76 1
     * @@param axis the axis type
d80 1
a80 1
    public AxisLayout(String group, String field, Axis axis, Predicate filter) {
d86 1
a86 1

d98 2
a99 3
        if ( !m_modelSet ) {
			m_model = null;
		}
d101 1
a101 1

d110 1
a110 1

d120 1
a120 1
        m_modelSet = model != null;
d122 1
a122 1

d133 1
a133 1

d137 1
a137 1
     * in the layout computation.
d144 1
a144 1

d148 1
a148 1
     * in the layout computation.
d155 1
a155 1

d157 1
a157 1

d162 4
a165 1
     * @@return the scale type
d167 1
a167 1
    public Scale getScale() {
d170 1
a170 1

d175 4
a178 1
     * @@param scale the scale type
d180 4
a183 1
    public void setScale(Scale scale) {
d186 1
a186 1

d188 2
a189 1
     * Return the axis type of this layout
d192 1
a192 1
    public Axis getAxis() {
d198 2
a199 1
     * @@param axis the axis type to use for this layout
d201 4
a204 1
    public void setAxis(Axis axis) {
d207 1
a207 1

d209 4
a212 2
     * Return the data type used by this layout.
     *
d215 1
a215 1
    public DataType getDataType() {
d218 1
a218 1

d221 4
a224 1
     * @@param type the data type used by this layout
d226 2
a227 2
    public void setDataType(DataType type) {
        if ( type == DataType.UNKNOWN) {
a229 1
        }
d232 1
a232 1

d234 1
a234 1

d238 2
a239 3
    @@Override
	public void run(double frac) {
        TupleSet<? extends VisualItem<?>> ts = m_vis.getGroup(m_group);
d241 1
a241 1

d243 1
a243 1
        case NUMERICAL:
d250 1
a250 1

d254 2
a255 2
    protected DataType getDataType(TupleSet<? extends VisualItem<?>> ts) {
        if ( m_type == DataType.UNKNOWN ) {
d258 1
a258 1
                numbers = ((Table<? extends VisualItem<?>>)ts).canGetDouble(m_field);
d260 2
a261 2
                for(Tuple<?> tuple : ts.tuples()) {
                    if ( !tuple.canGetDouble(m_field) ) {
d268 1
a268 1
                return DataType.NUMERICAL;
d270 1
a270 1
                return DataType.ORDINAL;
d276 1
a276 1

d282 1
a282 1
        if ( m_axis == Axis.X) {
d290 1
a290 1

d294 1
a294 1
    protected void set(VisualItem<?> item, double frac) {
d296 1
a296 1
        if ( m_axis == Axis.X) {
d302 1
a302 1

d306 1
a306 1
    protected void numericalLayout(TupleSet<? extends VisualItem<?>> ts) {
d310 1
a310 1

d321 4
a324 2

        for(VisualItem<?> item : m_vis.items(m_group, m_filter)) {
d330 1
a330 1

d334 1
a334 1
    protected void ordinalLayout(TupleSet<? extends VisualItem<?>> ts) {
d337 1
a337 1

d344 1
a344 1

d348 5
a352 3
        double total = end-start;

        for(VisualItem<?> item : m_vis.items(m_group, m_filter)) {
d357 1
a357 1

@


2.5
log
@Can now change the data field used to drive the axis layout
@
text
@d96 1
a96 1
    public void setField(String field) {
d98 2
d107 1
a107 1
    public String getField() {
@


2.4
log
@Updated encoders and AxisLayout to work with arbitrary TupleSets, not just Tables
@
text
@d19 7
a25 2
 * LAyout Action that assigns positions along a single dimension
 * (either x or y) according to a specified data field.
d88 22
d136 2
a137 1
     * @@param filter the predicate filter to use
d143 11
@


2.3
log
@Updated AxisLayout to support arbitrary TupleSets (not just Tables)
@
text
@a8 1
import prefuse.data.column.ColumnMetadata;
d267 2
a268 11
            if ( ts instanceof Table ) {
                Table t = (Table)ts;
                ColumnMetadata md = t.getMetadata(m_field);
                m_dist[0] = t.getDouble(md.getMinimumRow(), m_field);
                m_dist[1] = t.getDouble(md.getMaximumRow(), m_field);
            } else {
                Tuple mint = DataLib.min(ts.tuples(), m_field);
                Tuple maxt = DataLib.max(ts.tuples(), m_field);
                m_dist[0] = mint.getDouble(m_field);
                m_dist[1] = maxt.getDouble(m_field);
            }
d295 2
a296 6
            Object[] array;
            if ( ts instanceof Table ) {
                array = ((Table)ts).getMetadata(m_field).getOrdinalArray();
            } else {
                array = DataLib.ordinalArray(ts.tuples(), m_field);
            }
@


2.2
log
@Changed visibility for setMinMax method to private.
@
text
@d8 1
d14 1
a199 3
        if ( !(ts instanceof Table) ) {
            throw new IllegalStateException(); // TODO: flesh this out?
        }
d202 1
a202 2
        Table t = (Table)ts;
        switch ( getDataType(t) ) {
d204 1
a204 1
            numericalLayout(t);
d207 1
a207 1
            ordinalLayout(t);
d214 1
a214 1
    protected int getDataType(Table t) {
d216 12
a227 1
            if ( t.canGetDouble(m_field) ) {
d266 1
a266 1
    protected void numericalLayout(Table t) {
d268 11
a278 3
            ColumnMetadata md = t.getMetadata(m_field);
            m_dist[0] = t.getDouble(md.getMinimumRow(), m_field);
            m_dist[1] = t.getDouble(md.getMaximumRow(), m_field);
d303 1
a303 1
    protected void ordinalLayout(Table t) {
d305 6
a310 2
            ColumnMetadata md = t.getMetadata(m_field);
            Object[] array = md.getOrdinalArray();
@


2.1
log
@Added quantile scale for statistics-driven binning of data values
@
text
@d229 1
a229 1
     * Set the minimum and maximum axis values.
d231 1
a231 1
    protected void setMinMax() {
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d40 3
a257 1
        double lo, hi;
d260 2
a261 2
            lo = t.getDouble(md.getMinimumRow(), m_field);
            hi = t.getDouble(md.getMaximumRow(), m_field);
d263 1
a263 1
            Double dlo = new Double(lo), dhi = new Double(hi);
d265 1
a265 1
                m_model = new NumberRangeModel(lo,hi,lo,hi);
d267 1
a267 1
                ((NumberRangeModel)m_model).setValueRange(dlo, dhi, dlo, dhi);
d270 2
a271 2
            lo = ((Number)m_model.getLowValue()).doubleValue();
            hi = ((Number)m_model.getHighValue()).doubleValue();
d278 1
a278 1
            double f = MathLib.interp(m_scale, v, lo, hi);
@


1.1
log
@file AxisLayout.java was initially added on branch beta.
@
text
@d1 308
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 208
package prefuse.action.layout;

import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import prefuse.Constants;
import prefuse.data.Table;
import prefuse.data.column.ColumnMetadata;
import prefuse.data.expression.Predicate;
import prefuse.data.query.NumberRangeModel;
import prefuse.data.query.ObjectRangeModel;
import prefuse.data.tuple.TupleSet;
import prefuse.util.MathLib;
import prefuse.util.ui.ValuedRangeModel;
import prefuse.visual.VisualItem;

/**
 * Performs layout along a single dimension (either x or y) according to
 * a selected data field.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class AxisLayout extends Layout {

    private String m_field;
    private int m_scale = Constants.LINEAR_SCALE;
    private int m_axis = Constants.X_AXIS;
    private int m_type = Constants.UNKNOWN;
    
    // visible region of the layout (in item coordinates)
    // if false, the table will be consulted
    private boolean m_modelSet = false;
    private ValuedRangeModel m_model = null;
    private Predicate m_filter = null;
    
    // screen coordinate range
    private double m_min;
    private double m_range;
    
    public AxisLayout(String group, String field) {
        super(group);
        m_field = field;
    }
    
    public AxisLayout(String group, String field, int axis) {
        this(group, field);
        setAxis(axis);
    }
    
    public AxisLayout(String group, String field, int axis, Predicate filter) {
        this(group, field, axis);
        setFilter(filter);
    }

    // ------------------------------------------------------------------------
    
    public void setRangeModel(ValuedRangeModel model) {
        m_model = model;
        m_modelSet = (model != null);
    }
    
    public ValuedRangeModel getRangeModel() {
        return m_model;
    }
    
    public void setFilter(Predicate filter) {
        m_filter = filter;
    }
    
    // ------------------------------------------------------------------------
    
    public int getScale() {
        return m_scale;
    }
    
    public void setScale(int scale) {
        if ( scale < 0 || scale >= Constants.SCALE_COUNT )
            throw new IllegalArgumentException(
                    "Unrecognized scale value: "+scale);
        m_scale = scale;
    }
    
    public int getAxis() {
        return m_axis;
    }
    
    public void setAxis(int axis) {
        if ( axis < 0 || axis >= Constants.AXIS_COUNT )
            throw new IllegalArgumentException(
                    "Unrecognized axis value: "+axis);
        m_axis = axis;
    }
    
    public int getDataType() {
        return m_type;
    }
    
    public void setDataType(int type) {
        if ( type < 0 || type >= Constants.DATATYPE_COUNT )
            throw new IllegalArgumentException(
                    "Unrecognized data type value: "+type);
        m_type = type;
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see prefuse.action.layout.Layout#run(double)
     */
    public void run(double frac) {
        TupleSet ts = m_vis.getGroup(m_group);
        if ( !(ts instanceof Table) ) {
            throw new IllegalStateException(); // TODO: flesh this out?
        }
        setMinMax();
        
        Table t = (Table)ts;
        switch ( getDataType(t) ) {
        case Constants.NUMERICAL:
            numericalLayout(t);
            break;
        default:
            ordinalLayout(t);
        }
    }
    
    protected int getDataType(Table t) {
        if ( m_type == Constants.UNKNOWN ) {
            if ( t.canGetDouble(m_field) ) {
                return Constants.NUMERICAL;
            } else {
                return Constants.ORDINAL;
            }
        } else {
            return m_type;
        }
    }
    
    protected void setMinMax() {
        Rectangle2D b = getLayoutBounds();
        if ( m_axis == Constants.X_AXIS ) {
            m_min = b.getMinX();
            m_range = b.getMaxX() - m_min;
        } else {
            m_min = b.getMaxY();
            m_range = b.getMinY() - m_min;
        }
    }
    
    protected void set(VisualItem item, double frac) {
        double xOrY = m_min + frac*m_range;
        if ( m_axis == Constants.X_AXIS ) {
            setX(item, null, xOrY);
        } else {
            setY(item, null, xOrY);
        }
    }
    
    protected void numericalLayout(Table t) {
        double lo, hi;
        if ( !m_modelSet ) {
            ColumnMetadata md = t.getMetadata(m_field);
            lo = t.getDouble(m_field, md.getMinimumRow());
            hi = t.getDouble(m_field, md.getMaximumRow());
            
            Double dlo = new Double(lo), dhi = new Double(hi);
            if ( m_model == null ) {
                m_model = new NumberRangeModel(lo,hi,lo,hi);
            } else {
                ((NumberRangeModel)m_model).setValueRange(dlo, dhi, dlo, dhi);
            }
        } else {
            lo = ((Number)m_model.getLowValue()).doubleValue();
            hi = ((Number)m_model.getHighValue()).doubleValue();
        }
        
        Iterator iter = m_vis.items(m_group, m_filter);
        while ( iter.hasNext() ) {
            VisualItem item = (VisualItem)iter.next();
            double v = item.getDouble(m_field);
            double f = MathLib.interp(m_scale, v, lo, hi);
            set(item, f);
        }
    }
    
    protected void ordinalLayout(Table t) {
        if ( !m_modelSet) {
            ColumnMetadata md = t.getMetadata(m_field);
            Object[] array = md.getOrdinalArray();
            if ( m_model == null ) {
                m_model = new ObjectRangeModel(array);
            } else {
                ((ObjectRangeModel)m_model).setValueRange(array);
            }
        }
        
        ObjectRangeModel model = (ObjectRangeModel)m_model;
        double unique = model.getMaximum();
        
        Iterator iter = m_vis.items(m_group, m_filter);
        while ( iter.hasNext() ) {
            VisualItem item = (VisualItem)iter.next();
            double order = model.getIndex(item.get(m_field));
            set(item, order/unique);
        }
    }
    
} // end of class AxisLayout
@


1.1.2.2
log
@Ordinal layout now handles filtering correctly
@
text
@d198 1
a198 3
        int start = model.getValue();
        int end = start + model.getExtent();
        double total = (double)(end-start);
d203 2
a204 2
            int order = model.getIndex(item.get(m_field)) - start;
            set(item, order/total);
@


1.1.2.3
log
@Table method refactoring. Added PredicateChain, included in ColorFunction, SizeFunction, and RendererFactory. Added ItemBoundsListener, included in GraphView demo. Updated ColorMap to use int representation, moved palette creators to ColorLib. Added minExtent to JRangeSlider. Fixed round-off rendering glitches int optimized rendering, added RenderingAccuracy test class. Updated PrefuseConfig to support logging output to file system. Added DelmitedTextTableWriter. Added CompositeTupleSet. Added directionality to edges, increased support to EdgeRenderer, including reversed directionality.
@
text
@d163 2
a164 2
            lo = t.getDouble(md.getMinimumRow(), m_field);
            hi = t.getDouble(md.getMaximumRow(), m_field);
@


1.1.2.4
log
@Lots of javadoc
@
text
@d18 2
a19 2
 * LAyout Action that assigns positions along a single dimension
 * (either x or y) according to a specified data field.
d21 1
a21 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a39 5
    /**
     * Create a new AxisLayout. Defaults to using the x-axis.
     * @@param group the data group to layout
     * @@param field the data field upon which to base the layout
     */
a44 7
    /**
     * Create a new AxisLayout.
     * @@param group the data group to layout
     * @@param field the data field upon which to base the layout
     * @@param axis the axis type, either {@@link prefuse.Constants#X_AXIS}
     * or {@@link prefuse.Constants#Y_AXIS}.
     */
a49 9
    /**
     * Create a new AxisLayout.
     * @@param group the data group to layout
     * @@param field the data field upon which to base the layout
     * @@param axis the axis type, either {@@link prefuse.Constants#X_AXIS}
     * or {@@link prefuse.Constants#Y_AXIS}.
     * @@param filter an optional predicate filter for limiting which items
     * to layout.
     */
a56 7
    /**
     * Set the range model determing the span of the axis. This model controls
     * the minimum and maximum values of the layout, as provided by the
     * {@@link prefuse.util.ui.ValuedRangeModel#getLowValue()} and
     * {@@link prefuse.util.ui.ValuedRangeModel#getHighValue()} methods.
     * @@param model the range model for the axis.
     */
a61 7
    /**
     * Get the range model determing the span of the axis. This model controls
     * the minimum and maximum values of the layout, as provided by the
     * {@@link prefuse.util.ui.ValuedRangeModel#getLowValue()} and
     * {@@link prefuse.util.ui.ValuedRangeModel#getHighValue()} methods.
     * @@return the range model for the axis.
     */
a65 6
    /**
     * Set a predicate filter to limit which items are considered for layout.
     * Only items for which the predicate returns a true value are included
     * in the layout computation. 
     * @@param filter the predicate filter to use
     */
a71 9
    /**
     * Returns the scale type used for the axis. This setting only applies
     * for numerical data types (i.e., when axis values are from a
     * <code>NumberValuedRange</code>).
     * @@return the scale type. One of
     * {@@link prefuse.Constants.LINEAR_SCALE}, 
     * {@@link prefuse.Constants.SQRT_SCALE}, or
     * {@@link Constants.LOG_SCALE}.
     */
a75 9
    /**
     * Sets the scale type used for the axis. This setting only applies
     * for numerical data types (i.e., when axis values are from a
     * <code>NumberValuedRange</code>).
     * @@param scale the scale type. One of
     * {@@link prefuse.Constants.LINEAR_SCALE}, 
     * {@@link prefuse.Constants.SQRT_SCALE}, or
     * {@@link Constants.LOG_SCALE}.
     */
a82 5
    /**
     * Return the axis type of this layout, either
     * {@@link prefuse.Constants#X_AXIS} or {@@link prefuse.Constants#Y_AXIS}.
     * @@return the axis type of this layout.
     */
d86 1
a86 6

    /**
     * Set the axis type of this layout.
     * @@param axis the axis type to use for this layout, either
     * {@@link prefuse.Constants#X_AXIS} or {@@link prefuse.Constants#Y_AXIS}.
     */
a93 7
    /**
     * Return the data type used by this layout. This value is one of
     * {@@link prefuse.Constants#NOMINAL}, {@@link prefuse.Constants#ORDINAL},
     * {@@link prefuse.Constants#NUMERICAL}, or
     * {@@link prefuse.Constants#UNKNOWN}.
     * @@return the data type used by this layout
     */
a97 7
    /**
     * Set the data type used by this layout.
     * @@param type the data type used by this layout, one of
     * {@@link prefuse.Constants#NOMINAL}, {@@link prefuse.Constants#ORDINAL},
     * {@@link prefuse.Constants#NUMERICAL}, or
     * {@@link prefuse.Constants#UNKNOWN}.
     */
d108 1
a108 1
     * @@see prefuse.action.Action#run(double)
a126 3
    /**
     * Retrieve the data type.
     */
a138 3
    /**
     * Set the minimum and maximum axis values.
     */
a149 3
    /**
     * Set the layout position of an item.
     */
a158 3
    /**
     * Compute a quantitative axis layout.
     */
a185 3
    /**
     * Compute an ordinal axis layout.
     */
@


1.1.2.5
log
@Javadoc'd.
@
text
@d118 3
a120 3
     * {@@link prefuse.Constants#LINEAR_SCALE}, 
     * {@@link prefuse.Constants#SQRT_SCALE}, or
     * {@@link Constants#LOG_SCALE}.
d131 3
a133 3
     * {@@link prefuse.Constants#LINEAR_SCALE}, 
     * {@@link prefuse.Constants#SQRT_SCALE}, or
     * {@@link Constants#LOG_SCALE}.
@


