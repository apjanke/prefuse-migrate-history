head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.20;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.20;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.36;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.action.layout.graph;

import java.awt.geom.Rectangle2D;
import java.util.Iterator;
import java.util.Random;

import prefuse.action.layout.Layout;
import prefuse.data.Graph;
import prefuse.data.Schema;
import prefuse.data.tuple.TupleSet;
import prefuse.util.PrefuseLib;
import prefuse.visual.EdgeItem;
import prefuse.visual.NodeItem;
import prefuse.visual.VisualItem;


/**
 * <p>Layout instance implementing the Fruchterman-Reingold algorithm for
 * force-directed placement of graph nodes. The computational complexity of
 * this algorithm is quadratic [O(n^2)] in the number of nodes, so should
 * only be applied for relatively small graphs, particularly in interactive
 * situations.</p>
 * 
 * <p>This implementation was ported from the implementation in the
 * <a href="http://jung.sourceforge.net/">JUNG</a> framework.</p>
 * 
 * @@author Scott White, Yan-Biao Boey, Danyel Fisher
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class FruchtermanReingoldLayout extends Layout {

    private double forceConstant;
    private double temp;
    private int maxIter = 700;
    
    protected String m_nodeGroup;
    protected String m_edgeGroup;
    protected int m_fidx;
    
    private static final double EPSILON = 0.000001D;
    private static final double ALPHA = 0.1;
    
    /**
     * Create a new FruchtermanReingoldLayout.
     * @@param graph the data field to layout. Must resolve to a Graph instance.
     */
    public FruchtermanReingoldLayout(String graph) {
        this(graph, 700);
    }
    
    /**
     * Create a new FruchtermanReingoldLayout
     * @@param graph the data field to layout. Must resolve to a Graph instance.
     * @@param maxIter the maximum number of iterations of the algorithm to run
     */
    public FruchtermanReingoldLayout(String graph, int maxIter) {
        super(graph);
        m_nodeGroup = PrefuseLib.getGroupName(graph, Graph.NODES);
        m_edgeGroup = PrefuseLib.getGroupName(graph, Graph.EDGES);
        this.maxIter = maxIter;
    }
    
    /**
     * Get the maximum number of iterations to run of this algorithm.
     * @@return the maximum number of iterations
     */
    public int getMaxIterations() {
        return maxIter;
    }
    
    /**
     * Set the maximum number of iterations to run of this algorithm.
     * @@param maxIter the maximum number of iterations to use
     */
    public void setMaxIterations(int maxIter) {
        this.maxIter = maxIter;
    }
    
    /**
     * @@see prefuse.action.Action#run(double)
     */
    public void run(double frac) {
        Graph g = (Graph)m_vis.getGroup(m_group);
        Rectangle2D bounds = super.getLayoutBounds();
        init(g, bounds);

        for (int curIter=0; curIter < maxIter; curIter++ ) {

            // Calculate repulsion
            for (Iterator iter = g.nodes(); iter.hasNext();) {
                NodeItem n = (NodeItem)iter.next();
                if (n.isFixed()) continue;
                calcRepulsion(g, n);
            }

            // Calculate attraction
            for (Iterator iter = g.edges(); iter.hasNext();) {
                EdgeItem e = (EdgeItem) iter.next();
                calcAttraction(e);
            }

            for (Iterator iter = g.nodes(); iter.hasNext();) {
                NodeItem n = (NodeItem)iter.next();
                if (n.isFixed()) continue;
                calcPositions(n,bounds);
            }

            cool(curIter);
        }
        
        finish(g);
    }
    
    private void init(Graph g, Rectangle2D b) {
        initSchema(g.getNodes());
        
        temp = b.getWidth() / 10;
        forceConstant = 0.75 * 
            Math.sqrt(b.getHeight()*b.getWidth()/g.getNodeCount());
        
        // initialize node positions
        Iterator nodeIter = g.nodes();
        Random rand = new Random(42); // get a deterministic layout result
        double scaleW = ALPHA*b.getWidth()/2;
        double scaleH = ALPHA*b.getHeight()/2;
        while ( nodeIter.hasNext() ) {
            NodeItem n = (NodeItem)nodeIter.next();
            Params np = getParams(n);
            np.loc[0] = b.getCenterX() + rand.nextDouble()*scaleW;
            np.loc[1] = b.getCenterY() + rand.nextDouble()*scaleH;
        }
    }
    
    private void finish(Graph g) {
        Iterator nodeIter = g.nodes();
        while ( nodeIter.hasNext() ) {
            NodeItem n = (NodeItem)nodeIter.next();
            Params np = getParams(n);
            setX(n, null, np.loc[0]);
            setY(n, null, np.loc[1]);
        }
    }
    
    public void calcPositions(NodeItem n, Rectangle2D b) {
        Params np = getParams(n);
        double deltaLength = Math.max(EPSILON,
                Math.sqrt(np.disp[0]*np.disp[0] + np.disp[1]*np.disp[1]));
        
        double xDisp = np.disp[0]/deltaLength * Math.min(deltaLength, temp);

        if (Double.isNaN(xDisp)) {
            System.err.println("Mathematical error... (calcPositions:xDisp)");
         }

        double yDisp = np.disp[1]/deltaLength * Math.min(deltaLength, temp);
        
        np.loc[0] += xDisp;
        np.loc[1] += yDisp;

        // don't let nodes leave the display
        double borderWidth = b.getWidth() / 50.0;
        double x = np.loc[0];
        if (x < b.getMinX() + borderWidth) {
            x = b.getMinX() + borderWidth + Math.random() * borderWidth * 2.0;
        } else if (x > (b.getMaxX() - borderWidth)) {
            x = b.getMaxX() - borderWidth - Math.random() * borderWidth * 2.0;
        }

        double y = np.loc[1];
        if (y < b.getMinY() + borderWidth) {
            y = b.getMinY() + borderWidth + Math.random() * borderWidth * 2.0;
        } else if (y > (b.getMaxY() - borderWidth)) {
            y = b.getMaxY() - borderWidth - Math.random() * borderWidth * 2.0;
        }

        np.loc[0] = x;
        np.loc[1] = y;
    }

    public void calcAttraction(EdgeItem e) {
        NodeItem n1 = e.getSourceItem();
        Params n1p = getParams(n1);
        NodeItem n2 = e.getTargetItem();
        Params n2p = getParams(n2);
        
        double xDelta = n1p.loc[0] - n2p.loc[0];
        double yDelta = n1p.loc[1] - n2p.loc[1];

        double deltaLength = Math.max(EPSILON, 
                Math.sqrt(xDelta*xDelta + yDelta*yDelta));
        double force = (deltaLength*deltaLength) / forceConstant;

        if (Double.isNaN(force)) {
            System.err.println("Mathematical error...");
        }

        double xDisp = (xDelta/deltaLength) * force;
        double yDisp = (yDelta/deltaLength) * force;
        
        n1p.disp[0] -= xDisp; n1p.disp[1] -= yDisp;
        n2p.disp[0] += xDisp; n2p.disp[1] += yDisp;
    }

    public void calcRepulsion(Graph g, NodeItem n1) {
        Params np = getParams(n1);
        np.disp[0] = 0.0; np.disp[1] = 0.0;

        for (Iterator iter2 = g.nodes(); iter2.hasNext();) {
            NodeItem n2 = (NodeItem) iter2.next();
            Params n2p = getParams(n2);
            if (n2.isFixed()) continue;
            if (n1 != n2) {
                double xDelta = np.loc[0] - n2p.loc[0];
                double yDelta = np.loc[1] - n2p.loc[1];

                double deltaLength = Math.max(EPSILON, 
                        Math.sqrt(xDelta*xDelta + yDelta*yDelta));

                double force = (forceConstant*forceConstant) / deltaLength;

                if (Double.isNaN(force)) {
                    System.err.println("Mathematical error...");
                }

                np.disp[0] += (xDelta/deltaLength)*force;
                np.disp[1] += (yDelta/deltaLength)*force;
            }
        }
    }
    
    private void cool(int curIter) {
        temp *= (1.0 - curIter / (double) maxIter);
    }

    // ------------------------------------------------------------------------
    // Params Schema
    
    /**
     * The data field in which the parameters used by this layout are stored.
     */
    public static final String PARAMS = "_fruchtermanReingoldParams";
    /**
     * The schema for the parameters used by this layout.
     */
    public static final Schema PARAMS_SCHEMA = new Schema();
    static {
        PARAMS_SCHEMA.addColumn(PARAMS, Params.class);
    }
    
    protected void initSchema(TupleSet ts) {
        try {
            ts.addColumns(PARAMS_SCHEMA);
        } catch ( IllegalArgumentException iae ) {};
    }
    
    private Params getParams(VisualItem item) {
        Params rp = (Params)item.get(PARAMS);
        if ( rp == null ) {
            rp = new Params();
            item.set(PARAMS, rp);
        }
        return rp;
    }
    
    /**
     * Wrapper class holding parameters used for each node in this layout.
     */
    public static class Params implements Cloneable {
        double[] loc = new double[2];
        double[] disp = new double[2];
    }
    
} // end of class FruchtermanReingoldLayout
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d4 1
d23 1
a23 1
 *
d26 1
a26 1
 *
d35 1
a35 1

d39 1
a39 1

d42 1
a42 1

d50 1
a50 1

d62 1
a62 1

d70 1
a70 1

d78 1
a78 1

d82 2
a83 3
    @@Override
	public void run(double frac) {
        Graph<?,? extends NodeItem<?,?>,? extends EdgeItem<?,?>> g = (Graph<?,? extends NodeItem<?,?>,? extends EdgeItem<?,?>>) m_vis.getGroup(m_group);
d90 3
a92 4
        	for(NodeItem<?,?> n : g.nodes()) {
                if (n.isFixed()) {
					continue;
				}
d97 2
a98 1
            for (EdgeItem<?,?> e : g.edges()) {
d102 3
a104 4
        	for(NodeItem<?,?> n : g.nodes()) {
                if (n.isFixed()) {
					continue;
				}
d110 1
a110 1

d113 2
a114 2

    private void init(Graph<?,? extends NodeItem<?,?>,? extends EdgeItem<?,?>> g, Rectangle2D b) {
d116 1
a116 1

d118 1
a118 1
        forceConstant = 0.75 *
d120 1
a120 1

d122 1
d126 2
a127 1
    	for(NodeItem<?,?> n : g.nodes()) {
d133 5
a137 3

    private void finish(Graph<?,? extends NodeItem<?,?>,? extends EdgeItem<?,?>> g) {
    	for(NodeItem<?,?> n : g.nodes()) {
d143 2
a144 2

    public void calcPositions(NodeItem<?,?> n, Rectangle2D b) {
d148 1
a148 1

d156 1
a156 1

d165 1
a165 1
        } else if (x > b.getMaxX() - borderWidth) {
d172 1
a172 1
        } else if (y > b.getMaxY() - borderWidth) {
d180 2
a181 2
    public void calcAttraction(EdgeItem<?,?> e) {
        NodeItem<?,?> n1 = e.getSourceNode();
d183 1
a183 1
        NodeItem<?,?> n2 = e.getTargetNode();
d185 1
a185 1

d189 1
a189 1
        double deltaLength = Math.max(EPSILON,
d191 1
a191 1
        double force = deltaLength*deltaLength / forceConstant;
d197 3
a199 3
        double xDisp = xDelta/deltaLength * force;
        double yDisp = yDelta/deltaLength * force;

d204 1
a204 1
    public void calcRepulsion(Graph<?,? extends NodeItem<?,?>,? extends EdgeItem<?,?>> g, NodeItem<?,?> n1) {
d208 2
a209 1
        for(NodeItem<?,?> n2 : g.nodes()) {
d211 1
a211 3
            if (n2.isFixed()) {
				continue;
			}
d216 1
a216 1
                double deltaLength = Math.max(EPSILON,
d219 1
a219 1
                double force = forceConstant*forceConstant / deltaLength;
d225 2
a226 2
                np.disp[0] += xDelta/deltaLength*force;
                np.disp[1] += yDelta/deltaLength*force;
d230 1
a230 1

d232 1
a232 1
        temp *= 1.0 - curIter / (double) maxIter;
d237 1
a237 1

d249 2
a250 2

    protected void initSchema(TupleSet<?> ts) {
d255 2
a256 2

    private Params getParams(VisualItem<?> item) {
d264 1
a264 1

d272 1
a272 1

@


1.1
log
@file FruchtermanReingoldLayout.java was initially added on branch beta.
@
text
@d1 273
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 244
package prefuse.action.layout.graph;

import java.awt.geom.Rectangle2D;
import java.util.Iterator;
import java.util.Random;

import prefuse.action.layout.Layout;
import prefuse.data.Graph;
import prefuse.data.Schema;
import prefuse.data.Table;
import prefuse.util.PrefuseLib;
import prefuse.visual.EdgeItem;
import prefuse.visual.NodeItem;
import prefuse.visual.VisualItem;


/**
 * Implements the Fruchterman-Reingold algorithm for node layout.
 * 
 * Ported from the implementation in the <a href="http://jung.sourceforge.net/">JUNG</a> framework.
 * 
 * @@author Scott White, Yan-Biao Boey, Danyel Fisher
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org</a>
 */
public class FruchtermanReingoldLayout extends Layout {

    private double forceConstant;
    private double temp;
    private int maxIter = 700;
    
    protected String m_nodeGroup;
    protected String m_edgeGroup;
    protected int m_fidx;
    
    private static final double EPSILON = 0.000001D;
    private static final double ALPHA = 0.1;
    
    public FruchtermanReingoldLayout(String graph) {
        this(graph, 700);
    } //
    
    public FruchtermanReingoldLayout(String graph, int maxIter) {
        super(graph);
        m_nodeGroup = PrefuseLib.getGroupName(graph, Graph.NODE_TABLE);
        m_edgeGroup = PrefuseLib.getGroupName(graph, Graph.EDGE_TABLE);
        this.maxIter = maxIter;
    } //
    
    public int getMaxIterations() {
        return maxIter;
    } //
    
    public void setMaxIterations(int maxIter) {
        this.maxIter = maxIter;
    } //
    
    /**
     * @@see prefuse.action.Action#run(prefuse.a_old.ItemRegistry, double)
     */
    public void run(double frac) {
        Graph g = (Graph)m_vis.getGroup(m_group);
        Rectangle2D bounds = super.getLayoutBounds();
        init(g, bounds);

        for (int curIter=0; curIter < maxIter; curIter++ ) {

            // Calculate repulsion
            for (Iterator iter = g.getNodes(); iter.hasNext();) {
                NodeItem n = (NodeItem)iter.next();
                if (n.isFixed()) continue;
                calcRepulsion(g, n);
            }

            // Calculate attraction
            for (Iterator iter = g.getEdges(); iter.hasNext();) {
                EdgeItem e = (EdgeItem) iter.next();
                calcAttraction(e);
            }

            for (Iterator iter = g.getNodes(); iter.hasNext();) {
                NodeItem n = (NodeItem)iter.next();
                if (n.isFixed()) continue;
                calcPositions(n,bounds);
            }

            cool(curIter);
        }
        
        finish(g);
    } //
    
    private void init(Graph g, Rectangle2D b) {
        initSchema(g.getNodeTable());
        
        temp = b.getWidth() / 10;
        forceConstant = 0.75 * 
        	Math.sqrt(b.getHeight()*b.getWidth()/g.getNodeCount());
        
        // initialize node positions
        Iterator nodeIter = g.getNodes();
        Random rand = new Random(42); // get a deterministic layout result
        double scaleW = ALPHA*b.getWidth()/2;
        double scaleH = ALPHA*b.getHeight()/2;
        while ( nodeIter.hasNext() ) {
            NodeItem n = (NodeItem)nodeIter.next();
            Params np = getParams(n);
            np.loc[0] = b.getCenterX() + rand.nextDouble()*scaleW;
            np.loc[1] = b.getCenterY() + rand.nextDouble()*scaleH;
        }
    } //
    
    private void finish(Graph g) {
        Iterator nodeIter = g.getNodes();
        while ( nodeIter.hasNext() ) {
            NodeItem n = (NodeItem)nodeIter.next();
            Params np = getParams(n);
            setX(n, null, np.loc[0]);
            setY(n, null, np.loc[1]);
        }
    } //
    
    public void calcPositions(NodeItem n, Rectangle2D b) {
        Params np = getParams(n);
        double deltaLength = Math.max(EPSILON,
                Math.sqrt(np.disp[0]*np.disp[0] + np.disp[1]*np.disp[1]));
        
        double xDisp = np.disp[0]/deltaLength * Math.min(deltaLength, temp);

        if (Double.isNaN(xDisp)) {
            System.err.println("Mathematical error... (calcPositions:xDisp)");
         }

        double yDisp = np.disp[1]/deltaLength * Math.min(deltaLength, temp);
        
        np.loc[0] += xDisp;
        np.loc[1] += yDisp;

        // don't let nodes leave the display
        double borderWidth = b.getWidth() / 50.0;
        double x = np.loc[0];
        if (x < b.getMinX() + borderWidth) {
            x = b.getMinX() + borderWidth + Math.random() * borderWidth * 2.0;
        } else if (x > (b.getMaxX() - borderWidth)) {
            x = b.getMaxX() - borderWidth - Math.random() * borderWidth * 2.0;
        }

        double y = np.loc[1];
        if (y < b.getMinY() + borderWidth) {
            y = b.getMinY() + borderWidth + Math.random() * borderWidth * 2.0;
        } else if (y > (b.getMaxY() - borderWidth)) {
            y = b.getMaxY() - borderWidth - Math.random() * borderWidth * 2.0;
        }

        np.loc[0] = x;
        np.loc[1] = y;
    } //

    public void calcAttraction(EdgeItem e) {
        NodeItem n1 = e.getSourceItem();
        Params n1p = getParams(n1);
        NodeItem n2 = e.getTargetItem();
        Params n2p = getParams(n2);
        
        double xDelta = n1p.loc[0] - n2p.loc[0];
        double yDelta = n1p.loc[1] - n2p.loc[1];

        double deltaLength = Math.max(EPSILON, 
                Math.sqrt(xDelta*xDelta + yDelta*yDelta));
        double force = (deltaLength*deltaLength) / forceConstant;

        if (Double.isNaN(force)) {
            System.err.println("Mathematical error...");
        }

        double xDisp = (xDelta/deltaLength) * force;
        double yDisp = (yDelta/deltaLength) * force;
        
        n1p.disp[0] -= xDisp; n1p.disp[1] -= yDisp;
        n2p.disp[0] += xDisp; n2p.disp[1] += yDisp;
    } //

    public void calcRepulsion(Graph g, NodeItem n1) {
        Params np = getParams(n1);
        np.disp[0] = 0.0; np.disp[1] = 0.0;

        for (Iterator iter2 = g.getNodes(); iter2.hasNext();) {
            NodeItem n2 = (NodeItem) iter2.next();
            Params n2p = getParams(n2);
            if (n2.isFixed()) continue;
            if (n1 != n2) {
                double xDelta = np.loc[0] - n2p.loc[0];
                double yDelta = np.loc[1] - n2p.loc[1];

                double deltaLength = Math.max(EPSILON, 
                        Math.sqrt(xDelta*xDelta + yDelta*yDelta));

                double force = (forceConstant*forceConstant) / deltaLength;

                if (Double.isNaN(force)) {
                    System.err.println("Mathematical error...");
                }

                np.disp[0] += (xDelta/deltaLength)*force;
                np.disp[1] += (yDelta/deltaLength)*force;
            }
        }
    } //
    
    private void cool(int curIter) {
        temp *= (1.0 - curIter / (double) maxIter);
    } //

    // ------------------------------------------------------------------------
    // FRParams Schema Addition
    
    public static final String PARAMS = "_fruchtermanReingoldParams";
    public static final Schema PARAMS_SCHEMA = new Schema();
    static {
        PARAMS_SCHEMA.addColumn(PARAMS, Params.class);
    }
    
    protected void initSchema(Table t) {
        // make sure we have parameter items to work with
        if ( (m_fidx=t.getColumnIndex(PARAMS)) == -1 ) {
            t.addColumns(PARAMS_SCHEMA);
            m_fidx = t.getColumnIndex(PARAMS);
        }
    }
    
    private Params getParams(VisualItem item) {
        Params rp = (Params)item.getValueAt(m_fidx);
        if ( rp == null ) {
            rp = new Params();
            item.setValueAt(rp, m_fidx);
        }
        return rp;
    }
    
    public static class Params implements Cloneable {
        double[] loc = new double[2];
        double[] disp = new double[2];
    }
    
} // end of class FruchtermanReingoldLayout
@


1.1.2.2
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@d10 1
a10 1
import prefuse.data.tuple.TupleSet;
d44 2
a45 2
        m_nodeGroup = PrefuseLib.getGroupName(graph, Graph.NODES);
        m_edgeGroup = PrefuseLib.getGroupName(graph, Graph.EDGES);
d68 1
a68 1
            for (Iterator iter = g.nodes(); iter.hasNext();) {
d75 1
a75 1
            for (Iterator iter = g.edges(); iter.hasNext();) {
d80 1
a80 1
            for (Iterator iter = g.nodes(); iter.hasNext();) {
d93 1
a93 1
        initSchema(g.getNodes());
d100 1
a100 1
        Iterator nodeIter = g.nodes();
d113 1
a113 1
        Iterator nodeIter = g.nodes();
d186 1
a186 1
        for (Iterator iter2 = g.nodes(); iter2.hasNext();) {
d222 6
a227 4
    protected void initSchema(TupleSet ts) {
    	try {
    		ts.addColumns(PARAMS_SCHEMA);
    	} catch ( IllegalArgumentException iae ) {};
d231 1
a231 1
        Params rp = (Params)item.get(PARAMS);
d234 1
a234 1
            item.set(PARAMS, rp);
@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d97 1
a97 1
            Math.sqrt(b.getHeight()*b.getWidth()/g.getNodeCount());
d223 3
a225 3
        try {
            ts.addColumns(PARAMS_SCHEMA);
        } catch ( IllegalArgumentException iae ) {};
@


1.1.2.4
log
@Lots of javadoc
@
text
@d18 1
a18 5
 * <p>Layout instance implementing the Fruchterman-Reingold algorithm for
 * force-directed placement of graph nodes. The computational complexity of
 * this algorithm is quadratic [O(n^2)] in the number of nodes, so should
 * only be applied for relatively small graphs, particularly in interactive
 * situations.</p>
d20 1
a20 2
 * <p>This implementation was ported from the implementation in the
 * <a href="http://jung.sourceforge.net/">JUNG</a> framework.</p>
d23 1
a23 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a37 4
    /**
     * Create a new FruchtermanReingoldLayout.
     * @@param graph the data field to layout. Must resolve to a Graph instance.
     */
d40 1
a40 1
    }
a41 5
    /**
     * Create a new FruchtermanReingoldLayout
     * @@param graph the data field to layout. Must resolve to a Graph instance.
     * @@param maxIter the maximum number of iterations of the algorithm to run
     */
d47 1
a47 1
    }
a48 4
    /**
     * Get the maximum number of iterations to run of this algorithm.
     * @@return the maximum number of iterations
     */
d51 1
a51 1
    }
a52 4
    /**
     * Set the maximum number of iterations to run of this algorithm.
     * @@param maxIter the maximum number of iterations to use
     */
d55 1
a55 1
    }
d58 1
a58 1
     * @@see prefuse.action.Action#run(double)
d90 1
a90 1
    }
d110 1
a110 1
    }
d120 1
a120 1
    }
d156 1
a156 1
    }
d180 1
a180 1
    }
d207 1
a207 1
    }
d211 1
a211 1
    }
d214 1
a214 1
    // Params Schema
a215 3
    /**
     * The data field in which the parameters used by this layout are stored.
     */
a216 3
    /**
     * The schema for the parameters used by this layout.
     */
a236 3
    /**
     * Wrapper class holding parameters used for each node in this layout.
     */
@


