head	2.2;
access;
symbols
	java_1_5:2.2.0.4
	Root_java_1_5:2.2
	beta:2.2.0.2
	beta-20080113:2.2
	beta-20071021:2.2
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.2
date	2006.03.13.05.48.37;	author jheer;	state Exp;
branches
	2.2.4.1;
next	2.1;

2.1
date	2006.03.09.17.57.44;	author jheer;	state Exp;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.20;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.16.20.07.42;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.01.23.23.07.20;	author jheer;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2006.02.01.19.22.43;	author jheer;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2006.02.07.00.42.53;	author jheer;	state Exp;
branches;
next	;

2.2.4.1
date	2008.01.23.23.55.36;	author jogiles;	state Exp;
branches;
next	2.2.4.2;

2.2.4.2
date	2008.04.01.02.52.04;	author amarsden;	state Exp;
branches;
next	;


desc
@@


2.2
log
@Added validity check for previous parent node
@
text
@package prefuse.action.layout.graph;

import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import prefuse.data.Graph;
import prefuse.data.Node;
import prefuse.data.Schema;
import prefuse.data.tuple.TupleSet;
import prefuse.util.ArrayLib;
import prefuse.util.MathLib;
import prefuse.visual.NodeItem;


/**
 * <p>TreeLayout instance that computes a radial layout, laying out subsequent
 * depth levels of a tree on circles of progressively increasing radius.
 * </p>
 * 
 * <p>The algorithm used is that of Ka-Ping Yee, Danyel Fisher, Rachna Dhamija,
 * and Marti Hearst in their research paper
 * <a href="http://citeseer.ist.psu.edu/448292.html">Animated Exploration of
 * Dynamic Graphs with Radial Layout</a>, InfoVis 2001. This algorithm computes
 * a radial layout which factors in possible variation in sizes, and maintains
 * both orientation and ordering constraints to facilitate smooth and
 * understandable transitions between layout configurations.
 * </p>
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class RadialTreeLayout extends TreeLayout {
    
    public static final int DEFAULT_RADIUS = 50;
    private static final int MARGIN = 30;

    protected int m_maxDepth = 0;
    protected double m_radiusInc;
    protected double m_theta1, m_theta2;
    protected boolean m_setTheta = false;
    protected boolean m_autoScale = true;
    
    protected Point2D m_origin;
    protected NodeItem m_prevRoot;
    
    /**
     * Creates a new RadialTreeLayout. Automatic scaling of the radius
     * values to fit the layout bounds is enabled by default.
     * @@param group the data group to process. This should resolve to
     * either a Graph or Tree instance.
     */
    public RadialTreeLayout(String group) {
        super(group);
        m_radiusInc = DEFAULT_RADIUS;
        m_prevRoot = null;
        m_theta1 = 0;
        m_theta2 = m_theta1 + MathLib.TWO_PI;
    }
    
    /**
     * Creates a new RadialTreeLayout using the specified radius increment
     * between levels of the layout. Automatic scaling of the radius values
     * is disabled by default.
     * @@param group the data group to process. This should resolve to
     * either a Graph or Tree instance.
     * @@param radius the radius increment to use between subsequent rings
     * in the layout.
     */
    public RadialTreeLayout(String group, int radius) {
        this(group);
        m_radiusInc = radius;
        m_autoScale = false;
    }

    /**
     * Set the radius increment to use between concentric circles. Note
     * that this value is used only if auto-scaling is disabled.
     * @@return the radius increment between subsequent rings of the layout
     * when auto-scaling is disabled
     */
    public double getRadiusIncrement() {
        return m_radiusInc;
    }
    
    /**
     * Set the radius increment to use between concentric circles. Note
     * that this value is used only if auto-scaling is disabled.
     * @@param inc the radius increment between subsequent rings of the layout
     * @@see #setAutoScale(boolean)
     */
    public void setRadiusIncrement(double inc) {
        m_radiusInc = inc;
    }

    /**
     * Indicates if the layout automatically scales to fit the layout bounds.
     * @@return true if auto-scaling is enabled, false otherwise
     */
    public boolean getAutoScale() {
        return m_autoScale;
    }
    
    /**
     * Set whether or not the layout should automatically scale itself
     * to fit the layout bounds.
     * @@param s true to automatically scale to fit display, false otherwise
     */
    public void setAutoScale(boolean s) {
        m_autoScale = s;
    }

    /**
     * Constrains this layout to the specified angular sector
     * @@param theta the starting angle, in radians
     * @@param width the angular width, in radians
     */
    public void setAngularBounds(double theta, double width) {
        m_theta1 = theta;
        m_theta2 = theta+width;
        m_setTheta = true;
    }

    /**
     * @@see prefuse.action.Action#run(double)
     */
    public void run(double frac) {
        Graph g = (Graph)m_vis.getGroup(m_group);
        initSchema(g.getNodes());
        
        m_origin = getLayoutAnchor();
        NodeItem n = getLayoutRoot();
        Params np = (Params)n.get(PARAMS);
        
        // calc relative widths and maximum tree depth
        // performs one pass over the tree
        m_maxDepth = 0;
        calcAngularWidth(n, 0);
        
        if ( m_autoScale ) setScale(getLayoutBounds());
        if ( !m_setTheta ) calcAngularBounds(n);
                
        // perform the layout
        if ( m_maxDepth > 0 )
            layout(n, m_radiusInc, m_theta1, m_theta2);
        
        // update properties of the root node
        setX(n, null, m_origin.getX());
        setY(n, null, m_origin.getY());
        np.angle = m_theta2-m_theta1;
    }
    
    protected void setScale(Rectangle2D bounds) {
        double r = Math.min(bounds.getWidth(),bounds.getHeight())/2.0;
        if ( m_maxDepth > 0 )
            m_radiusInc = (r-MARGIN)/m_maxDepth;
    }

    /**
     * Calculates the angular bounds of the layout, attempting to
     * preserve the angular orientation of the display across transitions.
     */
    private void calcAngularBounds(NodeItem r) {
        if ( m_prevRoot == null || !m_prevRoot.isValid() || r == m_prevRoot )
        {
            m_prevRoot = r;
            return;
        }
        
        // try to find previous parent of root
        NodeItem p = m_prevRoot;
        while ( true ) {
            NodeItem pp = (NodeItem)p.getParent();
            if ( pp == r ) {
                break;
            } else if ( pp == null ) {
                m_prevRoot = r;
                return;
            }
            p = pp;
        }

        // compute offset due to children's angular width
        double dt = 0;
        Iterator iter = sortedChildren(r);
        while ( iter.hasNext() ) {
            Node n = (Node)iter.next();
            if ( n == p ) break;
            dt += ((Params)n.get(PARAMS)).width;
        }
        double rw = ((Params)r.get(PARAMS)).width;
        double pw = ((Params)p.get(PARAMS)).width;
        dt = -MathLib.TWO_PI * (dt+pw/2)/rw;

        // set angular bounds
        m_theta1 = dt + Math.atan2(p.getY()-r.getY(), p.getX()-r.getX());
        m_theta2 = m_theta1 + MathLib.TWO_PI;
        m_prevRoot = r;     
    }

    /**
     * Computes relative measures of the angular widths of each
     * expanded subtree. Node diameters are taken into account
     * to improve space allocation for variable-sized nodes.
     * 
     * This method also updates the base angle value for nodes 
     * to ensure proper ordering of nodes.
     */
    private double calcAngularWidth(NodeItem n, int d) {
        if ( d > m_maxDepth ) m_maxDepth = d;       
        double aw = 0;
        
        Rectangle2D bounds = n.getBounds();
        double w = bounds.getWidth(), h = bounds.getHeight();
        double diameter = d==0 ? 0 : Math.sqrt(w*w+h*h) / d;
        
        if ( n.isExpanded() && n.getChildCount() > 0 ) {
            Iterator childIter = n.children();
            while ( childIter.hasNext() ) {
                NodeItem c = (NodeItem)childIter.next();
                aw += calcAngularWidth(c,d+1);
            }
            aw = Math.max(diameter, aw);
        } else {
            aw = diameter;
        }
        ((Params)n.get(PARAMS)).width = aw;
        return aw;
    }
    
    private static final double normalize(double angle) {
        while ( angle > MathLib.TWO_PI ) {
            angle -= MathLib.TWO_PI;
        }
        while ( angle < 0 ) {
            angle += MathLib.TWO_PI;
        }
        return angle;
    }
    
    private Iterator sortedChildren(final NodeItem n) {
        double base = 0;
        // update base angle for node ordering
        NodeItem p = (NodeItem)n.getParent();
        if ( p != null ) {
            base = normalize(Math.atan2(p.getY()-n.getY(), p.getX()-n.getX()));
        }
        int cc = n.getChildCount();
        if ( cc == 0 ) return null;

        NodeItem c = (NodeItem)n.getFirstChild();
        
        // TODO: this is hacky and will break when filtering
        // how to know that a branch is newly expanded?
        // is there an alternative property we should check?
        if ( !c.isStartVisible() ) {
            // use natural ordering for previously invisible nodes
            return n.children();
        }
        
        double angle[] = new double[cc];
        final int idx[] = new int[cc];
        for ( int i=0; i<cc; ++i, c=(NodeItem)c.getNextSibling() ) {
            idx[i] = i;
            angle[i] = normalize(-base +
                Math.atan2(c.getY()-n.getY(), c.getX()-n.getX()));
        }
        ArrayLib.sort(angle, idx);
        
        // return iterator over sorted children
        return new Iterator() {
            int cur = 0;
            public Object next() {
                return n.getChild(idx[cur++]);
            }
            public boolean hasNext() {
                return cur < idx.length;
            }
            public void remove() {
                throw new UnsupportedOperationException();
            }
        };
    }
    
    /**
     * Compute the layout.
     * @@param n the root of the current subtree under consideration
     * @@param r the radius, current distance from the center
     * @@param theta1 the start (in radians) of this subtree's angular region
     * @@param theta2 the end (in radians) of this subtree's angular region
     */
    protected void layout(NodeItem n, double r, double theta1, double theta2) {
        double dtheta  = (theta2-theta1);
        double dtheta2 = dtheta / 2.0;
        double width = ((Params)n.get(PARAMS)).width;
        double cfrac, nfrac = 0.0;
        
        Iterator childIter = sortedChildren(n);
        while ( childIter != null && childIter.hasNext() ) {
            NodeItem c = (NodeItem)childIter.next();
            Params cp = (Params)c.get(PARAMS);
            cfrac = cp.width / width;
            if ( c.isExpanded() && c.getChildCount()>0 ) {
                layout(c, r+m_radiusInc, theta1 + nfrac*dtheta, 
                                         theta1 + (nfrac+cfrac)*dtheta);
            }
            setPolarLocation(c, n, r, theta1 + nfrac*dtheta + cfrac*dtheta2);
            cp.angle = cfrac*dtheta;
            nfrac += cfrac;
        }
        
    }

    /**
     * Set the position of the given node, given in polar co-ordinates.
     * @@param n the NodeItem to set the position
     * @@param p the referrer parent NodeItem
     * @@param r the radius
     * @@param t the angle theta
     */
    protected void setPolarLocation(NodeItem n, NodeItem p, double r, double t) {
        setX(n, p, m_origin.getX() + r*Math.cos(t));
        setY(n, p, m_origin.getY() + r*Math.sin(t));
    }
    
    // ------------------------------------------------------------------------
    // Params
    
    /**
     * The data field in which the parameters used by this layout are stored.
     */
    public static final String PARAMS = "_radialTreeLayoutParams";
    /**
     * The schema for the parameters used by this layout.
     */
    public static final Schema PARAMS_SCHEMA = new Schema();
    static {
        PARAMS_SCHEMA.addColumn(PARAMS, Params.class, new Params());
    }
    
    protected void initSchema(TupleSet ts) {
        ts.addColumns(PARAMS_SCHEMA);
    }
    
    /**
     * Wrapper class holding parameters used for each node in this layout.
     */
    public static class Params implements Cloneable {
        double width;
        double angle;
        public Object clone() {
            Params p = new Params();
            p.width = this.width;
            p.angle = this.angle;
            return p;
        }
    }

} // end of class RadialTreeLayout
@


2.2.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@a5 1
import java.util.List;
d8 1
a12 1
import prefuse.visual.EdgeItem;
d20 1
a20 1
 *
d29 1
a29 1
 *
d33 1
a33 1

d42 1
a42 1

d44 2
a45 2
    protected NodeItem<?,?> m_prevRoot;

d59 1
a59 1

d84 1
a84 1

d102 1
a102 1

d126 2
a127 3
    @@Override
	public void run(double frac) {
        Graph<?,? extends NodeItem<?,?>,? extends EdgeItem<?,?>> g = (Graph<?,? extends NodeItem<?,?>,? extends EdgeItem<?,?>>)m_vis.getGroup(m_group);
d129 1
a129 1

d131 1
a131 1
        NodeItem<?,?> n = getLayoutRoot();
d133 1
a133 1

d138 4
a141 8

        if ( m_autoScale ) {
			setScale(getLayoutBounds());
		}
        if ( !m_setTheta ) {
			calcAngularBounds(n);
		}

d143 3
a145 4
        if ( m_maxDepth > 0 ) {
			layout(n, m_radiusInc, m_theta1, m_theta2);
		}

d151 1
a151 1

d154 2
a155 3
        if ( m_maxDepth > 0 ) {
			m_radiusInc = (r-MARGIN)/m_maxDepth;
		}
d162 1
a162 1
    private void calcAngularBounds(NodeItem<?,?> r) {
d168 1
a168 1

d170 1
a170 1
        NodeItem<?,?> p = m_prevRoot;
d172 1
a172 1
        	NodeItem<?,?> pp = p.getParent();
d184 4
a187 4
        for(NodeItem<?,?> n : sortedChildren(r)) {
            if ( n == p ) {
				break;
			}
d197 1
a197 1
        m_prevRoot = r;
d204 2
a205 2
     *
     * This method also updates the base angle value for nodes
d208 2
a209 4
    private double calcAngularWidth(NodeItem<?,?> n, int d) {
        if ( d > m_maxDepth ) {
			m_maxDepth = d;
		}
d211 1
a211 1

d215 5
a219 3

        if ( n.isExpanded() && !n.children().isEmpty()) {
        	for(NodeItem<?,?> c : n.children()) {
d229 1
a229 1

d239 2
a240 2

    private Iterable<? extends NodeItem<?,?>> sortedChildren(final NodeItem<?,?> n) {
d243 1
a243 1
        NodeItem<?,?> p = n.getParent();
d247 2
d250 2
a251 8
        final List<NodeItem<?,?>> children = (List<NodeItem<?,?>>) (Object) n.children();
        int cc = n.children().size();
        if ( cc == 0 ) {
			return null;
		}

        NodeItem<?,?> c = children.get(0);

d257 1
a257 1
            return children;
d259 1
a259 1

d262 1
a262 1
        for ( int i=0; i<cc; ++i, c=c.getNextSibling() ) {
d268 1
a268 1

d270 11
a280 15
        return new Iterable<NodeItem<?,?>>() {
			public Iterator<NodeItem<?, ?>> iterator() {
				return new Iterator<NodeItem<?,?>>() {
		            int cur = 0;
		            public NodeItem<?,?> next() {
		                return children.get(idx[cur++]);
		            }
		            public boolean hasNext() {
		                return cur < idx.length;
		            }
		            public void remove() {
		                throw new UnsupportedOperationException();
		            }
				};
			}
d283 1
a283 1

d291 2
a292 2
    protected void layout(NodeItem<?,?> n, double r, double theta1, double theta2) {
        double dtheta  = theta2-theta1;
d296 4
a299 6

        for(NodeItem<?,?> c : sortedChildren(n)) {
        	// TODO: is this check really necessary?
        	if(c == null) {
        		break;
        	}
d302 2
a303 2
            if ( c.isExpanded() && !c.children().isEmpty() ) {
                layout(c, r+m_radiusInc, theta1 + nfrac*dtheta,
d310 1
a310 1

d320 1
a320 1
    protected void setPolarLocation(NodeItem<?,?> n, NodeItem<?,?> p, double r, double t) {
d324 1
a324 1

d327 1
a327 1

d339 2
a340 2

    protected void initSchema(TupleSet<?> ts) {
d343 1
a343 1

d350 1
a350 2
        @@Override
		public Object clone() {
@


2.2.4.2
log
@minor improvement
@
text
@d257 1
a257 1
        int cc = children.size();
@


2.1
log
@Refactored margin value to a constant
@
text
@d163 2
a164 1
        if ( m_prevRoot == null || r == m_prevRoot ) {
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d35 1
d155 1
a155 1
            m_radiusInc = (r-30)/m_maxDepth;
@


1.1
log
@file RadialTreeLayout.java was initially added on branch beta.
@
text
@d1 356
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 232
package prefuse.action.layout.graph;

import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import prefuse.data.Schema;
import prefuse.data.Table;
import prefuse.data.Tree;
import prefuse.data.tuple.TreeNode;
import prefuse.visual.NodeItem;
import prefuse.visual.VisualItem;


/**
 * Performs tree layout using a radial layout, laying out subsequent depth
 * levels of a tree on circles of progressively increasing radius.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class RadialTreeLayout extends TreeLayout {
    
    public static final int DEFAULT_RADIUS = 50;
    protected static final double TWO_PI = 2*Math.PI;

    protected int m_maxDepth = 0;
    protected double m_radiusInc;
    protected double m_startTheta, m_endTheta;
    protected boolean m_setTheta = false;
    protected boolean m_autoScale = true;
    
    protected Point2D m_origin;
    protected TreeNode m_prevParent;
    protected NodeItem m_pfocus, m_focus;
    
    public RadialTreeLayout() {
        this(DEFAULT_RADIUS);
    } //
    
    public RadialTreeLayout(int radius) {
        m_radiusInc  = radius;
        m_prevParent = null;
        m_startTheta = 0;
        m_endTheta = TWO_PI;
    } //

    public double getRadiusIncrement() {
        return m_radiusInc;
    } //
    
    public void setRadiusIncrement(double inc) {
        m_radiusInc = inc;
    } //

    public boolean getAutoScale() {
        return m_autoScale;
    } //
    
    public void setAutoScale(boolean s) {
        m_autoScale = s;
    } //

    public void setStartTheta(double t) {
        m_startTheta = t;
        m_setTheta = true;
    } //
    
    public void setEndTheta(double t) {
        m_endTheta = t;
        m_setTheta = true;
    } //

    public void run(double frac) {
        Tree t = (Tree)m_vis.getGroup(m_group);
        initSchema(t.getNodeTable());
        
        m_origin = getLayoutAnchor();
        NodeItem n = getLayoutRoot();
        Params np = getParams(n);
        
        // count maximum tree depth and number of tree leaves
        m_maxDepth = 0;
        countVisibleDescendants(n, 0);
        
        if ( m_autoScale ) setScale(getLayoutBounds());
//        if ( !m_setTheta && m_pfocus != null ) {
//            NodeItem p = getPrevParent(m_focus, m_pfocus);
//            m_startTheta = calcStartingTheta(n, p);
//            m_endTheta = m_startTheta + TWO_PI;
//        }
        setX(n, null, m_origin.getX());
        setY(n, null, m_origin.getY());
        
        np.angle = m_endTheta-m_startTheta;
        layout(n, m_radiusInc, m_startTheta, m_endTheta);
        m_prevParent = null;
    } //
    
    protected void setScale(Rectangle2D bounds) {
        double r = Math.min(bounds.getWidth(),bounds.getHeight())/2.0;
        if ( m_maxDepth > 0 )
            m_radiusInc = (r-40)/m_maxDepth;
    } //

//    private NodeItem getPrevParent(NodeItem f, NodeItem pf) {
//        for (; pf!=null && pf.getParent()!=f; pf=(NodeItem)pf.getParent());
//        return pf;
//    } //
//    
//    private double calcStartingTheta(NodeItem n, NodeItem p) {
//        if ( p == null ) { return 0; }
//        
//        //Point2D ploc = p.getLocation();
//        //Point2D nloc = n.getLocation();
//        
//        double ptheta = Math.atan2(p.getY()-n.getY(), p.getX()-n.getX());
//        int pidx = n.getChildIndex(p);
//        int nD = getParams(n).numDescendants;
//        int pD = getParams(p).numDescendants;
//        int cD = 0;
//        for ( int i = 0; i < pidx; ++i )
//            cD += getParams((NodeItem)n.getChild(i)).numDescendants;
//        double f = (cD + ((double)pD) / 2.0) / ((double)nD);    
//        return ptheta - f*TWO_PI;       
//    } //

    /**
     * Computes the number of visible descendant leaf nodes for each visible
     * node.
     */
    private int countVisibleDescendants(NodeItem n, int d) {
        if ( d > m_maxDepth ) m_maxDepth = d;       
        int count = 0;
        if ( n.getChildCount() > 0 ) {
            Iterator childIter = n.getChildren();
            while ( childIter.hasNext() ) {
                NodeItem c = (NodeItem)childIter.next();
                count += countVisibleDescendants(c,d+1);
            }
        } else {
            count = 1;
        }
        getParams(n).numDescendants = count;
        return count;
    } //
    
    /**
     * Compute the layout.
     * @@param n
     * @@param r
     * @@param theta1
     * @@param theta2
     */
    protected void layout(NodeItem n, double r, double theta1, double theta2) {
        int numDescendants = getParams(n).numDescendants;
        if ( numDescendants == 0 )
            return; // nothing to do, so exit

        double dtheta  = (theta2-theta1);
        double dtheta2 = dtheta / 2.0;

        double frac, f = 0.0;

        Iterator childIter = n.getChildren();
        while ( childIter.hasNext() ) {
            NodeItem c = (NodeItem)childIter.next();
            Params cp = getParams(c);
            frac = ((double)cp.numDescendants)/numDescendants;
            setPolarLocation(c, n, r, theta1 + f*dtheta + frac*dtheta2);
            cp.angle = frac*dtheta;
            layout(c, r+m_radiusInc, theta1 + f*dtheta, 
                               theta1 + (f+frac)*dtheta);
            f += frac;
        }
    } //

    /**
     * Set the position of the given node, given in polar co-ordinates.
     * @@param n
     * @@param r
     * @@param theta
     */
    protected void setPolarLocation(NodeItem n, NodeItem p, double r, double t) {
        setX(n, p, m_origin.getX() + r*Math.cos(t));
        setY(n, p, m_origin.getY() + r*Math.sin(t));
    } //
    
//    public void focusChanged(FocusEvent e) {
//        if ( e.getEventType() != FocusEvent.FOCUS_SET )
//            return;
//        Entity focus  = e.getFirstAdded();
//        Entity pfocus = e.getFirstRemoved();
//        if ( focus instanceof Node && pfocus instanceof Node ) {
//            m_focus = m_registry.getNodeItem((Node)focus);
//            m_pfocus = m_registry.getNodeItem((Node)pfocus);
//        } else {
//            m_pfocus = m_focus;
//            m_focus = null;
//        }
//    } //
    
    // ------------------------------------------------------------------------
    // Params
    
    public static final String PARAMS = "_radialTreeLayoutParams";
    public static final Schema PARAMS_SCHEMA = new Schema();
    static {
        PARAMS_SCHEMA.addColumn(PARAMS, Params.class);
    }
    
    protected void initSchema(Table t) {
        // make sure we have parameter items to work with
        if ( t.getColumnIndex(PARAMS) == -1 )
            t.addColumns(PARAMS_SCHEMA);
    }
    
    private Params getParams(VisualItem item) {
        Params rp = (Params)item.get(PARAMS);
        if ( rp == null ) {
            rp = new Params();
            item.set(rp, PARAMS);
        }
        return rp;
    } //
    
    public static class Params {
        int numDescendants;
        double angle;
    } //

} // end of class RadialTreeLayout
@


1.1.2.2
log
@Table method refactoring. Added PredicateChain, included in ColorFunction, SizeFunction, and RendererFactory. Added ItemBoundsListener, included in GraphView demo. Updated ColorMap to use int representation, moved palette creators to ColorLib. Added minExtent to JRangeSlider. Fixed round-off rendering glitches int optimized rendering, added RenderingAccuracy test class. Updated PrefuseConfig to support logging output to file system. Added DelmitedTextTableWriter. Added CompositeTupleSet. Added directionality to edges, increased support to EdgeRenderer, including reversed directionality.
@
text
@d222 1
a222 1
            item.set(PARAMS, rp);
@


1.1.2.3
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@a6 1
import prefuse.data.Graph;
d8 3
a10 4
import prefuse.data.tuple.Node;
import prefuse.data.tuple.TupleSet;
import prefuse.util.ArrayLib;
import prefuse.util.MathLib;
d12 1
d25 1
d29 1
a29 1
    protected double m_theta1, m_theta2;
d34 2
a35 1
    protected NodeItem m_prevRoot;
d37 10
a46 28
    /**
     * Creates a new RadialTreeLayout. Automatic scaling of the radius
     * values to fit the layout bounds is enabled by default.
     * @@param group the data group to process. This should resolve to
     * either a Graph or Tree instance.
     */
    public RadialTreeLayout(String group) {
        super(group);
        m_radiusInc = DEFAULT_RADIUS;
        m_prevRoot = null;
        m_theta1 = 0;
        m_theta2 = m_theta1 + MathLib.TWO_PI;
    }
    
    /**
     * Creates a new RadialTreeLayout using the specified radius increment
     * between levels of the layout. Automatic scaling of the radius values
     * is disabled by default.
     * @@param group the data group to process. This should resolve to
     * either a Graph or Tree instance.
     * @@param radius the radius increment to use between subsequent rings
     * in the layout.
     */
    public RadialTreeLayout(String group, int radius) {
    	this(group);
        m_radiusInc = radius;
        m_autoScale = false;
    }
a47 6
    /**
     * Set the radius increment to use between concentric circles. Note
     * that this value is used only if auto-scaling is disabled.
     * @@return the radius increment between subsequent rings of the layout
     * when auto-scaling is disabled
     */
d50 1
a50 1
    }
a51 6
    /**
     * Set the radius increment to use between concentric circles. Note
     * that this value is used only if auto-scaling is disabled.
     * @@param inc the radius increment between subsequent rings of the layout
     * @@see #setAutoScale(boolean)
     */
d54 1
a54 1
    }
a55 4
    /**
     * Indicates if the layout automatically scales to fit the layout bounds.
     * @@return true if auto-scaling is enabled, false otherwise
     */
d58 1
a58 1
    }
a59 5
    /**
     * Set whether or not the layout should automatically scale itself
     * to fit the layout bounds.
     * @@param s true to automatically scale to fit display, false otherwise
     */
d62 1
a62 1
    }
d64 7
a70 8
    /**
     * Constrains this layout to the specified angular sector
     * @@param theta the starting angle, in radians
     * @@param width the angular width, in radians
     */
    public void setAngularBounds(double theta, double width) {
        m_theta1 = theta;
        m_theta2 = theta+width;
d72 1
a72 1
    }
a73 3
    /**
     * @@see prefuse.action.Action#run(double)
     */
d75 2
a76 2
        Graph g = (Graph)m_vis.getGroup(m_group);
        initSchema(g.getNodes());
d80 1
a80 1
        Params np = (Params)n.get(PARAMS);
d82 1
a82 2
        // calc relative widths and maximum tree depth
        // performs one pass over the tree
d84 1
a84 1
        calcAngularWidth(n, 0);
d87 5
a91 7
        if ( !m_setTheta ) calcAngularBounds(n);
                
        // perform the layout
        if ( m_maxDepth > 0 )
        	layout(n, m_radiusInc, m_theta1, m_theta2);
        
        // update properties of the root node
d94 5
a98 2
        np.angle = m_theta2-m_theta1;
    }
d103 2
a104 2
            m_radiusInc = (r-30)/m_maxDepth;
    }
d106 21
a126 40
    /**
     * Calculates the angular bounds of the layout, attempting to
     * preserve the angular orientation of the display across transitions.
     */
    private void calcAngularBounds(NodeItem r) {
        if ( m_prevRoot == null || r == m_prevRoot ) {
        	m_prevRoot = r;
        	return;
        }
        
        // try to find previous parent of root
        NodeItem p = m_prevRoot;
        while ( true ) {
        	NodeItem pp = (NodeItem)p.getParent();
        	if ( pp == r ) {
        		break;
        	} else if ( pp == null ) {
        		m_prevRoot = r;
        		return;
        	}
        	p = pp;
        }

        // compute offset due to children's angular width
        double dt = 0;
        Iterator iter = sortedChildren(r);
        while ( iter.hasNext() ) {
        	Node n = (Node)iter.next();
        	if ( n == p ) break;
        	dt += ((Params)n.get(PARAMS)).width;
        }
        double rw = ((Params)r.get(PARAMS)).width;
        double pw = ((Params)p.get(PARAMS)).width;
        dt = -MathLib.TWO_PI * (dt+pw/2)/rw;

        // set angular bounds
        m_theta1 = dt + Math.atan2(p.getY()-r.getY(), p.getX()-r.getX());
        m_theta2 = m_theta1 + MathLib.TWO_PI;
        m_prevRoot = r;     
    }
d129 2
a130 6
     * Computes relative measures of the angular widths of each
     * expanded subtree. Node diameters are taken into account
     * to improve space allocation for variable-sized nodes.
     * 
     * This method also updates the base angle value for nodes 
     * to ensure proper ordering of nodes.
d132 1
a132 1
    private double calcAngularWidth(NodeItem n, int d) {
d134 3
a136 8
        double aw = 0;
        
        Rectangle2D bounds = n.getBounds();
        double w = bounds.getWidth(), h = bounds.getHeight();
        double diameter = d==0 ? 0 : Math.sqrt(w*w+h*h) / d;
        
        if ( n.isExpanded() && n.getChildCount() > 0 ) {
            Iterator childIter = n.children();
d139 1
a139 1
                aw += calcAngularWidth(c,d+1);
a140 1
            aw = Math.max(diameter, aw);
d142 1
a142 1
            aw = diameter;
d144 3
a146 57
        ((Params)n.get(PARAMS)).width = aw;
        return aw;
    }
    
    private static final double normalize(double angle) {
    	while ( angle > MathLib.TWO_PI ) {
			angle -= MathLib.TWO_PI;
		}
		while ( angle < 0 ) {
			angle += MathLib.TWO_PI;
		}
		return angle;
    }
    
    private Iterator sortedChildren(final NodeItem n) {
    	double base = 0;
    	// update base angle for node ordering
    	NodeItem p = (NodeItem)n.getParent();
    	if ( p != null ) {
    		base = normalize(Math.atan2(p.getY()-n.getY(), p.getX()-n.getX()));
    	}
    	int cc = n.getChildCount();
    	if ( cc == 0 ) return null;

    	NodeItem c = (NodeItem)n.getFirstChild();
    	
    	// TODO: this is hacky and will break when filtering
    	// how to know that a branch is newly expanded?
    	// is there an alternative property we should check?
    	if ( !c.isStartVisible() ) {
    		// use natural ordering for previously invisible nodes
    		return n.children();
    	}
    	
    	double angle[] = new double[cc];
    	final int idx[] = new int[cc];
    	for ( int i=0; i<cc; ++i, c=(NodeItem)c.getNextSibling() ) {
    		idx[i] = i;
    		angle[i] = normalize(-base +
    			Math.atan2(c.getY()-n.getY(), c.getX()-n.getX()));
    	}
    	ArrayLib.sort(angle, idx);
    	
    	// return iterator over sorted children
    	return new Iterator() {
    		int cur = 0;
    		public Object next() {
    			return n.getChild(idx[cur++]);
    		}
    		public boolean hasNext() {
    			return cur < idx.length;
    		}
    		public void remove() {
    			throw new UnsupportedOperationException();
    		}
    	};
    }
d150 4
a153 4
     * @@param n the root of the current subtree under consideration
     * @@param r the radius, current distance from the center
     * @@param theta1 the start (in radians) of this subtree's angular region
     * @@param theta2 the end (in radians) of this subtree's angular region
d156 4
d162 5
a166 5
        double width = ((Params)n.get(PARAMS)).width;
        double cfrac, nfrac = 0.0;
        
        Iterator childIter = sortedChildren(n);
        while ( childIter != null && childIter.hasNext() ) {
d168 7
a174 9
            Params cp = (Params)c.get(PARAMS);
            cfrac = cp.width / width;
            if ( c.isExpanded() && c.getChildCount()>0 ) {
            	layout(c, r+m_radiusInc, theta1 + nfrac*dtheta, 
            							 theta1 + (nfrac+cfrac)*dtheta);
            }
            setPolarLocation(c, n, r, theta1 + nfrac*dtheta + cfrac*dtheta2);
            cp.angle = cfrac*dtheta;
            nfrac += cfrac;
d176 1
a176 2
        
    }
d187 15
a201 1
    }
d209 1
a209 1
        PARAMS_SCHEMA.addColumn(PARAMS, Params.class, new Params());
d212 4
a215 2
    protected void initSchema(TupleSet ts) {
    	ts.addColumns(PARAMS_SCHEMA);
d218 11
a228 2
    public static class Params implements Cloneable {
        double width;
d230 1
a230 7
        public Object clone() {
        	Params p = new Params();
        	p.width = this.width;
        	p.angle = this.angle;
        	return p;
        }
    }
@


1.1.2.4
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d60 1
a60 1
        this(group);
d134 1
a134 1
            layout(n, m_radiusInc, m_theta1, m_theta2);
d154 2
a155 2
            m_prevRoot = r;
            return;
d161 8
a168 8
            NodeItem pp = (NodeItem)p.getParent();
            if ( pp == r ) {
                break;
            } else if ( pp == null ) {
                m_prevRoot = r;
                return;
            }
            p = pp;
d175 3
a177 3
            Node n = (Node)iter.next();
            if ( n == p ) break;
            dt += ((Params)n.get(PARAMS)).width;
d220 7
a226 7
        while ( angle > MathLib.TWO_PI ) {
            angle -= MathLib.TWO_PI;
        }
        while ( angle < 0 ) {
            angle += MathLib.TWO_PI;
        }
        return angle;
d230 41
a270 41
        double base = 0;
        // update base angle for node ordering
        NodeItem p = (NodeItem)n.getParent();
        if ( p != null ) {
            base = normalize(Math.atan2(p.getY()-n.getY(), p.getX()-n.getX()));
        }
        int cc = n.getChildCount();
        if ( cc == 0 ) return null;

        NodeItem c = (NodeItem)n.getFirstChild();
        
        // TODO: this is hacky and will break when filtering
        // how to know that a branch is newly expanded?
        // is there an alternative property we should check?
        if ( !c.isStartVisible() ) {
            // use natural ordering for previously invisible nodes
            return n.children();
        }
        
        double angle[] = new double[cc];
        final int idx[] = new int[cc];
        for ( int i=0; i<cc; ++i, c=(NodeItem)c.getNextSibling() ) {
            idx[i] = i;
            angle[i] = normalize(-base +
                Math.atan2(c.getY()-n.getY(), c.getX()-n.getX()));
        }
        ArrayLib.sort(angle, idx);
        
        // return iterator over sorted children
        return new Iterator() {
            int cur = 0;
            public Object next() {
                return n.getChild(idx[cur++]);
            }
            public boolean hasNext() {
                return cur < idx.length;
            }
            public void remove() {
                throw new UnsupportedOperationException();
            }
        };
d292 2
a293 2
                layout(c, r+m_radiusInc, theta1 + nfrac*dtheta, 
                                         theta1 + (nfrac+cfrac)*dtheta);
d323 1
a323 1
        ts.addColumns(PARAMS_SCHEMA);
d330 4
a333 4
            Params p = new Params();
            p.width = this.width;
            p.angle = this.angle;
            return p;
@


1.1.2.5
log
@Lots of javadoc
@
text
@d17 2
a18 3
 * <p>TreeLayout instance that computes a radial layout, laying out subsequent
 * depth levels of a tree on circles of progressively increasing radius.
 * </p>
d20 2
a21 10
 * <p>The algorithm used is that of Ka-Ping Yee, Danyel Fisher, Rachna Dhamija,
 * and Marti Hearst in their research paper
 * <a href="http://citeseer.ist.psu.edu/448292.html">Animated Exploration of
 * Dynamic Graphs with Radial Layout</a>, InfoVis 2001. This algorithm computes
 * a radial layout which factors in possible variation in sizes, and maintains
 * both orientation and ordering constraints to facilitate smooth and
 * understandable transitions between layout configurations.
 * </p>
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a315 3
    /**
     * The data field in which the parameters used by this layout are stored.
     */
a316 3
    /**
     * The schema for the parameters used by this layout.
     */
a325 3
    /**
     * Wrapper class holding parameters used for each node in this layout.
     */
@


1.1.2.6
log
@Javadoc'd.
@
text
@d313 3
a315 4
     * @@param n the NodeItem to set the position
     * @@param p the referrer parent NodeItem
     * @@param r the radius
     * @@param t the angle theta
@


1.1.2.7
log
@Intermediate commit in run-up to release.
Upgraded Tuple, Node, and Edge to the data package.
Renamed "Function" classes to "Action" classes.
Added Shape to VisualItem Schema.
Added ShapeActions, moved Shape constants to Constants interface.
Added Background image handling to the Display class.
Added social network data file.
@
text
@a7 1
import prefuse.data.Node;
d9 1
@


