head	1.3;
access;
symbols
	java_1_5:1.3.0.4
	Root_java_1_5:1.3
	beta:1.3.0.2
	beta-20080113:1.3
	beta-20071021:1.3;
locks; strict;
comment	@# @;


1.3
date	2006.03.08.19.12.58;	author jheer;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2006.03.06.00.34.55;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.27.04.02.14;	author jheer;	state Exp;
branches;
next	;

1.3.4.1
date	2008.01.23.23.55.45;	author jogiles;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Added remove and clear methods to PredicateChain
@
text
@/**
 * Copyright (c) 2004-2006 Regents of the University of California.
 * See "license-prefuse.txt" for licensing terms.
 */
package prefuse.action;

import prefuse.Visualization;
import prefuse.data.expression.Expression;
import prefuse.data.expression.ExpressionVisitor;
import prefuse.data.expression.ObjectLiteral;
import prefuse.data.expression.Predicate;
import prefuse.util.PredicateChain;
import prefuse.visual.VisualItem;

/**
 * ItemAction instance that can also maintain a collection of rule mappings
 * that can be used by subclasses to create particular rule-mappings for
 * encoding data values.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public abstract class EncoderAction extends ItemAction {

    private PredicateChain m_chain = null;
    
    /**
     * Create a new EncoderAction that processes all data groups.
     */
    public EncoderAction() {
        super();
    }
    
    /**
     * Create a new EncoderAction that processes all groups.
     * @@param vis the {@@link prefuse.Visualization} to process
     * @@see Visualization#ALL_ITEMS
     */
    public EncoderAction(Visualization vis) {
        super(vis);
    }
    
    /**
     * Create a new EncoderAction that processes the specified group.
     * @@param group the name of the group to process
     */
    public EncoderAction(String group) {
        super(group);
    }
    
    /**
     * Create a new EncoderAction that processes the specified group.
     * @@param group the name of the group to process
     * @@param filter the filtering {@@link prefuse.data.expression.Predicate}
     */
    public EncoderAction(String group, Predicate filter) {
        super(group, filter);
    }
    
    /**
     * Create a new EncoderAction that processes the specified group.
     * @@param vis the {@@link prefuse.Visualization} to process
     * @@param group the data group to process
     */
    public EncoderAction(Visualization vis, String group) {
        super(vis, group);
    }
    
    /**
     * Create a new EncoderAction that processes the specified group.
     * @@param vis the {@@link prefuse.Visualization} to process
     * @@param group the name of the group to process
     * @@param filter the filtering {@@link prefuse.data.expression.Predicate}
     */
    public EncoderAction(Visualization vis, String group, Predicate filter) {
        super(vis, group, filter);
    }
    
    // ------------------------------------------------------------------------

    /**
     * Add a mapping rule to this EncoderAction. This method is protected,
     * subclasses should crate public add methods of their own to enforce
     * their own type constraints.
     * @@param p the rule Predicate 
     * @@param value the value to map to
     */
    protected void add(Predicate p, Object value) {
        if ( m_chain == null ) m_chain = new PredicateChain();
        if ( value instanceof Action )
            ((Action)value).setVisualization(m_vis);
        m_chain.add(p, value);
    }
    
    /**
     * Lookup the value mapped to by the given item.
     * @@param item the item to lookup
     * @@return the result of the rule lookup
     */
    protected Object lookup(VisualItem item) {
        return (m_chain == null ? null : m_chain.get(item));
    }
    
    /**
     * Remove all rule mappings from this encoder.
     */
    public void clear() {
        if ( m_chain != null ) {
            m_chain.clear();
        }
    }
    
    /**
     * Remove rules using the given predicate from this encoder.
     * This method will not remove rules in which this predicate is used
     * within a composite of clauses, such as an AND or OR. It only removes
     * rules using this predicate as the top-level trigger.
     * @@param p the predicate to remove
     * @@return true if a rule was successfully removed, false otherwise
     */
    public boolean remove(Predicate p) {
        return ( m_chain != null ? m_chain.remove(p) : false );
    }
    
    /**
     * @@see prefuse.action.Action#setVisualization(prefuse.Visualization)
     */
    public void setVisualization(Visualization vis) {
        super.setVisualization(vis);
        if ( m_chain != null )
            m_chain.getExpression().visit(new SetVisualizationVisitor());
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see prefuse.action.Action#run(double)
     */
    public void run(double frac) {
        setup();
        if ( m_chain != null )
            m_chain.getExpression().visit(SetupVisitor.getInstance());
        
        super.run(frac);
        
        if ( m_chain != null )
            m_chain.getExpression().visit(FinishVisitor.getInstance());
        finish();
    }
    
    /**
     * Perform any necessary setup before this encoder can be used. By default
     * does nothing. Subclasses can override this method to perform custom
     * setup before the Action is used.
     */
    protected void setup() {
        // do nothing be default
    }
    
    /**
     * Perform any necessary clean-up after this encoder can be used. By
     * default does nothing. Subclasses can override this method to perform
     * custom clean-up after the Action is used.
     */
    protected void finish() {
        // do nothing be default
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * Abstract class for processing the Actions stored in the predicate chain.
     */
    private static abstract class ActionVisitor implements ExpressionVisitor {
        public void visitExpression(Expression expr) {
            if ( expr instanceof ObjectLiteral ) {
                Object val = expr.get(null);
                if ( val instanceof Action )
                    visitAction(((Action)val));
            }
        }
        public abstract void visitAction(Action a);
        public void down() { /* do nothing */ }
        public void up()   { /* do nothing */ }
    }
    
    /**
     * Sets the visualization status for any Actions contained within the
     * predicate chain.
     */
    private class SetVisualizationVisitor extends ActionVisitor {
        public void visitAction(Action a) {
            a.setVisualization(m_vis);
        }
    }
    
    /**
     * Calls the "setup" method for any delegate actions contained within
     * the rule-mappings for this encoder.
     */
    private static class SetupVisitor extends ActionVisitor {
        private static SetupVisitor s_instance;
        public static SetupVisitor getInstance() {
            if ( s_instance == null )
                s_instance = new SetupVisitor();
            return s_instance;
        }
        public void visitAction(Action a) {
            if ( a instanceof EncoderAction )
                ((EncoderAction)a).setup();
        }
    }
    
    /**
     * Calls the "setup" method for any delegate actions contained within
     * the rule-mappings for this encoder.
     */
    private static class FinishVisitor extends ActionVisitor {
        private static FinishVisitor s_instance;
        public static FinishVisitor getInstance() {
            if ( s_instance == null )
                s_instance = new FinishVisitor();
            return s_instance;
        }
        public void visitAction(Action a) {
            if ( a instanceof EncoderAction )
                ((EncoderAction)a).setup();
        }
    }
    
} // end of class EncoderAction@


1.3.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d19 1
a19 1
 *
d25 1
a25 1

d32 1
a32 1

d41 1
a41 1

d49 1
a49 1

d58 1
a58 1

d67 1
a67 1

d77 1
a77 1

d84 1
a84 1
     * @@param p the rule Predicate
d88 3
a90 6
        if ( m_chain == null ) {
			m_chain = new PredicateChain();
		}
        if ( value instanceof Action ) {
			((Action)value).setVisualization(m_vis);
		}
d93 1
a93 1

d99 2
a100 2
    protected Object lookup(VisualItem<?> item) {
        return m_chain == null ? null : m_chain.get(item);
d102 1
a102 1

d111 1
a111 1

d121 1
a121 1
        return m_chain != null ? m_chain.remove(p) : false;
d123 1
a123 1

d127 1
a127 2
    @@Override
	public void setVisualization(Visualization vis) {
d129 2
a130 3
        if ( m_chain != null ) {
			m_chain.getExpression().visit(new SetVisualizationVisitor());
		}
d132 1
a132 1

d134 1
a134 1

d138 1
a138 2
    @@Override
	public void run(double frac) {
d140 3
a142 4
        if ( m_chain != null ) {
			m_chain.getExpression().visit(SetupVisitor.getInstance());
		}

d144 3
a146 4

        if ( m_chain != null ) {
			m_chain.getExpression().visit(FinishVisitor.getInstance());
		}
d149 1
a149 1

d158 1
a158 1

d167 1
a167 1

d169 1
a169 1

d177 2
a178 3
                if ( val instanceof Action ) {
					visitAction(((Action)val));
				}
d185 1
a185 1

d191 1
a191 2
        @@Override
		public void visitAction(Action a) {
d195 1
a195 1

d203 2
a204 3
            if ( s_instance == null ) {
				s_instance = new SetupVisitor();
			}
d207 3
a209 5
        @@Override
		public void visitAction(Action a) {
            if ( a instanceof EncoderAction ) {
				((EncoderAction)a).setup();
			}
d212 1
a212 1

d220 2
a221 3
            if ( s_instance == null ) {
				s_instance = new FinishVisitor();
			}
d224 3
a226 5
        @@Override
		public void visitAction(Action a) {
            if ( a instanceof EncoderAction ) {
				((EncoderAction)a).setup();
			}
d229 1
a229 1

@


1.2
log
@Fixed Javadoc bug
@
text
@d81 3
a83 1
     * Add a mapping rule to this EncoderAction.
d104 21
@


1.1
log
@Added new EncoderAction abstract base class.
Updated assignment package to subclass EncoderAction.
setup() and finish() template methods now allow delegate assignment actions to be properly initialized.
@
text
@d61 1
a62 1
     * @@param defaultFont the default Font to assign
@

