head	2.2;
access;
symbols
	java_1_5:2.2.0.4
	Root_java_1_5:2.2
	beta:2.2.0.2
	beta-20080113:2.2
	beta-20071021:2.2
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.2
date	2006.03.22.18.52.50;	author jheer;	state Exp;
branches
	2.2.4.1;
next	2.1;

2.1
date	2006.03.22.16.32.52;	author jheer;	state Exp;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.20;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.20;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2006.02.10.19.28.38;	author jheer;	state Exp;
branches;
next	;

2.2.4.1
date	2008.01.23.23.55.37;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.2
log
@Added getter/setter methods for filter source groups
@
text
@package prefuse.action.filter;

import java.util.Iterator;

import prefuse.Constants;
import prefuse.Visualization;
import prefuse.action.GroupAction;
import prefuse.data.Graph;
import prefuse.data.Tree;
import prefuse.data.expression.Predicate;
import prefuse.util.PrefuseLib;
import prefuse.visual.EdgeItem;
import prefuse.visual.NodeItem;
import prefuse.visual.VisualItem;
import prefuse.visual.expression.InGroupPredicate;

/**
 * <p>Filter Action that computes a fisheye degree-of-interest function over
 * a tree structure (or the spanning tree of a graph structure). Visibility
 * and DOI (degree-of-interest) values are set for the nodes in the
 * structure. This function includes current focus nodes, and includes 
 * neighbors only in a limited window around these foci. The size of this
 * window is determined by the distance value set for this action. All
 * ancestors of a focus up to the root of the tree are considered foci as well.
 * By convention, DOI values start at zero for focus nodes, with decreasing
 * negative numbers for each hop away from a focus.</p>
 * 
 * <p>This form of filtering was described by George Furnas as early as 1981.
 * For more information about Furnas' fisheye view calculation and DOI values,
 * take a look at G.W. Furnas, "The FISHEYE View: A New Look at Structured 
 * Files," Bell Laboratories Tech. Report, Murray Hill, New Jersey, 1981. 
 * Available online at <a href="http://citeseer.nj.nec.com/furnas81fisheye.html">
 * http://citeseer.nj.nec.com/furnas81fisheye.html</a>.</p>
 *  
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class FisheyeTreeFilter extends GroupAction {

    private String m_sources;
    private Predicate m_groupP;
    
    private int m_threshold;
    
    private NodeItem m_root;
    private double m_divisor;
    
    /**
     * Create a new FisheyeTreeFilter that processes the given group.
     * @@param group the data group to process. This should resolve to
     * a Graph instance, otherwise exceptions will result when this
     * Action is run.
     */
    public FisheyeTreeFilter(String group) {
        this(group, 1);
    }

    /**
     * Create a new FisheyeTreeFilter that processes the given group.
     * @@param group the data group to process. This should resolve to
     * a Graph instance, otherwise exceptions will result when this
     * Action is run.
     * @@param distance the graph distance threshold from high-interest
     * nodes past which nodes will not be visible nor expanded.
     */
    public FisheyeTreeFilter(String group, int distance) {
        this(group, Visualization.FOCUS_ITEMS, distance);
    }
    
    /**
     * Create a new FisheyeTreeFilter that processes the given group.
     * @@param group the data group to process. This should resolve to
     * a Graph instance, otherwise exceptions will result when this
     * Action is run.
     * @@param sources the group to use as source nodes, representing the
     * nodes of highest degree-of-interest.
     * @@param distance the graph distance threshold from high-interest
     * nodes past which nodes will not be visible nor expanded.
     */
    public FisheyeTreeFilter(String group, String sources, int distance)
    {
        super(group);
        m_sources = sources;
        m_threshold = -distance;
        m_groupP = new InGroupPredicate(
                PrefuseLib.getGroupName(group, Graph.NODES));
    }
    
    /**
     * Get the graph distance threshold used by this filter. This
     * is the threshold for high-interest nodes, past which nodes will
     * not be visible nor expanded.
     * @@return the graph distance threshold
     */
    public int getDistance() {
        return -m_threshold;
    }

    /**
     * Set the graph distance threshold used by this filter. This
     * is the threshold for high-interest nodes, past which nodes will
     * not be visible nor expanded.
     * @@param distance the graph distance threshold to use
     */
    public void setDistance(int distance) {
        m_threshold = -distance;
    }
    
    /**
     * Get the name of the group to use as source nodes for measuring
     * graph distance. These form the roots from which the graph distance
     * is measured.
     * @@return the source data group
     */
    public String getSources() {
        return m_sources;
    }
    
    /**
     * Set the name of the group to use as source nodes for measuring
     * graph distance. These form the roots from which the graph distance
     * is measured.
     * @@param sources the source data group
     */
    public void setSources(String sources) {
        m_sources = sources;
    }
    
    /**
     * @@see prefuse.action.GroupAction#run(double)
     */
    public void run(double frac) {
        Tree tree = ((Graph)m_vis.getGroup(m_group)).getSpanningTree();
        m_divisor = tree.getNodeCount();
        m_root = (NodeItem)tree.getRoot();
        
        // mark the items
        Iterator items = m_vis.visibleItems(m_group);
        while ( items.hasNext() ) {
            VisualItem item = (VisualItem)items.next();
            item.setDOI(Constants.MINIMUM_DOI);
            item.setExpanded(false);
        }
        
        // compute the fisheye over nodes
        Iterator iter = m_vis.items(m_sources, m_groupP);
        while ( iter.hasNext() )
            visitFocus((NodeItem)iter.next(), null);
        visitFocus(m_root, null);

        // mark unreached items
        items = m_vis.visibleItems(m_group);
        while ( items.hasNext() ) {
            VisualItem item = (VisualItem)items.next();
            if ( item.getDOI() == Constants.MINIMUM_DOI )
                PrefuseLib.updateVisible(item, false);
        }
    }

    /**
     * Visit a focus node.
     */
    private void visitFocus(NodeItem n, NodeItem c) {
        if ( n.getDOI() <= -1 ) {
            visit(n, c, 0, 0);
            if ( m_threshold < 0 )                 
                visitDescendants(n, c);
            visitAncestors(n);
        }
    }
    
    /**
     * Visit a specific node and update its degree-of-interest.
     */
    private void visit(NodeItem n, NodeItem c, int doi, int ldist) {
        PrefuseLib.updateVisible(n, true);
        double localDOI = -ldist / Math.min(1000.0, m_divisor);
        n.setDOI(doi+localDOI);
        
        if ( c != null ) {
            EdgeItem e = (EdgeItem)c.getParentEdge();
            e.setDOI(c.getDOI());
            PrefuseLib.updateVisible(e, true);
        }
    }
    
    /**
     * Visit tree ancestors and their other descendants.
     */
    private void visitAncestors(NodeItem n) {
        if ( n == m_root ) return;
        visitFocus((NodeItem)n.getParent(), n);
    }
    
    /**
     * Traverse tree descendents.
     */
    private void visitDescendants(NodeItem p, NodeItem skip) {
        int lidx = ( skip == null ? 0 : p.getChildIndex(skip) );
        
        Iterator children = p.children();
        
        p.setExpanded(children.hasNext());
        
        for ( int i=0; children.hasNext(); ++i ) {
            NodeItem c = (NodeItem)children.next();
            if ( c == skip ) { continue; }             
            
            int doi = (int)(p.getDOI()-1);            
            visit(c, c, doi, Math.abs(lidx-i));      
            if ( doi > m_threshold )
                visitDescendants(c, null);   
        }
    }
    
} // end of class FisheyeTreeFilter
@


2.2.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d3 1
a3 1
import java.util.List;
d5 1
d9 1
a10 1
import prefuse.data.tree.DeclarativeTree;
d21 1
a21 1
 * structure. This function includes current focus nodes, and includes
d27 1
a27 1
 *
d30 2
a31 2
 * take a look at G.W. Furnas, "The FISHEYE View: A New Look at Structured
 * Files," Bell Laboratories Tech. Report, Murray Hill, New Jersey, 1981.
d34 1
a34 1
 *
d40 2
a41 2
    private final Predicate m_groupP;

d43 2
a44 2

    private NodeItem<?,?> m_root;
d46 1
a46 1

d68 1
a68 1

d87 1
a87 1

d107 1
a107 1

d117 1
a117 1

d127 1
a127 1

d131 2
a132 3
    @@Override
	public void run(double frac) {
    	DeclarativeTree<?,?> tree = ((Graph<?,?,?>)m_vis.getGroup(m_group)).getSpanningTree();
d134 2
a135 2
        m_root = (NodeItem<?,?>) (Object) tree.getRoot();

d137 4
a140 2
        for(VisualItem<?> item :  m_vis.visibleItems(m_group)) {
            item.setDOI(VisualItem.MINIMUM_DOI);
d143 1
a143 1

d145 3
a147 3
        for(VisualItem<?> item :  m_vis.items(m_sources, m_groupP)) {
			visitFocus((NodeItem<?,?>)item, null);
		}
d151 6
a156 5
        for(VisualItem<?> item :  m_vis.visibleItems(m_group)) {
            if ( item.getDOI() == VisualItem.MINIMUM_DOI ) {
				PrefuseLib.updateVisible(item, false);
			}
    	}
d162 1
a162 1
    private void visitFocus(NodeItem<?,?> n, NodeItem<?,?> c) {
d165 2
a166 3
            if ( m_threshold < 0 ) {
				visitDescendants(n, c);
			}
d170 1
a170 1

d174 1
a174 1
    private void visit(NodeItem<?,?> n, NodeItem<?,?> c, int doi, int ldist) {
d178 1
a178 1

d180 1
a180 1
            EdgeItem<?,?> e = c.getParentEdge();
d185 1
a185 1

d189 3
a191 5
    private void visitAncestors(NodeItem<?,?> n) {
        if ( n == m_root ) {
			return;
		}
        visitFocus(n.getParent(), n);
d193 1
a193 1

d195 1
a195 1
     * Traverse tree descendants.
d198 14
a211 25

    	List<NodeItem<?,?>> pChildren = (List<NodeItem<?,?>>) p.children();

    	int lidx = skip == null ? 0 : pChildren.indexOf(skip);

        boolean hasChildren = false;

        int i = 0;
        for(NodeItem<?,?> c : pChildren) {
        	if(!hasChildren) {
        		hasChildren = true;
        		// TODO: does this need to be done in the loop?
        		p.setExpanded(hasChildren);
        	}
            if ( c == skip ) { continue; }

            int doi = (int)(p.getDOI()-1);
            visit(c, c, doi, Math.abs(lidx-i));
            if ( doi > m_threshold ) {
				this.visitDescendants(c, null);
			}
            i++;
        }
        if(!hasChildren) {
        	p.setExpanded(hasChildren);
d214 1
a214 1

@


2.1
log
@Added getter/setter for distance threshold
@
text
@d109 20
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d89 20
@


1.1
log
@file FisheyeTreeFilter.java was initially added on branch beta.
@
text
@d1 175
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 133
package prefuse.action.filter;

import java.util.Iterator;

import prefuse.Constants;
import prefuse.Visualization;
import prefuse.action.GroupAction;
import prefuse.data.Graph;
import prefuse.data.expression.Predicate;
import prefuse.util.PrefuseLib;
import prefuse.visual.EdgeItem;
import prefuse.visual.NodeItem;
import prefuse.visual.VisualItem;
import prefuse.visual.VisualTree;
import prefuse.visual.expression.InGroupPredicate;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class FisheyeTreeFilter extends GroupAction {

    private String m_sources;
    private Predicate m_groupP;
    
    private int m_threshold;
    
    private NodeItem m_root;
    private double m_divisor;
    
    
    public FisheyeTreeFilter(String group) {
        this(group, 1);
    }
    
    public FisheyeTreeFilter(String group, int distance) {
        this(group, Visualization.FOCUS_ITEMS, distance);
    }
    
    public FisheyeTreeFilter(String group, String sources, int distance)
    {
        super(group);
        m_sources = sources;
        m_threshold = -distance;
        m_groupP = new InGroupPredicate(
                PrefuseLib.getGroupName(group, Graph.NODE_TABLE));
    }
    
    /**
     * @@see prefuse.action.GroupAction#run(double)
     */
    public void run(double frac) {
        // mark the items
        Iterator items = m_vis.visibleItems(m_group);
        while ( items.hasNext() ) {
            VisualItem item = (VisualItem)items.next();
            item.setDOI(Constants.MINIMUM_DOI);
            item.setExpanded(false);
        }

        VisualTree tree = (VisualTree)m_vis.getGroup(m_group);
        m_divisor = tree.getNodeCount();
        m_root = (NodeItem)tree.getRoot();
        
        // compute the fisheye over nodes
        Iterator iter = m_vis.items(m_sources, m_groupP);
        while ( iter.hasNext() )
            visitFocus((NodeItem)iter.next(), null);
        visitFocus(m_root, null);

        // mark unreached items
        items = m_vis.visibleItems(m_group);
        while ( items.hasNext() ) {
            VisualItem item = (VisualItem)items.next();
            if ( item.getDOI() == Constants.MINIMUM_DOI )
                PrefuseLib.updateVisible(item, false);
        }
    }

    private void visitFocus(NodeItem n, NodeItem c) {
        if ( n.getDOI() <= -1 ) {
            visit(n, c, 0, 0);
            if ( m_threshold < 0 )                 
                visitDescendants(n, c);
            visitAncestors(n);
        }
    }
    
    private void visit(NodeItem n, NodeItem c, int doi, int ldist) {
        PrefuseLib.updateVisible(n, true);
        double localDOI = -ldist / Math.min(1000.0, m_divisor);
        n.setDOI(doi+localDOI);
        
        if ( c != null ) {
            EdgeItem e = (EdgeItem)c.getParentEdge();
            e.setDOI(c.getDOI());
            PrefuseLib.updateVisible(e, true);
        }
    }
    
    private void visitAncestors(NodeItem n) {
        if ( n == m_root ) return;
        visitFocus((NodeItem)n.getParent(), n);
    }
    
    private void visitDescendants(NodeItem p, NodeItem skip) {
        int lidx = ( skip == null ? 0 : getChildIndex(p, skip) );
        
        Iterator children = p.getChildren();
        
        p.setExpanded(children.hasNext());
        
        for ( int i=0; children.hasNext(); ++i ) {
            NodeItem c = (NodeItem)children.next();
            if ( c == skip ) { continue; }             
            
            int doi = (int)(p.getDOI()-1);            
            visit(c, c, doi, Math.abs(lidx-i));      
            if ( doi > m_threshold )
                visitDescendants(c, null);   
        }
    }
    
    private int getChildIndex(NodeItem p, NodeItem n) {
        int idx = 0;
        for ( NodeItem c = (NodeItem)p.getFirstChild();
              c != null; c = (NodeItem)c.getNextSibling(), ++idx )
        {
            if ( n == c ) return idx;
        }
        return -1;
    }
    
} // end of class FisheyeTreeFilter
@


1.1.2.2
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@a8 1
import prefuse.data.Tree;
d14 1
d45 1
a45 1
                PrefuseLib.getGroupName(group, Graph.NODES));
d52 1
a52 5
    	Tree tree = ((Graph)m_vis.getGroup(m_group)).getSpanningTree();
        m_divisor = tree.getNodeCount();
        m_root = (NodeItem)tree.getRoot();
    	
    	// mark the items
d59 4
d108 1
a108 1
        Iterator children = p.children();
@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d52 1
a52 1
        Tree tree = ((Graph)m_vis.getGroup(m_group)).getSpanningTree();
d55 2
a56 2
        
        // mark the items
@


1.1.2.4
log
@Lots of javadoc
@
text
@d18 1
a18 18
 * <p>Filter Action that computes a fisheye degree-of-interest function over
 * a tree structure (or the spanning tree of a graph structure). Visibility
 * and DOI (degree-of-interest) values are set for the nodes in the
 * structure. This function includes current focus nodes, and includes 
 * neighbors only in a limited window around these foci. The size of this
 * window is determined by the distance value set for this action. All
 * ancestors of a focus up to the root of the tree are considered foci as well.
 * By convention, DOI values start at zero for focus nodes, with decreasing
 * negative numbers for each hop away from a focus.</p>
 * 
 * <p>This form of filtering was described gy George Furnas as early as 1981.
 * For more information about Furnas' fisheye view calculation and DOI values,
 * take a look at G.W. Furnas, "The FISHEYE View: A New Look at Structured 
 * Files," Bell Laboratories Tech. Report, Murray Hill, New Jersey, 1981. 
 * Available online at <a href="http://citeseer.nj.nec.com/furnas81fisheye.html">
 * http://citeseer.nj.nec.com/furnas81fisheye.html</a>.</p>
 *  
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d30 1
a30 6
    /**
     * Create a new FisheyeTreeFilter that processes the given group.
     * @@param group the data group to process. This should resolve to
     * a Graph instance, otherwise exceptions will result when this
     * Action is run.
     */
d34 1
a34 9

    /**
     * Create a new FisheyeTreeFilter that processes the given group.
     * @@param group the data group to process. This should resolve to
     * a Graph instance, otherwise exceptions will result when this
     * Action is run.
     * @@param distance the graph distance threshold from high-interest
     * nodes past which nodes will not be visible nor expanded.
     */
a38 10
    /**
     * Create a new FisheyeTreeFilter that processes the given group.
     * @@param group the data group to process. This should resolve to
     * a Graph instance, otherwise exceptions will result when this
     * Action is run.
     * @@param sources the group to use as source nodes, representing the
     * nodes of highest degree-of-interest.
     * @@param distance the graph distance threshold from high-interest
     * nodes past which nodes will not be visible nor expanded.
     */
a78 3
    /**
     * Visit a focus node.
     */
a87 3
    /**
     * Visit a specific node and update its degree-of-interest.
     */
a99 3
    /**
     * Visit tree ancestors and their other descendants.
     */
a104 3
    /**
     * Traverse tree descendents.
     */
d106 1
a106 1
        int lidx = ( skip == null ? 0 : p.getChildIndex(skip) );
d123 10
@


1.1.2.5
log
@Fixed javadoc typo.
@
text
@d28 1
a28 1
 * <p>This form of filtering was described by George Furnas as early as 1981.
@


