head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.42;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.20;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.16.20.07.41;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.20;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.45;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.action.animate;

import java.util.Iterator;

import prefuse.action.ItemAction;
import prefuse.action.layout.AxisLabelLayout;
import prefuse.data.tuple.TupleSet;
import prefuse.util.ColorLib;
import prefuse.visual.VisualItem;
import prefuse.visual.expression.StartVisiblePredicate;


/**
 * Animator that interpolates positions, colors, and visibility status for
 * metric axes.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 * @@see prefuse.action.layout.AxisLabelLayout
 */
public class AxisLabelAnimator extends ItemAction {

    /**
     * Create a new AxisLabelAnimator.
     */
    protected AxisLabelAnimator() {
        super();
    }    

    /**
     * Create a new AxisLabelAnimator for the given data group.
     * @@param group the data group to process
     */
    public AxisLabelAnimator(String group) {
        super(group);
    }

    /**
     * @@see prefuse.action.GroupAction#run(double)
     */
    public void run(double frac) {
        if ( frac == 0.0 ) {
            setup();
        } else if ( frac == 1.0 ) {
            finish();
        } else {
            super.run(frac);
        }
        TupleSet ts = m_vis.getGroup(m_group);
        ts.putClientProperty(AxisLabelLayout.FRAC, new Double(frac));
    }
    
    private void setup() {
        // handle fade-in nodes
        Iterator items = m_vis.visibleItems(m_group);
        while ( items.hasNext() ) {
            VisualItem item = (VisualItem) items.next();
            if ( !item.isStartVisible() ) {
                int efc = item.getEndFillColor();
                int esc = item.getEndStrokeColor();
                int etc = item.getEndTextColor();
                item.setStartFillColor(ColorLib.setAlpha(efc,0));
                item.setStartStrokeColor(ColorLib.setAlpha(esc,0));
                item.setStartTextColor(ColorLib.setAlpha(etc,0));
                item.setStartVisible(true);
            }
            process(item, 0.0);
        }
        
        // handle fade-out nodes
        items = m_vis.items(m_group, StartVisiblePredicate.TRUE);
        while ( items.hasNext() ) {
            VisualItem item = (VisualItem) items.next();
            if ( !item.isEndVisible() ) {
                int sfc = item.getStartFillColor();
                int ssc = item.getStartStrokeColor();
                int stc = item.getStartTextColor();
                item.setEndFillColor(ColorLib.setAlpha(sfc,0));
                item.setEndStrokeColor(ColorLib.setAlpha(ssc,0));
                item.setEndTextColor(ColorLib.setAlpha(stc,0));
                item.setVisible(true);
                process(item, 0.0);
            }
        }
    }
    
    private void finish() {
        // set faded-out nodes to permanently invisible
        Iterator items = m_vis.items(m_group, StartVisiblePredicate.TRUE);
        while ( items.hasNext() ) {
            VisualItem item = (VisualItem) items.next();
            if ( !item.isEndVisible() ) {
                item.setVisible(false);
                item.setStartVisible(false);
            }
        }
        
        // set faded-in nodes to permanently visible
        items = m_vis.visibleItems(m_group);
        while ( items.hasNext() ) {
            VisualItem item = (VisualItem) items.next();
            process(item, 1.0);
            item.setStartFillColor(item.getEndFillColor());
            item.setStartTextColor(item.getEndTextColor());
            item.setStartStrokeColor(item.getEndStrokeColor());
        }
    }
    
    /**
     * @@see prefuse.action.ItemAction#process(prefuse.visual.VisualItem, double)
     */
    public void process(VisualItem item, double frac) {
        double v = item.getStartX();
        item.setX(v + frac*(item.getEndX()-v));
        v = item.getStartY();
        item.setY(v + frac*(item.getEndY()-v));
        v = item.getDouble(VisualItem.STARTX2);
        v = v + frac*(item.getDouble(VisualItem.ENDX2)-v);
        item.setDouble(VisualItem.X2, v);
        v = item.getDouble(VisualItem.STARTY2);
        v = v + frac*(item.getDouble(VisualItem.ENDY2)-v);
        item.setDouble(VisualItem.Y2, v);
        
        int c = ColorLib.interp(item.getStartStrokeColor(),
                item.getEndStrokeColor(), frac);
        item.setStrokeColor(c);
        
        int tc = ColorLib.interp(item.getStartTextColor(),
                item.getEndTextColor(), frac);
        item.setTextColor(tc);
        
        int fc = ColorLib.interp(item.getStartFillColor(),
                item.getEndFillColor(), frac);
        item.setFillColor(fc);
    }

} // end of class AxisLabelAnimator
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d3 2
d16 1
a16 1
 *
d27 1
a27 1
    }
d40 1
a40 2
    @@Override
	public void run(double frac) {
d48 1
a48 1
        TupleSet<? extends VisualItem<?>> ts = m_vis.getGroup(m_group);
d51 1
a51 1

d54 3
a56 1
        for(VisualItem<?> item : m_vis.visibleItems(m_group)) {
d68 1
a68 1

d70 3
a72 1
        for(VisualItem<?> item :  m_vis.items(m_group, StartVisiblePredicate.TRUE)) {
d85 1
a85 1

d88 3
a90 1
        for(VisualItem<?> item : m_vis.items(m_group, StartVisiblePredicate.TRUE)) {
d96 1
a96 1

d98 3
a100 1
        for(VisualItem<?> item : m_vis.visibleItems(m_group)) {
d107 1
a107 1

d111 1
a111 2
    @@Override
	public void process(VisualItem<?> item, double frac) {
d122 1
a122 1

d126 1
a126 1

d130 1
a130 1

@


1.1
log
@file AxisLabelAnimator.java was initially added on branch beta.
@
text
@d1 136
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 126
package prefuse.action.animate;

import java.util.Iterator;

import prefuse.action.ItemAction;
import prefuse.action.layout.AxisLabels;
import prefuse.data.tuple.TupleSet;
import prefuse.util.ColorLib;
import prefuse.visual.VisualItem;
import prefuse.visual.expression.StartVisiblePredicate;


/**
 * This class linearly interpolates between two positions. This
 * is useful for performing animated transitions.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class AxisLabelAnimator extends ItemAction {

    public AxisLabelAnimator() {
        super();
    }    
    
	public AxisLabelAnimator(String group) {
        super(group);
    }

    /**
     * @@see prefuse.action.GroupAction#run(double)
     */
    public void run(double frac) {
        if ( frac == 0.0 ) {
            setup();
        } else if ( frac == 1.0 ) {
            finish();
        } else {
            super.run(frac);
        }
        TupleSet ts = m_vis.getGroup(m_group);
        ts.putClientProperty(AxisLabels.FRAC, new Double(frac));
    }
    
    private void setup() {
        // handle fade-in nodes
        Iterator items = m_vis.visibleItems(m_group);
        while ( items.hasNext() ) {
            VisualItem item = (VisualItem) items.next();
            if ( !item.isStartVisible() ) {
                int efc = item.getEndFillColor();
                int esc = item.getEndStrokeColor();
                int etc = item.getEndTextColor();
                item.setStartFillColor(ColorLib.setAlpha(efc,0));
                item.setStartStrokeColor(ColorLib.setAlpha(esc,0));
                item.setStartTextColor(ColorLib.setAlpha(etc,0));
                item.setStartVisible(true);
            }
            process(item, 0.0);
        }
        
        // handle fade-out nodes
        items = m_vis.items(m_group, StartVisiblePredicate.TRUE);
        while ( items.hasNext() ) {
            VisualItem item = (VisualItem) items.next();
            if ( !item.isEndVisible() ) {
                int sfc = item.getStartFillColor();
                int ssc = item.getStartStrokeColor();
                int stc = item.getStartTextColor();
                item.setEndFillColor(ColorLib.setAlpha(sfc,0));
                item.setEndStrokeColor(ColorLib.setAlpha(ssc,0));
                item.setEndTextColor(ColorLib.setAlpha(stc,0));
                item.setVisible(true);
                process(item, 0.0);
            }
        }
    }
    
    private void finish() {
        // set faded-out nodes to permanently invisible
        Iterator items = m_vis.items(m_group, StartVisiblePredicate.TRUE);
        while ( items.hasNext() ) {
            VisualItem item = (VisualItem) items.next();
            if ( !item.isEndVisible() ) {
                item.setVisible(false);
                item.setStartVisible(false);
            }
        }
        
        // set faded-in nodes to permanently visible
        items = m_vis.visibleItems(m_group);
        while ( items.hasNext() ) {
            VisualItem item = (VisualItem) items.next();
            process(item, 1.0);
            item.setStartFillColor(item.getEndFillColor());
            item.setStartTextColor(item.getEndTextColor());
            item.setStartStrokeColor(item.getEndStrokeColor());
        }
    }
    
    public void process(VisualItem item, double frac) {
        double v = item.getStartX();
        item.setX(v + frac*(item.getEndX()-v));
        v = item.getStartY();
        item.setY(v + frac*(item.getEndY()-v));
        v = item.getDouble(VisualItem.STARTX2);
        v = v + frac*(item.getDouble(VisualItem.ENDX2)-v);
        item.setDouble(v, VisualItem.X2);
        v = item.getDouble(VisualItem.STARTY2);
        v = v + frac*(item.getDouble(VisualItem.ENDY2)-v);
        item.setDouble(v, VisualItem.Y2);
        
        int c = ColorLib.interp(item.getStartStrokeColor(),
                item.getEndStrokeColor(), frac);
        item.setStrokeColor(c);
        
        int tc = ColorLib.interp(item.getStartTextColor(),
                item.getEndTextColor(), frac);
        item.setTextColor(tc);
        
        int fc = ColorLib.interp(item.getStartFillColor(),
                item.getEndFillColor(), frac);
        item.setFillColor(fc);
	}

} // end of class LocationAnimator
@


1.1.2.2
log
@Table method refactoring. Added PredicateChain, included in ColorFunction, SizeFunction, and RendererFactory. Added ItemBoundsListener, included in GraphView demo. Updated ColorMap to use int representation, moved palette creators to ColorLib. Added minExtent to JRangeSlider. Fixed round-off rendering glitches int optimized rendering, added RenderingAccuracy test class. Updated PrefuseConfig to support logging output to file system. Added DelmitedTextTableWriter. Added CompositeTupleSet. Added directionality to edges, increased support to EdgeRenderer, including reversed directionality.
@
text
@d108 1
a108 1
        item.setDouble(VisualItem.X2, v);
d111 1
a111 1
        item.setDouble(VisualItem.Y2, v);
@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d26 1
a26 1
    public AxisLabelAnimator(String group) {
d124 1
a124 1
    }
@


1.1.2.4
log
@Lots of javadoc
@
text
@d6 1
a6 1
import prefuse.action.layout.AxisLabelLayout;
d14 2
a15 2
 * Animator that interpolates positions, colors, and visibility status for
 * metric axes.
d17 2
a18 2
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 * @@see prefuse.action.layout.AxisLabelLayout
d22 1
a22 4
    /**
     * Create a new AxisLabelAnimator.
     */
    protected AxisLabelAnimator() {
d25 1
a25 5

    /**
     * Create a new AxisLabelAnimator for the given data group.
     * @@param group the data group to process
     */
d42 1
a42 1
        ts.putClientProperty(AxisLabelLayout.FRAC, new Double(frac));
a100 3
    /**
     * @@see prefuse.action.ItemAction#process(prefuse.visual.VisualItem, double)
     */
d126 1
a126 1
} // end of class AxisLabelAnimator
@


