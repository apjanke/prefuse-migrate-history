head	2.1;
access;
symbols
	java_1_5:2.1.0.4
	Root_java_1_5:2.1
	beta:2.1.0.2
	beta-20080113:2.1
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.1
date	2008.01.13.22.39.14;	author jheer;	state Exp;
branches
	2.1.4.1;
next	2.0;

2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.13.30;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.30;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.09.23.33.25;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.30.09.08.05;	author jheer;	state Exp;
branches;
next	;

2.1.4.1
date	2008.01.23.23.55.41;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.1
log
@Fixed javadoc comments
@
text
@package prefuse.visual;

import prefuse.Visualization;
import prefuse.data.Table;
import prefuse.data.Tree;
import prefuse.data.event.EventConstants;
import prefuse.util.collections.IntIterator;

/**
 * A visual abstraction of a tree data structure. NodeItem and EdgeItem tuples
 * provide the visual representations for the nodes and edges of the tree.
 * VisualTrees should not be created directly, they are created automatically
 * by adding data to a Visualization, for example by using the
 * {@@link Visualization#addTree(String, Tree)} method.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class VisualTree extends Tree implements VisualTupleSet {
    
    private Visualization m_vis;
    private String m_group;
    
    /**
     * Create a new VisualTree.
     * @@param nodes the visual node table
     * @@param edges the visual edge table
     * @@param nodeKey the node table field by which to index the nodes.
     * This value can be null, indicating that just the row indices should be
     * used.
     * @@param sourceKey the edge table field storing source (parent) node keys
     * @@param targetKey the edge table field storing target (child) node keys
     */
    public VisualTree(VisualTable nodes, VisualTable edges,
            String nodeKey, String sourceKey, String targetKey)
    {
        super(nodes, edges, nodeKey, sourceKey, targetKey);
    }
    
    /**
     * Fire a graph event. Makes sure to invalidate all edges connected
     * to a node that has been updated.
     * @@see prefuse.data.Graph#fireGraphEvent(prefuse.data.Table, int, int, int, int)
     */
    protected void fireGraphEvent(Table t, 
            int first, int last, int col, int type)
    {
        // if a node is invalidated, invalidate the edges, too
        if ( type==EventConstants.UPDATE && 
             col==VisualItem.IDX_VALIDATED && t==getNodeTable() )
        {
            VisualTable nodes = (VisualTable)t;
            VisualTable edges = (VisualTable)getEdgeTable();
            
            for ( int i=first; i<=last; ++i ) {
                if ( nodes.isValidated(i) )
                    continue; // look only for invalidations
                
                IntIterator erows = edgeRows(i);
                while ( erows.hasNext() ) {
                    int erow = erows.nextInt();
                    edges.setValidated(erow, false);
                }
            }
        }
        // fire the event off to listeners
        super.fireGraphEvent(t, first, last, col, type);
    }
    
    // ------------------------------------------------------------------------
    // VisualItemTable Methods
    
    /**
     * @@see prefuse.visual.VisualTupleSet#getVisualization()
     */
    public Visualization getVisualization() {
        return m_vis;
    }
    
    /**
     * Set the visualization associated with this VisualGraph
     * @@param vis the visualization to set
     */
    public void setVisualization(Visualization vis) {
        m_vis = vis;
    }
    
    /**
     * Get the visualization data group name for this graph
     * @@return the data group name
     */
    public String getGroup() {
        return m_group;
    }
    
    /**
     * Set the visualization data group name for this graph
     * @@param group the data group name to use
     */
    public void setGroup(String group) {
        m_group = group;
    }
    
} // end of class VisualTree
@


2.1.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@a2 2
import java.util.List;

d7 2
d15 1
a15 1
 *
d18 2
a19 2
public class VisualTree <T extends VisualItem<?>, N extends NodeItem<N,E>, E extends EdgeItem<N,E>> extends Tree<T,N,E> implements VisualTupleSet<T> {

d22 1
a22 1

d33 1
a33 1
    public VisualTree(VisualTable<?,N> nodes, VisualTable<?,E> edges,
d38 1
a38 1

d44 1
a44 2
    @@Override
	protected void fireGraphEvent(Table<?> t,
d48 1
a48 1
        if ( type==EventConstants.UPDATE &&
d51 3
a53 3
            VisualTable<?,?> nodes = (VisualTable<?,?>)t;
            VisualTable<?,?> edges = (VisualTable<?,?>)getEdgeTable();

d55 6
a60 6
                if ( nodes.isValidated(i) ) {
					continue; // look only for invalidations
				}

                List<Integer> erows = edgeRows(i);
                for ( int erow : erows ) {
d68 1
a68 1

d71 1
a71 1

d78 1
a78 1

d86 1
a86 1

d94 1
a94 1

d97 1
d102 1
a102 1

@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d97 1
a97 1
     * @@return the data group name to use
@


1.1
log
@file VisualTree.java was initially added on branch beta.
@
text
@d1 103
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 67
package prefuse.visual;

import prefuse.Visualization;
import prefuse.data.Table;
import prefuse.data.Tree;
import prefuse.data.event.EventConstants;
import prefuse.util.collections.IntIterator;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class VisualTree extends Tree {
    
    private Visualization m_vis;
    private String m_group;
    
    public VisualTree(VisualTable nodes, VisualTable edges,
            String nodeKey, String sourceKey, String targetKey)
    {
        super(nodes, edges, nodeKey, sourceKey, targetKey);
    }
    
    protected void fireGraphEvent(Table t, 
            int first, int last, int col, int type)
    {
        // if a node is invalidated, invalidate the edges, too
        if ( type==EventConstants.UPDATE && 
             col==VisualItem.IDX_VALIDATED && t==m_nodes )
        {
            VisualTable nodes = (VisualTable)m_nodes;
            VisualTable edges = (VisualTable)m_edges;
            
            for ( int i=first; i<=last; ++i ) {
                if ( nodes.isValidated(i) )
                    continue; // look only for invalidations
                
                IntIterator erows = edgeRows(i);
                while ( erows.hasNext() ) {
                    int erow = erows.nextInt();
                    edges.setValidated(false, erow);
                }
            }
        }
        // fire the event off to listeners
        super.fireGraphEvent(t, first, last, col, type);
    }
    
    // ------------------------------------------------------------------------
    // VisualItemTable Methods
    
    public Visualization getVisualization() {
        return m_vis;
    }
    
    public void setVisualization(Visualization vis) {
        m_vis = vis;
    }
    
    public String getGroup() {
        return m_group;
    }
    
    public void setGroup(String group) {
        m_group = group;
    }
    
} // end of class VisualTree
@


1.1.2.2
log
@Updated Graph classes to subclass CompositeTupleSet
@
text
@d28 1
a28 1
             col==VisualItem.IDX_VALIDATED && t==getNodeTable() )
d30 2
a31 2
            VisualTable nodes = (VisualTable)t;
            VisualTable edges = (VisualTable)getEdgeTable();
@


1.1.2.3
log
@Much more javadoc
@
text
@d10 1
a10 7
 * A visual abstraction of a tree data structure. NodeItem and EdgeItem tuples
 * provide the visual representations for the nodes and edges of the tree.
 * VisualTrees should not be created directly, they are created automatically
 * by adding data to a Visualization, for example by using the
 * {@@link Visualization#addTree(String, Tree)} method.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d12 1
a12 1
public class VisualTree extends Tree implements VisualTupleSet {
a16 10
    /**
     * Create a new VisualTree.
     * @@param nodes the visual node table
     * @@param edges the visual edge table
     * @@param nodeKey the node table field by which to index the nodes.
     * This value can be null, indicating that just the row indices should be
     * used.
     * @@param sourceKey the edge table field storing source (parent) node keys
     * @@param targetKey the edge table field storing target (child) node keys
     */
a22 5
    /**
     * Fire a graph event. Makes sure to invalidate all edges connected
     * to a node that has been updated.
     * @@see prefuse.data.Graph#fireGraphEvent(prefuse.data.Table, int, int, int, int)
     */
d40 1
a40 1
                    edges.setValidated(erow, false);
a50 3
    /**
     * @@see prefuse.visual.VisualTupleSet#getVisualization()
     */
a54 4
    /**
     * Set the visualization associated with this VisualGraph
     * @@param vis the visualization to set
     */
a58 4
    /**
     * Get the visualization data group name for this graph
     * @@return the data group name
     */
a62 4
    /**
     * Set the visualization data group name for this graph
     * @@return the data group name to use
     */
@


