head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.19;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.30.09.08.06;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.02.07.00.42.53;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.38;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.visual.expression;

import java.util.logging.Logger;

import prefuse.data.Tuple;
import prefuse.data.expression.AbstractExpression;
import prefuse.data.expression.Expression;
import prefuse.data.expression.Function;
import prefuse.data.expression.ObjectLiteral;

/**
 * Abstract base class for Expression instances dealing with data groups
 * within a Visualization. Maintains an Expression that serves as the
 * paremter to this Function; this Expression should return a valid
 * group name when evaluated on a given Tuple.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public abstract class GroupExpression extends AbstractExpression
    implements Function
{
    private static final Logger s_logger
        = Logger.getLogger(GroupExpression.class.getName());

    protected Expression m_group;
    
    /**
     * Create a new GroupExpression.
     */
    protected GroupExpression() {
        m_group = null;
    }
    
    /**
     * Create a new GroupExpression over the given group name.
     * @@param group the data group name
     */
    protected GroupExpression(String group) {
        m_group = new ObjectLiteral(group);
    }
    
    /**
     * Evaluate the group name expression for the given Tuple
     * @@param t the input Tuple to the group name expression
     * @@return the String result of the expression
     */
    protected String getGroup(Tuple t) {
        String group = (String)m_group.get(t);
        if ( group == null ) {
            s_logger.warning("Null group lookup");
        }
        return group;
    }
    
    
    /**
     * Attempts to add the given expression as the group expression.
     * @@see prefuse.data.expression.Function#addParameter(prefuse.data.expression.Expression)
     */
    public void addParameter(Expression e) {
        if ( m_group == null )
            m_group = e;
        else
            throw new IllegalStateException(
               "This function takes only 1 parameter.");
    }

    /**
     * @@see prefuse.data.expression.Function#getParameterCount()
     */
    public int getParameterCount() {
        return 1;
    }
    
    /**
     * @@see java.lang.Object#toString()
     */
    public String toString() {
        return getName()+"("+m_group+")";
    }
    
} // end of class GroupExpression
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d16 1
a16 1
 *
d26 1
a26 1

d33 1
a33 1

d41 1
a41 1

d47 1
a47 1
    protected String getGroup(Tuple<?> t) {
d54 2
a55 2


d61 4
a64 4
        if ( m_group == null ) {
			m_group = e;
		} else {
			throw new IllegalStateException(
a65 1
		}
d74 1
a74 1

d78 1
a78 2
    @@Override
	public String toString() {
d81 1
a81 1

@


1.1
log
@file GroupExpression.java was initially added on branch beta.
@
text
@d1 82
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 54
package prefuse.visual.expression;

import java.util.logging.Logger;

import prefuse.data.expression.AbstractExpression;
import prefuse.data.expression.Expression;
import prefuse.data.expression.Function;
import prefuse.data.expression.ObjectLiteral;
import prefuse.data.tuple.Tuple;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public abstract class GroupExpression extends AbstractExpression
    implements Function
{
    private static final Logger s_logger
        = Logger.getLogger(GroupExpression.class.getName());

    protected Expression m_group;
    
    protected GroupExpression() {
        m_group = null;
    }
    
    protected GroupExpression(String group) {
        m_group = new ObjectLiteral(group);
    }
    
    protected String getGroup(Tuple t) {
        String group = (String)m_group.get(t);
        if ( group == null ) {
            s_logger.warning("Null group lookup");
        }
        return group;
    }
    
    public void addParameter(Expression e) {
        if ( m_group == null )
            m_group = e;
        else
            throw new IllegalStateException(
               "This function takes only 1 parameter.");
    }

    public int getParameterCount() {
        return 1;
    }
    
    public String toString() {
        return getName()+"("+m_group+")";
    }
    
} // end of class GroupExpression
@


1.1.2.2
log
@Much more javadoc
@
text
@d12 1
a12 6
 * Abstract base class for Expression instances dealing with data groups
 * within a Visualization. Maintains an Expression that serves as the
 * paremter to this Function; this Expression should return a valid
 * group name when evaluated on a given Tuple.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a21 3
    /**
     * Create a new GroupExpression.
     */
a25 4
    /**
     * Create a new GroupExpression over the given group name.
     * @@param group the data group name
     */
a29 5
    /**
     * Evaluate the group name expression for the given Tuple
     * @@param t the input Tuple to the group name expression
     * @@return the String result of the expression
     */
a37 5
    
    /**
     * Attempts to add the given expression as the group expression.
     * @@see prefuse.data.expression.Function#addParameter(prefuse.data.expression.Expression)
     */
a45 3
    /**
     * @@see prefuse.data.expression.Function#getParameterCount()
     */
a49 3
    /**
     * @@see java.lang.Object#toString()
     */
@


1.1.2.3
log
@Intermediate commit in run-up to release.
Upgraded Tuple, Node, and Edge to the data package.
Renamed "Function" classes to "Action" classes.
Added Shape to VisualItem Schema.
Added ShapeActions, moved Shape constants to Constants interface.
Added Background image handling to the Display class.
Added social network data file.
@
text
@a4 1
import prefuse.data.Tuple;
d9 1
@


