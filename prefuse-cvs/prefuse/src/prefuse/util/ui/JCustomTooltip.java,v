head	2.1;
access;
symbols
	java_1_5:2.1.0.4
	Root_java_1_5:2.1
	beta:2.1.0.2
	beta-20080113:2.1
	beta-20071021:2.1
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.1
date	2006.02.22.21.09.45;	author jheer;	state Exp;
branches
	2.1.4.1;
next	2.0;

2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.16.20.07.41;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.30.09.08.05;	author jheer;	state Exp;
branches;
next	;

2.1.4.1
date	2008.01.23.23.55.36;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.1
log
@Added custom tooltip handling to the Display.
@
text
@package prefuse.util.ui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Window;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JToolTip;
import javax.swing.Popup;
import javax.swing.PopupFactory;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

/**
 * Tooltip component that allows arbitrary Swing components to be
 * used within tooltips. To use this class, provide the constructor
 * with both the source component (the component to provide the
 * tooltip for) and the tooltip component (a JComponent to use as the
 * displayed tooltip). This class can be used to provide
 * a custom tooltip for a prefuse {@@link prefuse.Display} instance,
 * by registering it with the
 * {@@link prefuse.Display#setCustomToolTip(JToolTip)} method.
 * 
 * <p>In general, <code>JCustomTooltip</code> can be used with any Swing
 * widget. This is done by  overriding JComponent's <code>createToolTip</code>
 * method such that it returns the custom tooltip instance.</p>
 * 
 * <p>Before using this class, you might first check if you can
 * achieve your desired custom tooltip by using HTML formatting.
 * As with JLabel instances, the standard Swing tooltip mechanism includes
 * support for HTML tooltip text, allowing multi-line tooltips using
 * coloring and various fonts to be created. See
 * See <a href="http://examples.oreilly.com/jswing2/code/ch04/HtmlLabel.java">
 * this example</a> for an instance of using HTML formatting in
 * a JLabel. The same HTML string could be used as the input to
 * JComponent's <code>setToolTipText</code> method.</p>
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class JCustomTooltip extends JToolTip {
    
    private boolean  m_persist = false;
    private Listener m_lstnr = null;
   
    /**
     * Create a new JCustomTooltip
     * @@param src the component for which this is a tooltip
     * @@param content the component to use as the tooltip content
     */
    public JCustomTooltip(JComponent src, JComponent content) {
        this(src, content, false);
    }
    
    /**
     * Create a new JCustomTooltip
     * @@param src the component for which this is a tooltip
     * @@param content the component to use as the tooltip content
     * @@param inter indicates if the tooltip should be interactive
     */
    public JCustomTooltip(JComponent src, JComponent content, boolean inter)
    {
        this.setLayout(new BorderLayout());
        this.setBorder(BorderFactory.createEmptyBorder(1,1,1,1));
        this.setComponent(src);
        this.add(content);
        
        setPersistent(inter);
    }
    
    /**
     * Indicates if the tooltip will stay persistent on the screen to
     * support interaction within the tooltip component.
     * @@return true if persistent, false otherwise.
     */
    public boolean isPersistent() {
        return m_persist;
    }
    
    /**
     * Sets if the tooltip will stay persistent on the screen to
     * support interaction within the tooltip component.
     * @@param inter true for persistence, false otherwise.
     */
    public void setPersistent(boolean inter) {
        if ( inter == m_persist )
            return;
        
        if ( inter ) {
            m_lstnr = new Listener();
            this.addAncestorListener(m_lstnr);
        } else {
            this.removeAncestorListener(m_lstnr);
            m_lstnr = null;
        }
        m_persist = inter;
    }
    
    /**
     * Set the content component of the tooltip
     * @@param content the tooltip content
     */
    public void setContent(JComponent content) {
        this.removeAll();
        this.add(content);
    }
    
    /**
     * @@see java.awt.Component#getPreferredSize()
     */
    public Dimension getPreferredSize() {
        if ( getComponentCount() > 0 ) {
            Dimension d = getComponent(0).getPreferredSize();
            Insets ins = getInsets();
            return new Dimension(d.width+ins.left+ins.right,
                                 d.height+ins.top+ins.bottom);
        } else {
            return super.getPreferredSize();
        }
    }
    
    /**
     * @@see javax.swing.JComponent#paintComponent(java.awt.Graphics)
     */
    public void paintComponent(Graphics g) {
        if ( getComponentCount() > 0 ) {
            // paint background
            g.setColor(getBackground());
            g.drawRect(0,0,getWidth()-1,getHeight()-1);
            g.setColor(getComponent(0).getBackground());
            g.fillRect(1,1,getWidth()-2,getHeight()-2);
        }
    }
    
    /**
     * Listener class that registers the tooltip component and performs
     * persistence management.
     */
    private class Listener extends MouseAdapter implements AncestorListener {
        private Point point = new Point();
        private boolean showing = false;
        private Popup popup;
        
        public void ancestorAdded(AncestorEvent event) {
            if ( showing ) { return; }

            Window ttip = SwingUtilities.getWindowAncestor(getParent());
            if ( ttip == null || !ttip.isVisible() ) {
                return;
            }
            //ttip.addMouseListener(this);
            ttip.getLocation(point);
            ttip.setVisible(false);
            getParent().remove(JCustomTooltip.this);
            
            JComponent c = getComponent();
            c.setToolTipText(null);
            c.removeMouseMotionListener(ToolTipManager.sharedInstance());
            
            popup = PopupFactory.getSharedInstance().getPopup(
                    c, JCustomTooltip.this, point.x, point.y);
            Window w = SwingUtilities.getWindowAncestor(JCustomTooltip.this);
            w.addMouseListener(this);
            w.setFocusableWindowState(true);
            popup.show();
            
            showing = true;
        }

        public void mouseEntered(MouseEvent e) {
//            Window ttip = SwingUtilities.getWindowAncestor(getParent());
//            ttip.removeMouseListener(this);
//            if ( ttip == null || !ttip.isVisible() ) {
//                return;
//            }
//            ttip.getLocation(point);
//            ttip.hide();
//            getParent().remove(JCustomTooltip.this);
//            
//            JComponent c = getComponent();
//            c.setToolTipText(null);
//            c.removeMouseMotionListener(ToolTipManager.sharedInstance());
//            
//            popup = PopupFactory.getSharedInstance().getPopup(
//                    c, JCustomTooltip.this, point.x, point.y);
//            Window w = SwingUtilities.getWindowAncestor(JCustomTooltip.this);
//            w.addMouseListener(this);
//            w.setFocusableWindowState(true);
//            popup.show();
//            
//            showing = true;
        }
        
        public void mouseExited(MouseEvent e) {
            if ( !showing ) return;
            int x = e.getX(), y = e.getY();
            Component c = (Component)e.getSource();
            if ( x < 0 || y < 0 || x > c.getWidth() || y > c.getHeight() )
            {
                Window w = SwingUtilities.getWindowAncestor(JCustomTooltip.this);
                w.removeMouseListener(this);
                w.setFocusableWindowState(false);
                popup.hide();
                popup = null;
                getComponent().setToolTipText("?");
                showing = false;
            }
        }

        public void ancestorMoved(AncestorEvent event) {
        }
        public void ancestorRemoved(AncestorEvent event) {
        }
    }
    
} // end of class JCustomTooltip
@


2.1.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d32 1
a32 1
 *
d36 1
a36 1
 *
d46 1
a46 1
 *
d50 1
a50 1

d53 1
a53 1

d62 1
a62 1

d75 1
a75 1

d78 1
a78 1

d87 1
a87 1

d94 3
a96 4
        if ( inter == m_persist ) {
			return;
		}

d106 1
a106 1

d115 1
a115 1

d119 1
a119 2
    @@Override
	public Dimension getPreferredSize() {
d129 1
a129 1

d133 1
a133 2
    @@Override
	public void paintComponent(Graphics g) {
d142 1
a142 1

d148 1
a148 1
        private final Point point = new Point();
d151 1
a151 1

d163 1
a163 1

d167 1
a167 1

d174 1
a174 1

d178 1
a178 2
        @@Override
		public void mouseEntered(MouseEvent e) {
d187 1
a187 1
//
d191 1
a191 1
//
d198 1
a198 1
//
d201 3
a203 6

        @@Override
		public void mouseExited(MouseEvent e) {
            if ( !showing ) {
				return;
			}
d223 1
a223 1

@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d25 21
a45 1
 * used within tooltips.
@


1.1
log
@file JCustomTooltip.java was initially added on branch beta.
@
text
@d1 204
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 166
package prefuse.util.ui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Window;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JToolTip;
import javax.swing.Popup;
import javax.swing.PopupFactory;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class JCustomTooltip extends JToolTip {
    
    private boolean  m_persist = false;
    private Listener m_lstnr = null;
    
    public JCustomTooltip(JComponent src, JComponent content) {
        this(src, content, false);
    }
    
    public JCustomTooltip(JComponent src, JComponent content, boolean inter)
    {
        this.setLayout(new BorderLayout());
        this.setBorder(BorderFactory.createEmptyBorder(1,1,1,1));
        this.setComponent(src);
        this.add(content);
        
        setPersistent(inter);
    }
    
    public boolean isPersistant() {
        return m_persist;
    }
    
    public void setPersistent(boolean inter) {
        if ( inter == m_persist )
            return;
        
        if ( inter ) {
            m_lstnr = new Listener();
            this.addAncestorListener(m_lstnr);
        } else {
            this.removeAncestorListener(m_lstnr);
            m_lstnr = null;
        }
        m_persist = inter;
    }
    
    public void setContent(JComponent content) {
        this.removeAll();
        this.add(content);
    }
    
    public Dimension getPreferredSize() {
        if ( getComponentCount() > 0 ) {
            Dimension d = getComponent(0).getPreferredSize();
            Insets ins = getInsets();
            return new Dimension(d.width+ins.left+ins.right,
                                 d.height+ins.top+ins.bottom);
        } else {
            return super.getPreferredSize();
        }
    }
    
    public void paintComponent(Graphics g) {
        if ( getComponentCount() > 0 ) {
            // paint background
            g.setColor(getBackground());
            g.drawRect(0,0,getWidth()-1,getHeight()-1);
            g.setColor(getComponent(0).getBackground());
            g.fillRect(1,1,getWidth()-2,getHeight()-2);
        }
    }
    
    private class Listener extends MouseAdapter implements AncestorListener {
        private Point point = new Point();
        private boolean showing = false;
        private Popup popup;
        
        public void ancestorAdded(AncestorEvent event) {
            if ( showing ) { return; }

            Window ttip = SwingUtilities.getWindowAncestor(getParent());
            if ( ttip == null || !ttip.isVisible() ) {
                return;
            }
            //ttip.addMouseListener(this);
            ttip.getLocation(point);
            ttip.hide();
            getParent().remove(JCustomTooltip.this);
            
            JComponent c = getComponent();
            c.setToolTipText(null);
            c.removeMouseMotionListener(ToolTipManager.sharedInstance());
            
            popup = PopupFactory.getSharedInstance().getPopup(
                    c, JCustomTooltip.this, point.x, point.y);
            Window w = SwingUtilities.getWindowAncestor(JCustomTooltip.this);
            w.addMouseListener(this);
            w.setFocusableWindowState(true);
            popup.show();
            
            showing = true;
        }

        public void mouseEntered(MouseEvent e) {
//            Window ttip = SwingUtilities.getWindowAncestor(getParent());
//            ttip.removeMouseListener(this);
//            if ( ttip == null || !ttip.isVisible() ) {
//                return;
//            }
//            ttip.getLocation(point);
//            ttip.hide();
//            getParent().remove(JCustomTooltip.this);
//            
//            JComponent c = getComponent();
//            c.setToolTipText(null);
//            c.removeMouseMotionListener(ToolTipManager.sharedInstance());
//            
//            popup = PopupFactory.getSharedInstance().getPopup(
//                    c, JCustomTooltip.this, point.x, point.y);
//            Window w = SwingUtilities.getWindowAncestor(JCustomTooltip.this);
//            w.addMouseListener(this);
//            w.setFocusableWindowState(true);
//            popup.show();
//            
//            showing = true;
        }
        
        public void mouseExited(MouseEvent e) {
            if ( !showing ) return;
            int x = e.getX(), y = e.getY();
            Component c = (Component)e.getSource();
            if ( x < 0 || y < 0 || x > c.getWidth() || y > c.getHeight() )
            {
                Window w = SwingUtilities.getWindowAncestor(JCustomTooltip.this);
                w.removeMouseListener(this);
                w.setFocusableWindowState(false);
                popup.hide();
                popup = null;
                getComponent().setToolTipText("?");
                showing = false;
            }
        }

        public void ancestorMoved(AncestorEvent event) {
        }
        public void ancestorRemoved(AncestorEvent event) {
        }
    }
    
} // end of class JCustomTooltip
@


1.1.2.2
log
@Table method refactoring. Added PredicateChain, included in ColorFunction, SizeFunction, and RendererFactory. Added ItemBoundsListener, included in GraphView demo. Updated ColorMap to use int representation, moved palette creators to ColorLib. Added minExtent to JRangeSlider. Fixed round-off rendering glitches int optimized rendering, added RenderingAccuracy test class. Updated PrefuseConfig to support logging output to file system. Added DelmitedTextTableWriter. Added CompositeTupleSet. Added directionality to edges, increased support to EdgeRenderer, including reversed directionality.
@
text
@d103 1
a103 1
            ttip.setVisible(false);
@


1.1.2.3
log
@Much more javadoc
@
text
@d24 1
a24 4
 * Tooltip component that allows arbitrary Swing components to be
 * used within tooltips.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d30 1
a30 6
   
    /**
     * Create a new JCustomTooltip
     * @@param src the component for which this is a tooltip
     * @@param content the component to use as the tooltip content
     */
a34 6
    /**
     * Create a new JCustomTooltip
     * @@param src the component for which this is a tooltip
     * @@param content the component to use as the tooltip content
     * @@param inter indicates if the tooltip should be interactive
     */
d45 1
a45 6
    /**
     * Indicates if the tooltip will stay persistent on the screen to
     * support interaction within the tooltip component.
     * @@return true if persistent, false otherwise.
     */
    public boolean isPersistent() {
a48 5
    /**
     * Sets if the tooltip will stay persistent on the screen to
     * support interaction within the tooltip component.
     * @@param inter true for persistence, false otherwise.
     */
a62 4
    /**
     * Set the content component of the tooltip
     * @@param content the tooltip content
     */
a67 3
    /**
     * @@see java.awt.Component#getPreferredSize()
     */
a78 3
    /**
     * @@see javax.swing.JComponent#paintComponent(java.awt.Graphics)
     */
a88 4
    /**
     * Listener class that registers the tooltip component and performs
     * persistence management.
     */
@


