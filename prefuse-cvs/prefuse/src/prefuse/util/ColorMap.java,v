head	2.2;
access;
symbols
	java_1_5:2.2.0.4
	Root_java_1_5:2.2
	beta:2.2.0.2
	beta-20080113:2.2
	beta-20071021:2.2
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.2
date	2006.04.10.18.26.09;	author jheer;	state Exp;
branches
	2.2.4.1;
next	2.1;

2.1
date	2006.02.27.03.42.04;	author jheer;	state Exp;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.45;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.16.20.07.41;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.18;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.01.30.09.08.06;	author jheer;	state Exp;
branches;
next	;

2.2.4.1
date	2008.01.23.23.55.36;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.2
log
@Fixed lookup round-off error
@
text
@package prefuse.util;

/**
 * A color map provides a mapping from numeric values to specific colors.
 * This useful for assigning colors to visualized items. The numeric values
 * may represent different categories (i.e. nominal variables) or run along
 * a spectrum of values (i.e. quantitative variables).
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class ColorMap {

    private int[] palette;
    private double minValue, maxValue;
    
    /**
     * Creates a new ColorMap instance using the given internal color map
     * array and minimum and maximum index values.
     * @@param map the color palette, an int array of color values
     * @@param min the minimum value in the color map
     * @@param max the maximum value in the color map
     */
    public ColorMap(int[] map, double min, double max) {
        palette = map;
        minValue = min;
        maxValue = max;
    }
    
    /**
     * Returns the color associated with the given value. If the value
     * is outside the range defined by this map's minimum or maximum
     * values, a endpoint value is returned (i.e. the first entry
     * in the color map for values below the minimum, the last enty
     * for value above the maximum).
     * @@param val the value for which to retrieve the color
     * @@return the color corresponding the given value
     */
    public int getColor(double val) {
        if ( val < minValue ) {
            return palette[0];
        } else if ( val >= maxValue ) {
            return palette[palette.length-1];
        } else {
            int idx = (int)(palette.length *
                            (val-minValue)/(maxValue-minValue));
            return palette[idx];
        }
    }

    /**
     * Gets the internal color palette, an int array of color values.
     * @@return returns the color palette.
     */
    public int[] getColorPalette() {
        return palette;
    }

    /**
     * Sets the internal color palette, an int array of color values.
     * @@param palette the new palette.
     */
    public void setColorPalette(int[] palette) {
        this.palette = palette;
    }

    /**
     * Gets the maximum value that corresponds to the last
     * color in the color map.
     * @@return returns the max index value into the color map.
     */
    public double getMaxValue() {
        return maxValue;
    }

    /**
     * Sets the maximum value that corresponds to the last
     * color in the color map.
     * @@param maxValue the new max index value.
     */
    public void setMaxValue(double maxValue) {
        this.maxValue = maxValue;
    }

    /**
     * Gets the minimum value that corresponds to the first
     * color in the color map.
     * @@return Returns the min index value.
     */
    public double getMinValue() {
        return minValue;
    }

    /**
     * Sets the minimum value that corresponds to the first
     * color in the color map.
     * @@param minValue the new min index value.
     */
    public void setMinValue(double minValue) {
        this.minValue = minValue;
    }
    
} // end of class ColorMap
@


2.2.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d15 1
a15 1

d28 1
a28 1

d101 1
a101 1

@


2.1
log
@Fixed rounding bug for palette lookups.
@
text
@d41 1
a41 1
        } else if ( val > maxValue ) {
d44 1
a44 1
            int idx = (int)((palette.length-1) *
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d44 2
a45 2
            int idx = (int)Math.round((palette.length-1) *
                          (val-minValue)/(maxValue-minValue));
@


1.1
log
@file ColorMap.java was initially added on branch beta.
@
text
@d1 102
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 292
package prefuse.util;

import java.awt.Color;
import java.awt.Paint;


/**
 * A color map provides a mapping from numeric values to specific colors.
 * This useful for assigning colors to visualized items. The numeric values
 * may represent different categories (i.e. nominal variables) or run along
 * a spectrum of values (i.e. quantitative variables).
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class ColorMap {

	/**
	 * Default palette of category hues.
	 */
	public static final float[] CATEGORY_HUES = {
		0f, 1f/12f, 1f/6f, 5f/24f, 1f/3f, 1f/2f, 2f/3f, 3f/4f, 5f/6f, 11f/12f
	};
	
    /**
     * The default length of a color map array if its size
     * is not otherwise specified.
     */
    public static final int DEFAULT_MAP_SIZE = 64;
    
    private Paint colorMap[];
    private double minValue, maxValue;
    
    /**
     * Creates a new ColorMap instance using the given internal color map
     * array and minimum and maximum index values.
     * @@param map a Paint array constituing the color map
     * @@param min the minimum value in the color map
     * @@param max the maximum value in the color map
     */
    public ColorMap(Paint[] map, double min, double max) {
        colorMap = map;
        minValue = min;
        maxValue = max;
    } //
    
    /**
     * Returns the color associated with the given value. If the value
     * is outside the range defined by this map's minimum or maximum
     * values, a saturated value is returned (i.e. the first entry
     * in the color map for values below the minimum, the last enty
     * for value above the maximum).
     * @@param val the value for which to retrieve the corresponding color
     * @@return the color (as a Paint instance) corresponding the given value
     */
    public Paint getColor(double val) {
        if ( val < minValue ) {
            return colorMap[0];
        } else if ( val > maxValue ) {
            return colorMap[colorMap.length-1];
        } else {
            int idx = (int)Math.round((colorMap.length-1) *
                          (val-minValue)/(maxValue-minValue));
            return colorMap[idx];
        }
    } //

    /**
     * Sets the internal color palette, an array of Paint values.
     * @@return Returns the color palette.
     */
    public Paint[] getColorPalette() {
        return colorMap;
    } //

    /**
     * Sets the internal color palette, an array of Paint values.
     * @@param colorMap The new palette.
     */
    public void setColorPalette(Paint[] colorMap) {
        this.colorMap = colorMap;
    } //

    /**
     * Gets the maximum value that corresponds to the last
     * color in the color map.
     * @@return Returns the max index value into the colormap.
     */
    public double getMaxValue() {
        return maxValue;
    } //

    /**
     * Sets the maximum value that corresponds to the last
     * color in the color map.
     * @@param maxValue The max index value to set.
     */
    public void setMaxValue(double maxValue) {
        this.maxValue = maxValue;
    } //

    /**
     * Sets the minimum value that corresponds to the first
     * color in the color map.
     * @@return Returns the min index value.
     */
    public double getMinValue() {
        return minValue;
    } //

    /**
     * Gets the minimum value that corresponds to the first
     * color in the color map.
     * @@param minValue The min index value to set.
     */
    public void setMinValue(double minValue) {
        this.minValue = minValue;
    } //

    /**
     * Returns a color map array of default size that ranges from black to
     * white through shades of gray.
     * @@return the color map array
     */
    public static Color[] getGrayscalePalette() {
        return getGrayscalePalette(DEFAULT_MAP_SIZE);
    } //
    
    /**
     * /**
     * Returns a color map array of specified size that ranges from black to
     * white through shades of gray.
     * @@param size the size of the color map array
     * @@return the color map array
     */
    public static Color[] getGrayscalePalette(int size) {
        Color[] cm = new Color[size];
        for ( int i=0; i<size; i++ ) {
            float g = ((float)i)/(size-1);
            cm[i] = ColorLib.getColor(g,g,g,1.f);
        }
        return cm;
    } //
    
    /**
     * Returns a color map array of default size that ranges from one
     * given color to the other.
     * @@param c1 the initial color in the color map
     * @@param c2 the final color in the color map
     * @@return the color map array
     */
    public static Color[] getInterpolatedPalette(Color c1, Color c2) {
        return getInterpolatedPalette(DEFAULT_MAP_SIZE, c1, c2);
    } //
    
    /**
     * Returns a color map array of given size that ranges from one
     * given color to the other.
     * @@param size the size of the color map array
     * @@param c1 the initial color in the color map
     * @@param c2 the final color in the color map
     * @@return the color map array
     */
    public static Color[] getInterpolatedPalette(int size, Color c1, Color c2)
    {
        Color[] cm = new Color[size];
        for ( int i=0; i<size; i++ ) {
            float f = ((float)i)/(size-1);
            cm[i] = ColorLib.interp(c1,c2,f);
        }
        return cm;
    } //
    
    /**
     * Returns a color map array of default size that cycles through
     * the hues of the HSB (Hue/Saturation/Brightness) color space at
     * full saturation and brightness.
     * @@return the color map array
     */
    public static Color[] getHSBPalette() {
        return getHSBPalette(DEFAULT_MAP_SIZE, 1.f, 1.f);
    } //
    
    /**
     * Returns a color map array of given size that cycles through
     * the hues of the HSB (Hue/Saturation/Brightness) color space.
     * @@param size the size of the color map array
     * @@param s the saturation value to use
     * @@param b the brightness value to use
     * @@return the color map array
     */
    public static Color[] getHSBPalette(int size, float s, float b) {
        Color[] cm = new Color[size];
        for ( int i=0; i<size; i++ ) {
            float h = ((float)i)/(size-1);
            cm[i] = ColorLib.getColor(Color.HSBtoRGB(h,s,b));
        }
        return cm;
    } //
    
    /**
     * Returns a color map array of given size tries to provide colors
     * appropriate as category labels. There are 12 basic color hues
     * (red, orange, yellow, olive, green, cyan, blue, purple, magenta,
     * and pink). If the size is greater than 12, these colors will be
     * continually repeated, but with varying saturation levels.
     * @@param size the size of the color map array
     */
    public static Color[] getCategoryPalette(int size) {
    	return getCategoryPalette(size, 1.f, 0.4f, 1.f, 255);
    } //
    
    /**
     * Returns a color map array of given size tries to provide colors
     * appropriate as category labels. There are 12 basic color hues
     * (red, orange, yellow, olive, green, cyan, blue, purple, magenta,
     * and pink). If the size is greater than 12, these colors will be
     * continually repeated, but with varying saturation levels.
     * @@param size the size of the color map array
     * @@param s1 the initial saturation to use
     * @@param s2 the final (most distant) saturation to use
     * @@param b the brightness value to use
     * @@param a the alpha value to use
     */
    public static Color[] getCategoryPalette(int size, 
    		float s1, float s2, float b, int a)
    {
        Color[] cm = new Color[size];
    	float s = s1;
    	for ( int i=0; i<size; i++ ) {
    		int j = i % CATEGORY_HUES.length;
    		if ( j == 0 )
    			s = s1 + (((float)i)/size)*(s2-s1);
    		int color = ((0xFF & a)<<24) | 
    					 (0x00FFFFFF & Color.HSBtoRGB(CATEGORY_HUES[j],s,b));
    		cm[i] = ColorLib.getColor(color);
    	}
    	return cm;
    } //
    
    /**
     * Returns a color map of default size that moves from black to
     * red to yellow to white.
     * @@return the color map array
     */
    public static Color[] getHotPalette() {
        return getHotPalette(DEFAULT_MAP_SIZE);
    } //
    
    /**
     * Returns a color map that moves from black to red to yellow
     * to white.
     * @@param size the size of the color map array
     * @@return the color map array
     */
    public static Color[] getHotPalette(int size) {
        Color[] cm = new Color[size];
        for ( int i=0; i<size; i++ ) {
            int n = (3*size)/8;
            float r = ( i<n ? ((float)(i+1))/n : 1.f );
            float g = ( i<n ? 0.f : ( i<2*n ? ((float)(i-n))/n : 1.f ));
            float b = ( i<2*n ? 0.f : ((float)(i-2*n))/(size-2*n) );
            cm[i] = ColorLib.getColor(r,g,b,1.0f);
        }
        return cm;
    } //
    
    /**
     * Returns a color map array of default size that uses a "cool",
     * blue-heavy color scheme.
     * @@return the color map array
     */
    public static Color[] getCoolPalette() {
        return getCoolPalette(DEFAULT_MAP_SIZE);
    } //
    
    /**
     * Returns a color map array that uses a "cool",
     * blue-heavy color scheme.
     * @@param size the size of the color map array
     * @@return the color map array
     */
    public static Color[] getCoolPalette(int size) {
        Color[] cm = new Color[size];
        for( int i=0; i<size; i++ ) {
            float r = i / Math.max(size-1,1.f);
            cm[i] = ColorLib.getColor(r,1-r,1.f,1.f);
        }
        return cm;
    } //
    
} // end of class ColorMap
@


1.1.2.2
log
@Table method refactoring. Added PredicateChain, included in ColorFunction, SizeFunction, and RendererFactory. Added ItemBoundsListener, included in GraphView demo. Updated ColorMap to use int representation, moved palette creators to ColorLib. Added minExtent to JRangeSlider. Fixed round-off rendering glitches int optimized rendering, added RenderingAccuracy test class. Updated PrefuseConfig to support logging output to file system. Added DelmitedTextTableWriter. Added CompositeTupleSet. Added directionality to edges, increased support to EdgeRenderer, including reversed directionality.
@
text
@d3 4
d18 14
a31 1
	private int[] palette;
d37 1
a37 1
     * @@param map the color palette, an int array of color values
d41 2
a42 2
    public ColorMap(int[] map, double min, double max) {
        palette = map;
d45 1
a45 1
    }
d50 1
a50 1
     * values, a endpoint value is returned (i.e. the first entry
d53 2
a54 2
     * @@param val the value for which to retrieve the color
     * @@return the color corresponding the given value
d56 1
a56 1
    public int getColor(double val) {
d58 1
a58 1
            return palette[0];
d60 1
a60 1
            return palette[palette.length-1];
d62 1
a62 1
            int idx = (int)Math.round((palette.length-1) *
d64 1
a64 1
            return palette[idx];
d66 1
a66 1
    }
d69 2
a70 2
     * Gets the internal color palette, an int array of color values.
     * @@return returns the color palette.
d72 3
a74 3
    public int[] getColorPalette() {
        return palette;
    }
d77 2
a78 2
     * Sets the internal color palette, an int array of color values.
     * @@param palette the new palette.
d80 3
a82 3
    public void setColorPalette(int[] palette) {
        this.palette = palette;
    }
d87 1
a87 1
     * @@return returns the max index value into the color map.
d91 1
a91 1
    }
d96 1
a96 1
     * @@param maxValue the new max index value.
d100 1
a100 1
    }
d103 1
a103 1
     * Gets the minimum value that corresponds to the first
d109 1
a109 1
    }
d112 1
a112 1
     * Sets the minimum value that corresponds to the first
d114 1
a114 1
     * @@param minValue the new min index value.
d118 173
a290 1
    }
@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d14 1
a14 1
    private int[] palette;
@


1.1.2.4
log
@Much more javadoc
@
text
@d9 2
a10 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
@


