head	2.1;
access;
symbols
	java_1_5:2.1.0.4
	Root_java_1_5:2.1
	beta:2.1.0.2
	beta-20080113:2.1
	beta-20071021:2.1
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.1
date	2006.07.15.17.32.32;	author jheer;	state Exp;
branches
	2.1.4.1;
next	2.0;

2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.30.09.08.07;	author jheer;	state Exp;
branches;
next	;

2.1.4.1
date	2008.01.23.23.55.43;	author jogiles;	state Exp;
branches;
next	2.1.4.2;

2.1.4.2
date	2008.02.28.00.40.29;	author amarsden;	state Exp;
branches;
next	2.1.4.3;

2.1.4.3
date	2008.04.24.23.06.12;	author amarsden;	state Exp;
branches;
next	;


desc
@@


2.1
log
@Added lazy initialization to promote better resource use and prevent triggering internmittent JRE bugs
@
text
@package prefuse.util.display;

import java.awt.event.ActionEvent;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.HashSet;

import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import prefuse.Display;
import prefuse.util.io.IOLib;
import prefuse.util.io.SimpleFileFilter;


/**
 * Swing ActionListener that reveals a dialog box that allows users to
 * export the current Display view to an image file.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class ExportDisplayAction extends AbstractAction {

    private Display display;
    private JFileChooser chooser;
    private ScaleSelector scaler;
    
    /**
     * Create a new ExportDisplayAction for the given Display.
     * @@param display the Display to capture
     */
    public ExportDisplayAction(Display display) {
        this.display = display;
    }
    
    private void init() {
        scaler  = new ScaleSelector();
        chooser = new JFileChooser();
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        chooser.setDialogTitle("Export Prefuse Display...");
        chooser.setAcceptAllFileFilterUsed(false);
        
        HashSet seen = new HashSet();
        String[] fmts = ImageIO.getWriterFormatNames();
        for ( int i=0; i<fmts.length; i++ ) {
            String s = fmts[i].toLowerCase();
            if ( s.length() == 3 && !seen.contains(s) ) {
                seen.add(s);
                chooser.setFileFilter(new SimpleFileFilter(s, 
                        s.toUpperCase()+" Image (*."+s+")"));
            }
        }
        seen.clear(); seen = null;
        chooser.setAccessory(scaler);
    }
    
    /**
     * Shows the image export dialog and processes the results.
     * @@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
     */
    public void actionPerformed(ActionEvent evt) {
        // lazy initialization
        if ( chooser == null )
            init();
        
        // open image save dialog
        File f = null;
        scaler.setImage(display.getOffscreenBuffer());
        int returnVal = chooser.showSaveDialog(display);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
           f = chooser.getSelectedFile();
        } else {
            return;
        }
        String format = 
            ((SimpleFileFilter)chooser.getFileFilter()).getExtension();
        String ext = IOLib.getExtension(f);        
        if ( !format.equals(ext) ) {
            f = new File(f.toString()+"."+format);
        }
        
        double scale = scaler.getScale();
        
        // save image
        boolean success = false;
        try {
            OutputStream out = new BufferedOutputStream(
                                new FileOutputStream(f));
            System.out.print("Saving image "+f.getName()+", "+
                             format+" format...");
            success = display.saveImage(out, format, scale);
            out.flush();
            out.close();
            System.out.println("\tDONE");
        } catch ( Exception e ) {
            success = false;
        }
        // show result dialog on failure
        if ( !success ) {
            JOptionPane.showMessageDialog(display,
                    "Error Saving Image!",
                    "Image Save Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
} // end of class SaveImageAction
@


2.1.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@a8 1
import java.util.Set;
d23 1
a23 1
 *
d28 1
a28 1
    private final Display display;
d31 1
a31 1

d39 1
a39 1

d46 2
a47 2

        Set<String> seen = new HashSet<String>();
d49 2
a50 2
        for (String element : fmts) {
            String s = element.toLowerCase();
d53 1
a53 1
                chooser.setFileFilter(new SimpleFileFilter(s,
d60 1
a60 1

d67 3
a69 4
        if ( chooser == null ) {
			init();
		}

d79 1
a79 1
        String format =
d81 1
a81 1
        String ext = IOLib.getExtension(f);
d85 1
a85 1

d87 1
a87 1

d110 1
a110 1

@


2.1.4.2
log
@Allow the display to be zoomed in x/y dimensions separately (animation support too)
@
text
@d97 1
a97 1
            success = display.saveImage(out, format, scale, scale);
@


2.1.4.3
log
@renamed a field
@
text
@d31 1
a31 1
    private ScaleSelector scalerX;
d42 1
a42 1
        scalerX  = new ScaleSelector();
d59 1
a59 1
        chooser.setAccessory(scalerX);
d74 1
a74 1
        scalerX.setImage(display.getOffscreenBuffer());
d88 1
a88 1
        double scale = scalerX.getScale();
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d38 3
d66 4
@


1.1
log
@file ExportDisplayAction.java was initially added on branch beta.
@
text
@d1 104
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 96
package prefuse.util.display;

import java.awt.event.ActionEvent;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.HashSet;

import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import prefuse.Display;
import prefuse.util.io.IOLib;
import prefuse.util.io.SimpleFileFilter;


/**
 * SaveImageAction
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class ExportDisplayAction extends AbstractAction {

    private Display display;
    private JFileChooser chooser;
    private ScaleSelector scaler;
    
    public ExportDisplayAction(Display display) {
        this.display = display;
        scaler  = new ScaleSelector();
        chooser = new JFileChooser();
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        chooser.setDialogTitle("Export Prefuse Display...");
        chooser.setAcceptAllFileFilterUsed(false);
        
        HashSet seen = new HashSet();
        String[] fmts = ImageIO.getWriterFormatNames();
        for ( int i=0; i<fmts.length; i++ ) {
            String s = fmts[i].toLowerCase();
            if ( s.length() == 3 && !seen.contains(s) ) {
                seen.add(s);
                chooser.setFileFilter(new SimpleFileFilter(s, 
                        s.toUpperCase()+" Image (*."+s+")"));
            }
        }
        seen.clear(); seen = null;
        chooser.setAccessory(scaler);
    } //
    
    /* (non-Javadoc)
     * @@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
     */
    public void actionPerformed(ActionEvent evt) {
        // open image save dialog
        File f = null;
        scaler.setImage(display.getOffscreenBuffer());
        int returnVal = chooser.showSaveDialog(display);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
           f = chooser.getSelectedFile();
        } else {
            return;
        }
        String format = ((SimpleFileFilter)chooser.getFileFilter()).getExtension();
        String ext = IOLib.getExtension(f);        
        if ( !format.equals(ext) ) {
            f = new File(f.toString()+"."+format);
        }
        
        double scale = scaler.getScale();
        
        // save image
        boolean success = false;
        try {
            OutputStream out = new BufferedOutputStream(new FileOutputStream(f));
            System.out.print("Saving image "+f.getName()+", "+format+" format...");
            success = display.saveImage(out, format, scale);
            out.flush();
            out.close();
            System.out.println("\tDONE");
        } catch ( Exception e ) {
            success = false;
        }
        // show result dialog on failure
        if ( !success ) {
            JOptionPane.showMessageDialog(display,
                    "Error Saving Image!",
                    "Image Save Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    } //
    
} // end of class SaveImageAction
@


1.1.2.2
log
@Much more javadoc
@
text
@d21 1
a21 2
 * Swing ActionListener that reveals a dialog box that allows users to
 * export the current Display view to an image file.
d23 2
a24 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a31 4
    /**
     * Create a new ExportDisplayAction for the given Display.
     * @@param display the Display to capture
     */
d52 1
a52 1
    }
d54 1
a54 2
    /**
     * Shows the image export dialog and processes the results.
d67 1
a67 2
        String format = 
            ((SimpleFileFilter)chooser.getFileFilter()).getExtension();
d78 2
a79 4
            OutputStream out = new BufferedOutputStream(
                                new FileOutputStream(f));
            System.out.print("Saving image "+f.getName()+", "+
                             format+" format...");
d94 1
a94 1
    }
@


