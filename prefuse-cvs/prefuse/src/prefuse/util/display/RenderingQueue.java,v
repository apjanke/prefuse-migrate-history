head	2.1;
access;
symbols
	java_1_5:2.1.0.4
	Root_java_1_5:2.1
	beta:2.1.0.2
	beta-20080113:2.1
	beta-20071021:2.1
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.1
date	2007.10.21.21.36.05;	author jheer;	state Exp;
branches
	2.1.4.1;
next	2.0;

2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.23.07.18;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.30.09.08.07;	author jheer;	state Exp;
branches;
next	;

2.1.4.1
date	2008.01.23.23.55.43;	author jogiles;	state Exp;
branches;
next	2.1.4.2;

2.1.4.2
date	2008.06.03.22.35.22;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.1
log
@Added root node checks to TreeNodeIterator to avoid iteration errors
Updated IOLib to support relative file paths (Bug #1775875 from anonymous)
Updated JRangeSlider to support drags from arrow buttons (Bug #1747778 from colincombe)
Updated ExpressionParser to avoid long parse bug (Bug #1741759)
Updated TupleManager to expand tuple list in face of valid rows from CascadedTable instances (Bug #1741106)
Added checks for min==max condition in NumberRangeModel (Bug #1731911)
Added patch to Activity and ActivityManager to avoid deadlock on Activity.cancel() (Bug #1708926 fix from joperry)
Fixed javadoc example for DefaultRendererFactory (Bug #1674371 from cab938)
Fixed ENDPOLYGON field in VisualItem (Bug #1554408 from dimerman)
Fixed FisheyeMenu demo to avoid deadlock (Bug #1672798)
Updated Tree.getDepth to return -1 if node is valid (in the node table) but not in tree (fix from joperry)
Added Display.reset method to release used memory from an idle, unused Display instance
Added Graph.removeAllGraphListeners() method
Added Table.removeAllTableListeners() method
Added isAsynchronous / setAsynchronous methods to ImageFactory
Updated Visualization.invalidate to invalidate just the group specified (it incorrectly was invalidating all groups)
Updated ActivityManager._schedule to call notifyAll when an already scheduled item is re-scheduled
@
text
@package prefuse.util.display;

import java.util.Arrays;

import prefuse.util.ArrayLib;
import prefuse.visual.VisualItem;
import prefuse.visual.sort.ItemSorter;

/**
 * A helper class representing rendering and picking queues. This functionality
 * is listed separately to keep the Display implementation a bit cleaner.
 * Fields are public and used directly by a single Display instance.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class RenderingQueue {

    private static final int DEFAULT_SIZE = 256;
    
    public ItemSorter   sort   = new ItemSorter();
    
    // rendering queue
    public VisualItem[] ritems  = new VisualItem[DEFAULT_SIZE];
    public int[]        rscores = new int[DEFAULT_SIZE];
    public int          rsize   = 0;
    
    // picking queue
    public VisualItem[] pitems  = new VisualItem[DEFAULT_SIZE];
    public int[]        pscores = new int[DEFAULT_SIZE];
    public int          psize   = 0;
    public boolean      psorted = false;
    
    // buffer queues for use in sorting, these prevent continual re-allocation
    transient static VisualItem[] items_buf;
    transient static int[]        scores_buf;
    
    /**
     * Clear both rendering and picking queues.
     */
    public void clear() {
        Arrays.fill(ritems, 0, rsize, null);
        Arrays.fill(pitems, 0, psize, null);
        rsize = 0;
        psize = 0;
    }
    
    /**
     * Clears the rendering queue and resizes internal arrays to a small size.
     * This should help reclaim used memory.
     */
    public void clean() {
    	clear();
    	ritems = new VisualItem[DEFAULT_SIZE];
    	rscores = new int[DEFAULT_SIZE];
    	pitems = new VisualItem[DEFAULT_SIZE];
    	pscores = new int[DEFAULT_SIZE];
    	items_buf = null;
    	scores_buf = null;
    }
    
    /**
     * Add an item to the rendering queue.
     * @@param item the item to add
     */
    public void addToRenderQueue(VisualItem item) {
        if ( ritems.length == rsize ) {
            int capacity = (3*ritems.length)/2 + 1;
            VisualItem[] q = new VisualItem[capacity];
            int[] s = new int[capacity];
            System.arraycopy(ritems, 0, q, 0, rsize);
            System.arraycopy(rscores, 0, s, 0, rsize);
            ritems = q;
            rscores = s;
        }
        ritems[rsize] = item;
        rscores[rsize++] = (sort != null ? sort.score(item) : 0);
    }
    
    /**
     * Add an item to the picking queue.
     * @@param item the item to add
     */
    public void addToPickingQueue(VisualItem item) {
        if ( pitems.length == psize ) {
            int capacity = (3*pitems.length)/2 + 1;
            VisualItem[] q = new VisualItem[capacity];
            int[] s = new int[capacity];
            System.arraycopy(pitems, 0, q, 0, psize);
            System.arraycopy(pscores, 0, s, 0, psize);
            pitems = q;
            pscores = s;
        }
        pitems[psize] = item;
        pscores[psize++] = (sort != null ? sort.score(item) : 0);
        psorted = false;
    }
    
    /**
     * Sort the rendering queue.
     */
    public void sortRenderQueue() {
        sort(ritems, rscores, rsize);
    }
    
    /**
     * Sort the picking queue. 
     */
    public void sortPickingQueue() {
        sort(pitems, pscores, psize);
        psorted = true;
    }
    
    /**
     * Sort a queue of items based upon an array of ordering scores. 
     */
    private void sort(VisualItem[] items, int[] scores, int size) {
        if ( sort == null ) return;
        // first check buffer queues
        if ( items_buf == null || items_buf.length < size ) {
            items_buf = new VisualItem[items.length];
            scores_buf = new int[scores.length];
        }
        // now sort
        ArrayLib.sort(scores, items, scores_buf, items_buf, 0, size);
    }
    
} // end of class RenderingQueue
@


2.1.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d13 1
a13 1
 *
d19 1
a19 1

d21 1
a21 1

d23 1
a23 1
    public VisualItem<?>[] ritems  = new VisualItem[DEFAULT_SIZE];
d26 1
a26 1

d28 1
a28 1
    public VisualItem<?>[] pitems  = new VisualItem[DEFAULT_SIZE];
d32 1
a32 1

d34 1
a34 1
    transient static VisualItem<?>[] items_buf;
d36 1
a36 1

d46 1
a46 1

d60 1
a60 1

d65 1
a65 1
    public void addToRenderQueue(VisualItem<?> item) {
d67 2
a68 2
            int capacity = 3*ritems.length/2 + 1;
            VisualItem<?>[] q = new VisualItem[capacity];
d76 1
a76 1
        rscores[rsize++] = sort != null ? sort.score(item) : 0;
d78 1
a78 1

d83 1
a83 1
    public void addToPickingQueue(VisualItem<?> item) {
d85 2
a86 2
            int capacity = 3*pitems.length/2 + 1;
            VisualItem<?>[] q = new VisualItem[capacity];
d94 1
a94 1
        pscores[psize++] = sort != null ? sort.score(item) : 0;
d97 1
a97 1

d104 1
a104 1

d106 1
a106 1
     * Sort the picking queue.
d112 1
a112 1

d114 1
a114 1
     * Sort a queue of items based upon an array of ordering scores.
d116 2
a117 4
    private void sort(VisualItem<?>[] items, int[] scores, int size) {
        if ( sort == null ) {
			return;
		}
d126 1
a126 1

@


2.1.4.2
log
@applied memory leak patch provided by 'code_m0nkey' here: http://sourceforge.net/tracker/index.php?func=detail&aid=1969196&group_id=98962&atid=622647
@
text
@d10 4
a13 4
 * A helper class representing rendering and picking queues. This functionality is listed separately
 * to keep the Display implementation a bit cleaner. Fields are public and used directly by a single
 * Display instance.
 * 
d18 1
a18 1
	private static final int DEFAULT_SIZE = 256;
d20 1
a20 1
	public ItemSorter sort = new ItemSorter();
d22 96
a117 100
	// rendering queue
	public VisualItem<?>[] ritems = new VisualItem[DEFAULT_SIZE];
	public int[] rscores = new int[DEFAULT_SIZE];
	public int rsize = 0;

	// picking queue
	public VisualItem<?>[] pitems = new VisualItem[DEFAULT_SIZE];
	public int[] pscores = new int[DEFAULT_SIZE];
	public int psize = 0;
	public boolean psorted = false;

	// buffer queues for use in sorting, these prevent continual re-allocation
	transient static VisualItem<?>[] items_buf;
	transient static int[] scores_buf;

	/**
	 * Clear both rendering and picking queues.
	 */
	public void clear() {
		Arrays.fill(ritems, 0, rsize, null);
		Arrays.fill(pitems, 0, psize, null);
		rsize = 0;
		psize = 0;
	}

	/**
	 * Clears the rendering queue and resizes internal arrays to a small size. This should help
	 * reclaim used memory.
	 */
	public void clean() {
		clear();
		ritems = new VisualItem[DEFAULT_SIZE];
		rscores = new int[DEFAULT_SIZE];
		pitems = new VisualItem[DEFAULT_SIZE];
		pscores = new int[DEFAULT_SIZE];
		items_buf = null;
		scores_buf = null;
	}

	/**
	 * Add an item to the rendering queue.
	 * 
	 * @@param item
	 *            the item to add
	 */
	public void addToRenderQueue(final VisualItem<?> item) {
		if (ritems.length == rsize) {
			final int capacity = 3 * ritems.length / 2 + 1;
			final VisualItem<?>[] q = new VisualItem[capacity];
			final int[] s = new int[capacity];
			System.arraycopy(ritems, 0, q, 0, rsize);
			System.arraycopy(rscores, 0, s, 0, rsize);
			ritems = q;
			rscores = s;
		}
		ritems[rsize] = item;
		rscores[rsize++] = sort != null ? sort.score(item) : 0;
	}

	/**
	 * Add an item to the picking queue.
	 * 
	 * @@param item
	 *            the item to add
	 */
	public void addToPickingQueue(final VisualItem<?> item) {
		if (pitems.length == psize) {
			final int capacity = 3 * pitems.length / 2 + 1;
			final VisualItem<?>[] q = new VisualItem[capacity];
			final int[] s = new int[capacity];
			System.arraycopy(pitems, 0, q, 0, psize);
			System.arraycopy(pscores, 0, s, 0, psize);
			pitems = q;
			pscores = s;
		}
		pitems[psize] = item;
		pscores[psize++] = sort != null ? sort.score(item) : 0;
		psorted = false;
	}

	/**
	 * Sort the rendering queue.
	 */
	public void sortRenderQueue() {
		sort(ritems, rscores, rsize);
	}

	/**
	 * Sort the picking queue.
	 */
	public void sortPickingQueue() {
		sort(pitems, pscores, psize);
		psorted = true;
	}

	/**
	 * Sort a queue of items based upon an array of ordering scores.
	 */
	private void sort(final VisualItem<?>[] items, final int[] scores, final int size) {
		if (sort == null) {
d120 8
a127 11
		// first check buffer queues
		if (items_buf == null || items_buf.length < size) {
			items_buf = new VisualItem[items.length];
			scores_buf = new int[scores.length];
		}
		// now sort
		ArrayLib.sort(scores, items, scores_buf, items_buf, 0, size);

		// clean up the temp buffer from object references
		Arrays.fill(items_buf, null);
	}
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d48 14
@


1.1
log
@file RenderingQueue.java was initially added on branch beta.
@
text
@d1 113
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 93
package prefuse.util.display;

import java.util.Arrays;

import prefuse.util.ArrayLib;
import prefuse.visual.VisualItem;
import prefuse.visual.sort.ItemSorter;

/**
 * A helper class representing rendering and picking queues. This functionality
 * is listed separately to keep the Display implementation a bit cleaner.
 * Fields are public and used directly by a single Display instance.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class RenderingQueue {

    private static final int DEFAULT_SIZE = 256;
    
    public ItemSorter   sort   = new ItemSorter();
    
    // rendering queue
    public VisualItem[] ritems  = new VisualItem[DEFAULT_SIZE];
    public int[]        rscores = new int[DEFAULT_SIZE];
    public int          rsize   = 0;
    
    // picking queue
    public VisualItem[] pitems  = new VisualItem[DEFAULT_SIZE];
    public int[]        pscores = new int[DEFAULT_SIZE];
    public int          psize   = 0;
    public boolean      psorted = false;
    
    // buffer queues for use in sorting, these prevent continual re-allocation
    transient static VisualItem[] items_buf;
    transient static int[]        scores_buf;
    
    public void clear() {
        Arrays.fill(ritems, 0, rsize, null);
        Arrays.fill(pitems, 0, psize, null);
        rsize = 0;
        psize = 0;
    }
    
    public void addToRenderQueue(VisualItem item) {
        if ( ritems.length == rsize ) {
            int capacity = (3*ritems.length)/2 + 1;
            VisualItem[] q = new VisualItem[capacity];
            int[] s = new int[capacity];
            System.arraycopy(ritems, 0, q, 0, rsize);
            System.arraycopy(rscores, 0, s, 0, rsize);
            ritems = q;
            rscores = s;
        }
        ritems[rsize] = item;
        rscores[rsize++] = (sort != null ? sort.score(item) : 0);
    }
    
    public void addToPickingQueue(VisualItem item) {
        if ( pitems.length == psize ) {
            int capacity = (3*pitems.length)/2 + 1;
            VisualItem[] q = new VisualItem[capacity];
            int[] s = new int[capacity];
            System.arraycopy(pitems, 0, q, 0, psize);
            System.arraycopy(pscores, 0, s, 0, psize);
            pitems = q;
            pscores = s;
        }
        pitems[psize] = item;
        pscores[psize++] = (sort != null ? sort.score(item) : 0);
        psorted = false;
    }
    
    public void sortRenderQueue() {
        sort(ritems, rscores, rsize);
    }
    
    public void sortPickingQueue() {
        sort(pitems, pscores, psize);
        psorted = true;
    }
    
    private void sort(VisualItem[] items, int[] scores, int size) {
        if ( sort == null ) return;
        // first check buffer queues
        if ( items_buf == null || items_buf.length < size ) {
            items_buf = new VisualItem[items.length];
            scores_buf = new int[scores.length];
        }
        // now sort
        ArrayLib.sort(scores, items, scores_buf, items_buf, 0, size);
    }
    
} // end of class RenderingQueue@


1.1.2.2
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d93 1
a93 1
} // end of class RenderingQueue
@


1.1.2.3
log
@Much more javadoc
@
text
@d14 1
a14 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a36 3
    /**
     * Clear both rendering and picking queues.
     */
a43 4
    /**
     * Add an item to the rendering queue.
     * @@param item the item to add
     */
a57 4
    /**
     * Add an item to the picking queue.
     * @@param item the item to add
     */
a72 3
    /**
     * Sort the rendering queue.
     */
a76 3
    /**
     * Sort the picking queue. 
     */
a81 3
    /**
     * Sort a queue of items based upon an array of ordering scores. 
     */
@


