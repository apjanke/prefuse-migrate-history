head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.16.20.07.42;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.18;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.01.30.09.08.07;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.43;	author jogiles;	state Exp;
branches;
next	2.0.4.2;

2.0.4.2
date	2008.02.28.00.40.29;	author amarsden;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util.display;

import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import prefuse.Display;
import prefuse.visual.VisualItem;


/**
 * Library routines pertaining to a prefuse Display.
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class DisplayLib {

    private DisplayLib() {
        // don't instantiate
    }
    
    /**
     * Get a bounding rectangle of the VisualItems in the input iterator.
     * @@param iter an iterator of VisualItems
     * @@param margin a margin to add on to the bounding rectangle
     * @@param b the Rectangle instance in which to store the result
     * @@return the bounding rectangle. This is the same object as the
     * parameter <code>b</code>.
     */
    public static Rectangle2D getBounds(
        Iterator iter, double margin, Rectangle2D b)
    {
        b.setFrame(Double.NaN,Double.NaN,Double.NaN,Double.NaN);
        // TODO: synchronization?
        if ( iter.hasNext() ) {
            VisualItem item = (VisualItem)iter.next();
            Rectangle2D nb = item.getBounds();
            b.setFrame(nb);
        }
        while ( iter.hasNext() ) {   
            VisualItem item = (VisualItem)iter.next();
            Rectangle2D nb = item.getBounds();
            double x1 = (nb.getMinX()<b.getMinX() ? nb.getMinX() : b.getMinX());
            double x2 = (nb.getMaxX()>b.getMaxX() ? nb.getMaxX() : b.getMaxX());
            double y1 = (nb.getMinY()<b.getMinY() ? nb.getMinY() : b.getMinY());
            double y2 = (nb.getMaxY()>b.getMaxY() ? nb.getMaxY() : b.getMaxY());
            b.setFrame(x1,y1,x2-x1,y2-y1);
        }
        b.setFrame(b.getMinX() - margin,
                   b.getMinY() - margin,
                   b.getWidth() + 2*margin,
                   b.getHeight() + 2*margin);
        return b;
    }
    
    /**
     * Get a bounding rectangle of the VisualItems in the input iterator.
     * @@param iter an iterator of VisualItems
     * @@param margin a margin to add on to the bounding rectangle
     * @@return the bounding rectangle. A new Rectangle2D instance is
     * allocated and returned.
     */
    public static Rectangle2D getBounds(Iterator iter, double margin)
    {
        Rectangle2D b = new Rectangle2D.Double();
        return getBounds(iter, margin, b);
    }
    
    /**
     * Return the centroid (averaged location) of a group of items.
     * @@param iter an iterator of VisualItems
     * @@param p a Point2D instance in which to store the result
     * @@return the centroid point. This is the same object as the
     * parameter <code>p</code>.
     */
    public static Point2D getCentroid(Iterator iter, Point2D p) {
        double cx = 0, cy = 0;
        int count = 0;
        
        while ( iter.hasNext() ) {
            VisualItem item = (VisualItem)iter.next();
            double x = item.getX(), y = item.getY();
            if ( !(Double.isInfinite(x) || Double.isNaN(x)) &&
                 !(Double.isInfinite(y) || Double.isNaN(y)) )
            {
                cx += x;
                cy += y;
                count++;
            }
        }
        if ( count > 0 ) {
            cx /= count;
            cy /= count;
        }
        p.setLocation(cx, cy);
        return p;
    }
    
    /**
     * Return the centroid (averaged location) of a group of items.
     * @@param iter an iterator of VisualItems
     * @@return the centroid point. A new Point2D instance is allocated
     * and returned.
     */
    public static Point2D getCentroid(Iterator iter)
    {
        return getCentroid(iter, new Point2D.Double());
    }
    
    /**
     * Set the display view such that the given bounds are within view.
     * @@param display the Display instance
     * @@param bounds the bounds that should be visible in the Display view
     * @@param duration the duration of an animated transition. A value of
     * zero will result in an instantaneous change.
     */
    public static void fitViewToBounds(Display display, Rectangle2D bounds,
            long duration)
    {
        fitViewToBounds(display, bounds, null, duration);
    }

    /**
     * Set the display view such that the given bounds are within view, subject
     * to a given center point being maintained.
     * @@param display the Display instance
     * @@param bounds the bounds that should be visible in the Display view
     * @@param center the point that should be the center of the Display
     * @@param duration the duration of an animated transition. A value of
     * zero will result in an instantaneous change.
     */
    public static void fitViewToBounds(Display display, Rectangle2D bounds,
            Point2D center, long duration)
    {
        // init variables
        double w = display.getWidth(), h = display.getHeight();
        double cx = (center==null? bounds.getCenterX() : center.getX());
        double cy = (center==null? bounds.getCenterY() : center.getY());
        
        // compute half-widths of final bounding box around
        // the desired center point
        double wb = Math.max(cx-bounds.getMinX(),
                             bounds.getMaxX()-cx);
        double hb = Math.max(cy-bounds.getMinY(),
                             bounds.getMaxY()-cy);
        
        // compute scale factor
        //  - figure out if z or y dimension takes priority
        //  - then balance against the current scale factor
        double scale = Math.min(w/(2*wb),h/(2*hb)) / display.getScale();

        // animate to new display settings
        if ( center == null )
            center = new Point2D.Double(cx,cy);
        if ( duration > 0 ) {
            display.animatePanAndZoomToAbs(center,scale,duration);
        } else {
            display.panToAbs(center);
            display.zoomAbs(center, scale);
        }
    }
    
} // end of class DisplayLib
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d5 1
d21 1
a21 1

d31 1
a31 1
    		Iterable<VisualItem<?>> iter, double margin, Rectangle2D b)
a32 1
    	boolean first = true;
d35 14
a48 18
        for (VisualItem<?> item : iter) {
			if (first) {
				Rectangle2D nb = item.getBounds();
				b.setFrame(nb);
				first = false;
			} else {
				Rectangle2D nb = item.getBounds();
				double x1 = nb.getMinX() < b.getMinX() ? nb.getMinX() : b
						.getMinX();
				double x2 = nb.getMaxX() > b.getMaxX() ? nb.getMaxX() : b
						.getMaxX();
				double y1 = nb.getMinY() < b.getMinY() ? nb.getMinY() : b
						.getMinY();
				double y2 = nb.getMaxY() > b.getMaxY() ? nb.getMaxY() : b
						.getMaxY();
				b.setFrame(x1, y1, x2 - x1, y2 - y1);
			}
		}
d55 1
a55 1

d63 1
a63 1
    public static Rectangle2D getBounds(Iterable<VisualItem<?>> iter, double margin)
d68 1
a68 1

d76 1
a76 1
    public static Point2D getCentroid(Iterable<VisualItem<?>> iter, Point2D p) {
d79 3
a81 2

        for (VisualItem<?> item : iter ) {
d98 1
a98 1

d105 1
a105 1
    public static Point2D getCentroid(Iterable<VisualItem<?>> iter)
d109 1
a109 1

d137 3
a139 3
        double cx = center==null? bounds.getCenterX() : center.getX();
        double cy = center==null? bounds.getCenterY() : center.getY();

d146 1
a146 1

d153 2
a154 3
        if ( center == null ) {
			center = new Point2D.Double(cx,cy);
		}
d162 1
a162 1

@


2.0.4.2
log
@Allow the display to be zoomed in x/y dimensions separately (animation support too)
@
text
@a103 1
     *
d105 2
a106 1
     * @@return the centroid point. A new Point2D instance is allocated and returned.
d114 1
a114 3
     * Set the display view such that the given bounds are within view. Uses the same
     * scaling for x and y dimensions.
     *
d128 1
a128 3
     * to a given center point being maintained. Uses the same scaling for x and y
     * dimensions.
     *
d153 1
a153 1
        double scale = Math.min(w/(2*wb),h/(2*hb)) / display.getScaleX();
d160 1
a160 1
            display.animatePanAndZoomToAbs(center,scale,scale,duration);
d163 1
a163 1
            display.zoomAbs(center, scale, scale);
@


1.1
log
@file DisplayLib.java was initially added on branch beta.
@
text
@d1 163
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 115
package prefuse.util.display;

import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import prefuse.Display;
import prefuse.visual.VisualItem;


/**
 * DisplayLib
 *  
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class DisplayLib {

    private DisplayLib() {
        // don't instantiate
    } //
    
    public static Rectangle2D getBounds(
        Iterator iter, double margin, Rectangle2D b)
    {
        b.setFrame(Double.NaN,Double.NaN,Double.NaN,Double.NaN);
        // TODO: synchronization?
        if ( iter.hasNext() ) {
            VisualItem item = (VisualItem)iter.next();
            Rectangle2D nb = item.getBounds();
            b.setFrame(nb);
        }
        while ( iter.hasNext() ) {   
            VisualItem item = (VisualItem)iter.next();
            Rectangle2D nb = item.getBounds();
            double x1 = (nb.getMinX()<b.getMinX() ? nb.getMinX() : b.getMinX());
            double x2 = (nb.getMaxX()>b.getMaxX() ? nb.getMaxX() : b.getMaxX());
            double y1 = (nb.getMinY()<b.getMinY() ? nb.getMinY() : b.getMinY());
            double y2 = (nb.getMaxY()>b.getMaxY() ? nb.getMaxY() : b.getMaxY());
            b.setFrame(x1,y1,x2-x1,y2-y1);
        }
        b.setFrame(b.getMinX() - margin,
                   b.getMinY() - margin,
                   b.getWidth() + 2*margin,
                   b.getHeight() + 2*margin);
        return b;
    } //
    
    public static Rectangle2D getBounds(Iterator iter, double margin)
    {
        Rectangle2D b = new Rectangle2D.Double();
        return getBounds(iter, margin, b);
    } //
    
    public static Point2D getCentroid(Iterator iter, Point2D p) {
        double cx = 0, cy = 0;
        int count = 0;
        
        while ( iter.hasNext() ) {
            VisualItem item = (VisualItem)iter.next();
            double x = item.getX(), y = item.getY();
            if ( !(Double.isInfinite(x) || Double.isNaN(x)) &&
                 !(Double.isInfinite(y) || Double.isNaN(y)) )
            {
                cx += x;
                cy += y;
                count++;
            }
        }
        if ( count > 0 ) {
            cx /= count;
            cy /= count;
        }
        p.setLocation(cx, cy);
        return p;
    } //
    
    public static Point2D getCentroid(Iterator iter)
    {
        return getCentroid(iter, new Point2D.Double());
    } //
    
    public static void fitViewToBounds(Display display, Rectangle2D bounds,
            long duration)
    {
        fitViewToBounds(display, bounds, null, duration);
    }
    
    public static void fitViewToBounds(Display display, Rectangle2D bounds,
            Point2D center, long duration)
    {
        // init variables
        double w = display.getWidth(), h = display.getHeight();
        double cx = (center==null? bounds.getCenterX() : center.getX());
        double cy = (center==null? bounds.getCenterY() : center.getY());
        
        // compute half-widths of final bounding box around
        // the desired center point
        double wb = Math.max(cx-bounds.getMinX(),
                			 bounds.getMaxX()-cx);
        double hb = Math.max(cy-bounds.getMinY(),
   			 				 bounds.getMaxY()-cy);
        
        // compute scale factor
        //  - figure out if z or y dimension takes priority
        //  - then balance against the current scale factor
        double scale = Math.min(w/(2*wb),h/(2*hb)) / display.getScale();

        // animate to new display settings
        if ( center == null )
            center = new Point2D.Double(cx,cy);
        display.animatePanAndZoomToAbs(center,scale,duration);
    } //
    
} // end of class DisplayLib
@


1.1.2.2
log
@Table method refactoring. Added PredicateChain, included in ColorFunction, SizeFunction, and RendererFactory. Added ItemBoundsListener, included in GraphView demo. Updated ColorMap to use int representation, moved palette creators to ColorLib. Added minExtent to JRangeSlider. Fixed round-off rendering glitches int optimized rendering, added RenderingAccuracy test class. Updated PrefuseConfig to support logging output to file system. Added DelmitedTextTableWriter. Added CompositeTupleSet. Added directionality to edges, increased support to EdgeRenderer, including reversed directionality.
@
text
@d112 1
a112 7
        if ( duration > 0 ) {
        	display.animatePanAndZoomToAbs(center,scale,duration);
        } else {
        	display.panToAbs(center);
            display.zoomAbs(center, scale);
        }
        
@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d100 1
a100 1
                             bounds.getMaxX()-cx);
d102 1
a102 1
                             bounds.getMaxY()-cy);
d113 1
a113 1
            display.animatePanAndZoomToAbs(center,scale,duration);
d115 1
a115 1
            display.panToAbs(center);
@


1.1.2.4
log
@Much more javadoc
@
text
@d12 4
a15 3
 * Library routines pertaining to a prefuse Display.
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d21 1
a21 1
    }
a22 8
    /**
     * Get a bounding rectangle of the VisualItems in the input iterator.
     * @@param iter an iterator of VisualItems
     * @@param margin a margin to add on to the bounding rectangle
     * @@param b the Rectangle instance in which to store the result
     * @@return the bounding rectangle. This is the same object as the
     * parameter <code>b</code>.
     */
d47 1
a47 1
    }
a48 7
    /**
     * Get a bounding rectangle of the VisualItems in the input iterator.
     * @@param iter an iterator of VisualItems
     * @@param margin a margin to add on to the bounding rectangle
     * @@return the bounding rectangle. A new Rectangle2D instance is
     * allocated and returned.
     */
d53 1
a53 1
    }
a54 7
    /**
     * Return the centroid (averaged location) of a group of items.
     * @@param iter an iterator of VisualItems
     * @@param p a Point2D instance in which to store the result
     * @@return the centroid point. This is the same object as the
     * parameter <code>p</code>.
     */
d76 1
a76 1
    }
a77 6
    /**
     * Return the centroid (averaged location) of a group of items.
     * @@param iter an iterator of VisualItems
     * @@return the centroid point. A new Point2D instance is allocated
     * and returned.
     */
d81 1
a81 1
    }
a82 7
    /**
     * Set the display view such that the given bounds are within view.
     * @@param display the Display instance
     * @@param bounds the bounds that should be visible in the Display view
     * @@param duration the duration of an animated transition. A value of
     * zero will result in an instantaneous change.
     */
d88 1
a88 10

    /**
     * Set the display view such that the given bounds are within view, subject
     * to a given center point being maintained.
     * @@param display the Display instance
     * @@param bounds the bounds that should be visible in the Display view
     * @@param center the point that should be the center of the Display
     * @@param duration the duration of an animated transition. A value of
     * zero will result in an instantaneous change.
     */
d118 2
a119 1
    }
@


