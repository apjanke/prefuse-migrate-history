head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.45;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.30.09.08.06;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.02.01.19.22.43;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.36;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util;

import java.awt.Font;

import prefuse.util.collections.IntObjectHashMap;

/**
 * Library maintaining a cache of fonts and other useful font computation
 * routines.
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class FontLib {

    private static final IntObjectHashMap fontMap = new IntObjectHashMap();
    private static int misses = 0;
    private static int lookups = 0;
    
    /**
     * Get a Font instance with the given font family name and size. A
     * plain font style is assumed.
     * @@param name the font name. Any font installed on your system should
     * be valid. Common examples include "Arial", "Verdana", "Tahoma",
     * "Times New Roman", "Georgia", and "Courier New".
     * @@param size the size, in points, of the font
     * @@return the requested Font instance
     */
    public static Font getFont(String name, double size) {
        int isize = (int)Math.floor(size);
        return getFont(name, Font.PLAIN, isize);
    }
    
    /**
     * Get a Font instance with the given font family name, style, and size
     * @@param name the font name. Any font installed on your system should
     * be valid. Common examples include "Arial", "Verdana", "Tahoma",
     * "Times New Roman", "Georgia", and "Courier New".
     * @@param style the font style, such as bold or italics. This field
     * uses the same style values as the Java {@@link java.awt.Font} class.
     * @@param size the size, in points, of the font
     * @@return the requested Font instance
     */
    public static Font getFont(String name, int style, double size) {
        int isize = (int)Math.floor(size);
        return getFont(name, style, isize);
    }
    
    /**
     * Get a Font instance with the given font family name, style, and size
     * @@param name the font name. Any font installed on your system should
     * be valid. Common examples include "Arial", "Verdana", "Tahoma",
     * "Times New Roman", "Georgia", and "Courier New".
     * @@param style the font style, such as bold or italics. This field
     * uses the same style values as the Java {@@link java.awt.Font} class.
     * @@param size the size, in points, of the font
     * @@return the requested Font instance
     */
    public static Font getFont(String name, int style, int size) {
        int key = (name.hashCode()<<8)+(size<<2)+style;
        Font f = null;
        if ( (f=(Font)fontMap.get(key)) == null ) {
            f = new Font(name, style, size);
            fontMap.put(key, f);
            misses++;
        }
        lookups++;
        return f;
    }
    
    /**
     * Get the number of cache misses to the Font object cache.
     * @@return the number of cache misses
     */
    public static int getCacheMissCount() {
        return misses;
    }
    
    /**
     * Get the number of cache lookups to the Font object cache.
     * @@return the number of cache lookups
     */
    public static int getCacheLookupCount() {
        return lookups;
    }
    
    /**
     * Clear the Font object cache.
     */
    public static void clearCache() {
        fontMap.clear();
    }
    
    /**
     * Interpolate between two font instances. Font sizes are interpolated
     * linearly. If the interpolation fraction is under 0.5, the face and
     * style of the starting font are used, otherwise the face and style of
     * the second font are applied.
     * @@param f1 the starting font
     * @@param f2 the target font
     * @@param frac a fraction between 0 and 1.0 controlling the interpolation
     * amount.
     * @@return an interpolated Font instance
     */
    public static Font getIntermediateFont(Font f1, Font f2, double frac) {
        String name;
        int size, style;
        if ( frac < 0.5 ) {
            name  = f1.getName();
            style = f1.getStyle();
        } else {
            name  = f2.getName();
            style = f2.getStyle();
        }
        size = (int)Math.round(frac*f2.getSize()+(1-frac)*f1.getSize());
        return getFont(name,style,size);
    }
    
} // end of class FontLib
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d18 1
a18 1

d32 1
a32 1

d47 1
a47 1

d69 1
a69 1

d77 1
a77 1

d85 1
a85 1

d92 1
a92 1

d117 1
a117 1

@


1.1
log
@file FontLib.java was initially added on branch beta.
@
text
@d1 118
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 68
package prefuse.util;

import java.awt.Font;

import prefuse.util.collections.IntObjectHashMap;

/**
 * Maintains a cache of fonts and other useful font computation
 * routines.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">jeffrey heer</a> prefuse(AT)jheer.org
 */
public class FontLib {

    private static final IntObjectHashMap fontMap = new IntObjectHashMap();
    private static int misses = 0;
    private static int lookups = 0;
    
    public static Font getFont(String name, double size) {
        int isize = (int)Math.floor(size);
        return getFont(name, Font.PLAIN, isize);
    }
    
    public static Font getFont(String name, int style, double size) {
        int isize = (int)Math.floor(size);
        return getFont(name, style, isize);
    }
    
    public static Font getFont(String name, int style, int size) {
        int key = (name.hashCode()<<8)+(size<<2)+style;
        Font f = null;
        if ( (f=(Font)fontMap.get(key)) == null ) {
            f = new Font(name, style, size);
            fontMap.put(key, f);
            misses++;
        }
        lookups++;
        return f;
    }
    
    public static int getCacheMissCount() {
        return misses;
    }
    
    public static int getCacheLookupCount() {
        return lookups;
    }
    
    public static void clearCache() {
        fontMap.clear();
    }
    
    public static Font getIntermediateFont(Font f1, Font f2, double frac) {
        String name;
        int size, style;
        if ( frac < 0.5 ) {
            name  = f1.getName();
            style = f1.getStyle();
        } else {
            name  = f2.getName();
            style = f2.getStyle();
        }
        size = (int)Math.round(frac*f2.getSize()+(1-frac)*f1.getSize());
        return getFont(name,style,size);
    }
    
} // end of class FontLib
@


1.1.2.2
log
@Much more javadoc
@
text
@d8 1
a8 1
 * Library maintaining a cache of fonts and other useful font computation
d11 2
a12 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a19 9
    /**
     * Get a Font instance with the given font family name and size. A
     * plain font style is assumed.
     * @@param name the font name. Any font installed on your system should
     * be valid. Common examples include "Arial", "Verdana", "Tahoma",
     * "Times New Roman", "Georgia", and "Courier New".
     * @@param size the size, in points, of the font
     * @@return the requested Font instance
     */
a24 10
    /**
     * Get a Font instance with the given font family name, style, and size
     * @@param name the font name. Any font installed on your system should
     * be valid. Common examples include "Arial", "Verdana", "Tahoma",
     * "Times New Roman", "Georgia", and "Courier New".
     * @@param style the font style, such as bold or italics. This field
     * uses the same style values as the Java {@@link java.awt.Font} class.
     * @@param size the size, in points, of the font
     * @@return the requested Font instance
     */
a29 10
    /**
     * Get a Font instance with the given font family name, style, and size
     * @@param name the font name. Any font installed on your system should
     * be valid. Common examples include "Arial", "Verdana", "Tahoma",
     * "Times New Roman", "Georgia", and "Courier New".
     * @@param style the font style, such as bold or italics. This field
     * uses the same style values as the Java {@@link java.awt.Font} class.
     * @@param size the size, in points, of the font
     * @@return the requested Font instance
     */
a41 4
    /**
     * Get the number of cache misses to the Font object cache.
     * @@param return the number of cache misses
     */
a45 4
    /**
     * Get the number of cache lookups to the Font object cache.
     * @@param return the number of cache lookups
     */
a49 3
    /**
     * Clear the Font object cache.
     */
a53 11
    /**
     * Interpolate between two font instances. Font sizes are interpolated
     * linearly. If the interpolation fraction is under 0.5, the face and
     * style of the starting font are used, otherwise the face and style of
     * the second font are applied.
     * @@param f1 the starting font
     * @@param f2 the target font
     * @@param frac a fraction between 0 and 1.0 controlling the interpolation
     * amount.
     * @@return an interpolated Font instance
     */
@


1.1.2.3
log
@Javadoc'd.
@
text
@d72 1
a72 1
     * @@return the number of cache misses
d80 1
a80 1
     * @@return the number of cache lookups
@


