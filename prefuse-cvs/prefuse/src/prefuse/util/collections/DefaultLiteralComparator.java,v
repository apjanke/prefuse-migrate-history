head	2.2;
access;
symbols
	java_1_5:2.2.0.4
	Root_java_1_5:2.2
	beta:2.2.0.2
	beta-20080113:2.2
	beta-20071021:2.2
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.2
date	2006.07.15.18.12.04;	author jheer;	state Exp;
branches
	2.2.4.1;
next	2.1;

2.1
date	2006.03.06.00.33.09;	author jheer;	state Exp;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.02.02.19.01.51;	author jheer;	state Exp;
branches;
next	;

2.2.4.1
date	2008.01.23.23.55.38;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.2
log
@Added comparison of byte values
@
text
@package prefuse.util.collections;

/**
 * Default LiteralComparator implementation that uses the natural ordering
 * of all data types for comparing values. Object values will need to
 * implement the {@@link java.lang.Comparable} interface.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class DefaultLiteralComparator implements LiteralComparator {

    // maintain a singleton instance of this class
    private static DefaultLiteralComparator s_instance = null;
    
    /**
     * Returns an instance of this comparator.
     * @@return a DefaultLiteralComparator
     */
    public static DefaultLiteralComparator getInstance() {
        if ( s_instance == null )
            s_instance = new DefaultLiteralComparator();
        return s_instance;
    }
    
    /**
     * @@see prefuse.util.collections.LiteralComparator#compare(byte, byte)
     */
    public int compare(byte x1, byte x2) {
        return ( x1 < x2 ? -1 : x1 > x2 ? 1 : 0 );
    }
    
    /**
     * @@see prefuse.util.collections.LiteralComparator#compare(int, int)
     */
    public int compare(int x1, int x2) {
        return ( x1 < x2 ? -1 : x1 > x2 ? 1 : 0 );
    }

    /**
     * @@see prefuse.util.collections.LiteralComparator#compare(long, long)
     */
    public int compare(long x1, long x2) {
        return ( x1 < x2 ? -1 : x1 > x2 ? 1 : 0 );
    }

    /**
     * @@see prefuse.util.collections.LiteralComparator#compare(float, float)
     */
    public int compare(float x1, float x2) {
        return Float.compare(x1, x2);
    }

    /**
     * @@see prefuse.util.collections.LiteralComparator#compare(double, double)
     */
    public int compare(double x1, double x2) {
        return Double.compare(x1, x2);
    }

    /**
     * @@see prefuse.util.collections.LiteralComparator#compare(boolean, boolean)
     */
    public int compare(boolean x1, boolean x2) {
        return ( x1 ? (x2 ? 0 : 1) : (x2 ? -1 : 0) );
    }

    /**
     * @@see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
     */
    public int compare(Object o1, Object o2) {
        if ( o1 == null ) {
            return ( o2 == null ? 0 : -1 );
        } else if ( o2 == null ) {
            return 1;
        }
        
        if ( o1 instanceof Comparable ) {
            return ((Comparable)o1).compareTo(o2);
        } else if ( o2 instanceof Comparable ) {
            return -1*((Comparable)o2).compareTo(o1);
        } else if ( o1 instanceof Boolean && o2 instanceof Boolean ) {
            // unfortunate hack necessary for Java 1.4 compatibility
            return compare(((Boolean)o1).booleanValue(), ((Boolean)o2).booleanValue());
        } else {
            throw new IllegalArgumentException("Incomparable arguments.");
        }
    }

} // end of class DefaultLiteralComparator
@


2.2.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d7 1
a7 1
 *
d14 1
a14 1

d20 2
a21 3
        if ( s_instance == null ) {
			s_instance = new DefaultLiteralComparator();
		}
d24 1
a24 1

d29 1
a29 1
        return x1 < x2 ? -1 : x1 > x2 ? 1 : 0;
d31 1
a31 1

d36 1
a36 1
        return x1 < x2 ? -1 : x1 > x2 ? 1 : 0;
d43 1
a43 1
        return x1 < x2 ? -1 : x1 > x2 ? 1 : 0;
d64 1
a64 1
        return x1 ? (x2 ? 0 : 1) : x2 ? -1 : 0;
d72 1
a72 1
            return o2 == null ? 0 : -1;
d76 1
d81 3
a86 1

@


2.1
log
@Added manual Boolean comparison for Java 1.4 compatibility
@
text
@d26 7
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d74 3
@


1.1
log
@file DefaultLiteralComparator.java was initially added on branch beta.
@
text
@d1 79
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 75
package prefuse.util.collections;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class DefaultLiteralComparator implements LiteralComparator {

    // maintain a singleton instance of this class
    private static DefaultLiteralComparator s_instance = null;
    
    /**
     * Returns an instance of this comparator.
     * @@return a DefaultLiteralComparator
     */
    public static DefaultLiteralComparator getInstance() {
        if ( s_instance == null )
            s_instance = new DefaultLiteralComparator();
        return s_instance;
    }
    
    /**
     * @@see prefuse.util.collections.LiteralComparator#compare(int, int)
     */
    public int compare(int x1, int x2) {
        return ( x1 < x2 ? -1 : x1 > x2 ? 1 : 0 );
    }

    /**
     * @@see prefuse.util.collections.LiteralComparator#compare(long, long)
     */
    public int compare(long x1, long x2) {
        return ( x1 < x2 ? -1 : x1 > x2 ? 1 : 0 );
    }

    /**
     * @@see prefuse.util.collections.LiteralComparator#compare(float, float)
     */
    public int compare(float x1, float x2) {
        return Float.compare(x1, x2);
    }

    /**
     * @@see prefuse.util.collections.LiteralComparator#compare(double, double)
     */
    public int compare(double x1, double x2) {
        return Double.compare(x1, x2);
    }

    /**
     * @@see prefuse.util.collections.LiteralComparator#compare(boolean, boolean)
     */
    public int compare(boolean x1, boolean x2) {
        return ( x1 ? (x2 ? 0 : 1) : (x2 ? -1 : 0) );
    }

    /**
     * @@see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
     */
    public int compare(Object o1, Object o2) {
        if ( o1 == null ) {
            return ( o2 == null ? 0 : -1 );
        } else if ( o2 == null ) {
            return 1;
        }
        
        if ( o1 instanceof Comparable ) {
            return ((Comparable)o1).compareTo(o2);
        } else if ( o2 instanceof Comparable ) {
            return -1*((Comparable)o2).compareTo(o1);
        } else {
            throw new IllegalArgumentException("Incomparable arguments.");
        }
    }

} // end of class DefaultLiteralComparator
@


1.1.2.2
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@d4 1
a4 5
 * Default LiteralComparator implementation that uses the natural ordering
 * of all data types for comparing values. Object values will need to
 * implement the {@@link java.lang.Comparable} interface.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
@


