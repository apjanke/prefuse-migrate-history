head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.18;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.02.02.19.01.51;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.38;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util.collections;

/**
 * Sorted map implementation using a red-black tree to map from int keys to
 * int values.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class IntIntTreeMap extends AbstractTreeMap implements IntIntSortedMap {
    
    // dummy entry used as wrapper for queries
    private IntEntry dummy = 
        new IntEntry(Integer.MIN_VALUE, Integer.MAX_VALUE, NIL, 0);
        
    // ------------------------------------------------------------------------
    // Constructors
    
    public IntIntTreeMap() {
        this(null, false);
    }
    
    public IntIntTreeMap(boolean allowDuplicates) {
        this(null, allowDuplicates);
    }
    
    public IntIntTreeMap(LiteralComparator comparator) {
        this(comparator, false);
    }
    
    public IntIntTreeMap(LiteralComparator comparator, 
                               boolean allowDuplicates)
    {
        super(comparator, allowDuplicates);
    }
    
    // ------------------------------------------------------------------------
    // SortedMap Methods
    
    /**
     * @@see java.util.Map#clear()
     */
    public void clear() {
        ++modCount;
        size = 0;
        root = NIL;
    }

    /**
     * @@see java.util.Map#containsKey(java.lang.Object)
     */
    public boolean containsKey(int key) {
        return find(key, 0) != NIL;
    }

    /**
     * @@see java.util.Map#get(java.lang.Object)
     */
    public int get(int key) {
        Entry ret = find(key, 0);
        return ( ret == NIL ? Integer.MIN_VALUE : ret.val );
    }

    /**
     * @@see java.util.Map#put(java.lang.Object, java.lang.Object)
     */
    public int put(int key, int value) {
        Entry t = root;
        lastOrder = 0;
        
        if (t == NIL) {
            incrementSize(true);
            root = new IntEntry(key, value, NIL, lastOrder);
            return Integer.MIN_VALUE;
        }

        dummy.key = key;
        dummy.order = Integer.MAX_VALUE;
        
        while (true) {
            int cmp = compare(dummy, t);
            if (cmp == 0) {
                return t.setValue(value);
            } else if (cmp < 0) {
                if (t.left != NIL) {
                    t = t.left;
                } else {
                    incrementSize(lastOrder==0);
                    t.left = new IntEntry(key, value, t, lastOrder);
                    fixUpInsert(t.left);
                    return Integer.MIN_VALUE;
                }
            } else { // cmp > 0
                if (t.right != NIL) {
                    t = t.right;
                } else {
                    incrementSize(lastOrder==0);
                    t.right = new IntEntry(key, value, t, lastOrder);
                    fixUpInsert(t.right);
                    return Integer.MIN_VALUE;
                }
            }
        }
    }

    /**
     * @@see java.util.Map#remove(java.lang.Object)
     */
    public int remove(int key) {
        // remove the last instance with the given key
        Entry x;
        if ( allowDuplicates )
            x = findPredecessor(key, Integer.MAX_VALUE);
        else
            x = find(key, 0);
        
        if (x == NIL)
            return Integer.MIN_VALUE;

        int val = x.val;
        remove(x);
        return val;
    }

    public int remove(int key, int val) {
        // remove the last instance with the given key
        Entry x = findCeiling(key, 0);
        if ( x!=NIL && x.getIntKey() != key )
            x = successor(x);
        if (x==NIL || x.getIntKey()!=key) return Integer.MIN_VALUE;

        for ( ; x.val != val && x != NIL; x = successor(x) );
        if (x == NIL) return Integer.MIN_VALUE;
        
        remove(x);
        return val;
    }
    
    public int getLast(int key) {
        Entry ret = findPredecessor(key, Integer.MAX_VALUE);
        return ( ret == NIL || ((IntEntry)ret).key != key
                ? Integer.MIN_VALUE : ret.val );
    }
    
    public int getPreviousValue(int key, int value) {
        Entry cur = find(key, value);
        return predecessor(cur).val;
    }
    
    public int getNextValue(int key, int value) {
        Entry cur = find(key, value);
        return successor(cur).val;
    }
    
    /**
     * @@see java.util.SortedMap#firstKey()
     */
    public int firstKey() {
        return minimum(root).getIntKey();
    }
    
    /**
     * @@see java.util.SortedMap#lastKey()
     */
    public int lastKey() {
        return maximum(root).getIntKey();
    }
    
    // -- Collection view methods ---------------------------------------------
    
    public LiteralIterator keyIterator() {
        return new KeyIterator();
    }
    
    public LiteralIterator keyRangeIterator(int fromKey, boolean fromInc, 
                                            int toKey,   boolean toInc)
    {
        Entry start, end;
        
        if ( cmp.compare(fromKey, toKey) <= 0 ) {
            start = findCeiling(fromKey, (fromInc ? 0 : Integer.MAX_VALUE));
            end = findCeiling(toKey, (toInc? Integer.MAX_VALUE : 0));
        } else {
            start = findCeiling(fromKey, (fromInc ? Integer.MAX_VALUE : 0));
            start = predecessor(start);
            end = findCeiling(toKey, (toInc ? 0 : Integer.MAX_VALUE));
            end = predecessor(end);
        }
        return new KeyIterator(start, end);
    }
    
    public IntIterator valueRangeIterator(int fromKey, boolean fromInc, 
                                          int toKey,   boolean toInc)
    {
        return new ValueIterator(
            (EntryIterator)keyRangeIterator(fromKey,fromInc,toKey,toInc));
    }
    
    // ------------------------------------------------------------------------
    // Internal Binary Search Tree / Red-Black Tree methods
    // Adapted from Cormen, Leiserson, and Rivest's Introduction to Algorithms
    
    protected int compare(Entry e1, Entry e2) {       
        int c = cmp.compare(e1.getIntKey(), e2.getIntKey());
        if ( allowDuplicates && c == 0 ) {
            c = (e1.order < e2.order ? -1 : (e1.order > e2.order ? 1 : 0));
            lastOrder = 1 + (c < 0 ? e1.order : e2.order);
        }
        return c;
    }
    
    private Entry find(int key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = find(dummy);
        return e;
    }
    
    private Entry findPredecessor(int key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findPredecessor(dummy);
        return e;
    }
    
    private Entry findCeiling(int key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findCeiling(dummy);
        return e;
    }
    
    // ========================================================================
    // Inner classes
    
    // ------------------------------------------------------------------------
    // Entry class - represents a Red-Black Tree Node
    
    static class IntEntry extends AbstractTreeMap.Entry {
        int key;
        
        public IntEntry(int key, int val) {
            super(val);
            this.key = key;
        }
        
        public IntEntry(int key, int val, Entry parent, int order) {
            super(val, parent, order);
            this.key = key;
        }
        
        public int getIntKey() {
            return key;
        }
        
        public Object getKey() {
            return new Integer(key);
        }
        
        public boolean keyEquals(Entry e) {
            return (e instanceof IntEntry && key == ((IntEntry)e).key);
        }
        
        public boolean equals(Object o) {
            if (!(o instanceof IntEntry))
                return false;
            
            IntEntry e = (IntEntry)o;
            return (key == e.key && val == e.val);
        }

        public int hashCode() {
            int khash = key;
            int vhash = val;
            return khash ^ vhash ^ order;
        }

        public String toString() {
            return key + "=" + val;
        }
        
        public void copyFields(Entry x) {
            super.copyFields(x);
            this.key = x.getIntKey();
        }
        
    }
    
    // ------------------------------------------------------------------------
    // Iterators
    
    private class KeyIterator extends AbstractTreeMap.KeyIterator {
        public KeyIterator() {
            super();   
        }
        public KeyIterator(Entry start, Entry end) {
            super(start, end);
        }
        public boolean isIntSupported() {
            return true;
        }
        public int nextInt() {
            return nextEntry().getIntKey();
        }
    }
    
} // end of class IntIntTreeMap
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d6 1
a6 1
 *
d10 1
a10 1

d12 1
a12 1
    private final IntEntry dummy =
d14 1
a14 1

d17 1
a17 1

d21 1
a21 1

d25 1
a25 1

d29 2
a30 2

    public IntIntTreeMap(LiteralComparator comparator,
d35 1
a35 1

d38 1
a38 1

d42 1
a42 2
    @@Override
	public void clear() {
d60 1
a60 1
        return ret == NIL ? Integer.MIN_VALUE : ret.val;
d69 1
a69 1

d78 1
a78 1

d111 7
a117 9
        if ( allowDuplicates ) {
			x = findPredecessor(key, Integer.MAX_VALUE);
		} else {
			x = find(key, 0);
		}

        if (x == NIL) {
			return Integer.MIN_VALUE;
		}
d127 7
a133 14
        if ( x!=NIL && x.getIntKey() != key ) {
			x = successor(x);
		}
        if (x==NIL || x.getIntKey()!=key) {
			return Integer.MIN_VALUE;
		}

        for ( ; x.val != val && x != NIL; x = successor(x) ) {
			;
		}
        if (x == NIL) {
			return Integer.MIN_VALUE;
		}

d137 1
a137 1

d140 2
a141 2
        return ret == NIL || ((IntEntry)ret).key != key
                ? Integer.MIN_VALUE : ret.val;
d143 1
a143 1

d148 1
a148 1

d153 1
a153 1

d160 1
a160 1

d167 1
a167 1

d169 1
a169 1

d173 2
a174 2

    public LiteralIterator keyRangeIterator(int fromKey, boolean fromInc,
d178 1
a178 1

d190 2
a191 2

    public IntIterator valueRangeIterator(int fromKey, boolean fromInc,
d197 1
a197 1

d201 2
a202 3

    @@Override
	protected int compare(Entry e1, Entry e2) {
d205 1
a205 1
            c = e1.order < e2.order ? -1 : e1.order > e2.order ? 1 : 0;
d210 1
a210 1

d217 1
a217 1

d224 1
a224 1

d231 1
a231 1

d234 1
a234 1

d237 1
a237 1

d240 1
a240 1

d245 1
a245 1

d250 2
a251 3

        @@Override
		public int getIntKey() {
d254 2
a255 3

        @@Override
		public Object getKey() {
d258 9
a266 12

        @@Override
		public boolean keyEquals(Entry e) {
            return e instanceof IntEntry && key == ((IntEntry)e).key;
        }

        @@Override
		public boolean equals(Object o) {
            if (!(o instanceof IntEntry)) {
				return false;
			}

d268 1
a268 1
            return key == e.key && val == e.val;
d271 1
a271 2
        @@Override
		public int hashCode() {
d277 1
a277 2
        @@Override
		public String toString() {
d280 2
a281 3

        @@Override
		public void copyFields(Entry x) {
d285 1
a285 1

d287 1
a287 1

d290 1
a290 1

d293 1
a293 1
            super();
d298 1
a298 2
        @@Override
		public boolean isIntSupported() {
d301 1
a301 2
        @@Override
		public int nextInt() {
d305 1
a305 1

@


1.1
log
@file IntIntTreeMap.java was initially added on branch beta.
@
text
@d1 306
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 298
package prefuse.util.collections;

public class IntIntTreeMap extends AbstractTreeMap implements IntIntSortedMap {
    
    // dummy entry used as wrapper for queries
    private IntEntry dummy = 
        new IntEntry(Integer.MIN_VALUE, Integer.MAX_VALUE, NIL, 0);
        
    // ------------------------------------------------------------------------
    // Constructors
    
    public IntIntTreeMap() {
        this(null, false);
    }
    
    public IntIntTreeMap(boolean allowDuplicates) {
        this(null, allowDuplicates);
    }
    
    public IntIntTreeMap(LiteralComparator comparator) {
        this(comparator, false);
    }
    
    public IntIntTreeMap(LiteralComparator comparator, 
                               boolean allowDuplicates)
    {
        super(comparator, allowDuplicates);
    }
    
    // ------------------------------------------------------------------------
    // SortedMap Methods
    
    /**
     * @@see java.util.Map#clear()
     */
    public void clear() {
        ++modCount;
        size = 0;
        root = NIL;
    }

    /**
     * @@see java.util.Map#containsKey(java.lang.Object)
     */
    public boolean containsKey(int key) {
        return find(key, 0) != NIL;
    }

    /**
     * @@see java.util.Map#get(java.lang.Object)
     */
    public int get(int key) {
        Entry ret = find(key, 0);
        return ( ret == NIL ? Integer.MIN_VALUE : ret.val );
    }

    /**
     * @@see java.util.Map#put(java.lang.Object, java.lang.Object)
     */
    public int put(int key, int value) {
        Entry t = root;
        lastOrder = 0;
        
        if (t == NIL) {
            incrementSize(true);
            root = new IntEntry(key, value, NIL, lastOrder);
            return Integer.MIN_VALUE;
        }

        dummy.key = key;
        dummy.order = Integer.MAX_VALUE;
        
        while (true) {
            int cmp = compare(dummy, t);
            if (cmp == 0) {
                return t.setValue(value);
            } else if (cmp < 0) {
                if (t.left != NIL) {
                    t = t.left;
                } else {
                    incrementSize(lastOrder==0);
                    t.left = new IntEntry(key, value, t, lastOrder);
                    fixUpInsert(t.left);
                    return Integer.MIN_VALUE;
                }
            } else { // cmp > 0
                if (t.right != NIL) {
                    t = t.right;
                } else {
                    incrementSize(lastOrder==0);
                    t.right = new IntEntry(key, value, t, lastOrder);
                    fixUpInsert(t.right);
                    return Integer.MIN_VALUE;
                }
            }
        }
    }

    /**
     * @@see java.util.Map#remove(java.lang.Object)
     */
    public int remove(int key) {
        // remove the last instance with the given key
        Entry x;
        if ( allowDuplicates )
            x = findPredecessor(key, Integer.MAX_VALUE);
        else
            x = find(key, 0);
        
        if (x == NIL)
            return Integer.MIN_VALUE;

        int val = x.val;
        remove(x);
        return val;
    }

    public int remove(int key, int val) {
        // remove the last instance with the given key
        Entry x = find(key, 0);
        if (x == NIL) return Integer.MIN_VALUE;

        for ( ; x.val != val && x != NIL; x = successor(x) );
        if (x == NIL) return Integer.MIN_VALUE;
        
        remove(x);
        return val;
    }
    
    public int getLast(int key) {
        Entry ret = findPredecessor(key, Integer.MAX_VALUE);
        return ( ret == NIL || ((IntEntry)ret).key != key
                ? Integer.MIN_VALUE : ret.val );
    }
    
    public int getPreviousValue(int key, int value) {
        Entry cur = find(key, value);
        return predecessor(cur).val;
    }
    
    public int getNextValue(int key, int value) {
        Entry cur = find(key, value);
        return successor(cur).val;
    }
    
    /**
     * @@see java.util.SortedMap#firstKey()
     */
    public int firstKey() {
        return minimum(root).getIntKey();
    }
    
    /**
     * @@see java.util.SortedMap#lastKey()
     */
    public int lastKey() {
        return maximum(root).getIntKey();
    }
    
    // -- Collection view methods ---------------------------------------------
    
    public LiteralIterator keyIterator() {
        return new KeyIterator();
    }
    
    public LiteralIterator keyRangeIterator(int fromKey, boolean fromInc, 
                                            int toKey,   boolean toInc)
    {
        Entry start, end;
        
        if ( cmp.compare(fromKey, toKey) <= 0 ) {
            start = findCeiling(fromKey, (fromInc ? 0 : Integer.MAX_VALUE));
            end = findCeiling(toKey, (toInc? Integer.MAX_VALUE : 0));
        } else {
            start = findCeiling(fromKey, (fromInc ? Integer.MAX_VALUE : 0));
            start = predecessor(start);
            end = findCeiling(toKey, (toInc ? 0 : Integer.MAX_VALUE));
            end = predecessor(end);
        }
        return new KeyIterator(start, end);
    }
    
    public IntIterator valueRangeIterator(int fromKey, boolean fromInc, 
                                          int toKey,   boolean toInc)
    {
        return new ValueIterator(
            (EntryIterator)keyRangeIterator(fromKey,fromInc,toKey,toInc));
    }
    
    // ------------------------------------------------------------------------
    // Internal Binary Search Tree / Red-Black Tree methods
    // Adapted from Cormen, Leiserson, and Rivest's Introduction to Algorithms
    
    protected int compare(Entry e1, Entry e2) {       
        int c = cmp.compare(e1.getIntKey(), e2.getIntKey());
        if ( allowDuplicates && c == 0 ) {
            c = (e1.order < e2.order ? -1 : (e1.order > e2.order ? 1 : 0));
            lastOrder = 1 + (c < 0 ? e1.order : e2.order);
        }
        return c;
    }
    
    private Entry find(int key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = find(dummy);
        return e;
    }
    
    private Entry findPredecessor(int key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findPredecessor(dummy);
        return e;
    }
    
    private Entry findCeiling(int key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findCeiling(dummy);
        return e;
    }
    
    // ========================================================================
    // Inner classes
    
    // ------------------------------------------------------------------------
    // Entry class - represents a Red-Black Tree Node
    
    static class IntEntry extends AbstractTreeMap.Entry {
        int key;
        
        public IntEntry(int key, int val) {
            super(val);
            this.key = key;
        }
        
        public IntEntry(int key, int val, Entry parent, int order) {
            super(val, parent, order);
            this.key = key;
        }
        
        public int getIntKey() {
            return key;
        }
        
        public Object getKey() {
            return new Integer(key);
        }
        
        public boolean keyEquals(Entry e) {
            return (e instanceof IntEntry && key == ((IntEntry)e).key);
        }
        
        public boolean equals(Object o) {
            if (!(o instanceof IntEntry))
                return false;
            
            IntEntry e = (IntEntry)o;
            return (key == e.key && val == e.val);
        }

        public int hashCode() {
            int khash = key;
            int vhash = val;
            return khash ^ vhash ^ order;
        }

        public String toString() {
            return key + "=" + val;
        }
        
        public void copyFields(Entry x) {
            super.copyFields(x);
            this.key = x.getIntKey();
        }
        
    }
    
    // ------------------------------------------------------------------------
    // Iterators
    
    private class KeyIterator extends AbstractTreeMap.KeyIterator {
        public KeyIterator() {
            super();   
        }
        public KeyIterator(Entry start, Entry end) {
            super(start, end);
        }
        public boolean isIntSupported() {
            return true;
        }
        public int nextInt() {
            return nextEntry().getIntKey();
        }
    }
    
} // end of class IntIntTreeMap
@


1.1.2.2
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@d120 2
a121 4
    	Entry x = findCeiling(key, 0);
    	if ( x!=NIL && x.getIntKey() != key )
    		x = successor(x);
        if (x==NIL || x.getIntKey()!=key) return Integer.MIN_VALUE;
@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d120 3
a122 3
        Entry x = findCeiling(key, 0);
        if ( x!=NIL && x.getIntKey() != key )
            x = successor(x);
@


1.1.2.4
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@a2 6
/**
 * Sorted map implementation using a red-black tree to map from int keys to
 * int values.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
@


