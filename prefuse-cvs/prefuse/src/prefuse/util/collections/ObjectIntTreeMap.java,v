head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.18;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.02.02.19.01.51;	author jheer;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2006.02.09.05.12.45;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.38;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util.collections;

import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;

/**
 * Sorted map implementation using a red-black tree to map from Object keys to
 * int values.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class ObjectIntTreeMap extends AbstractTreeMap
    implements ObjectIntSortedMap
{
    
    // dummy entry used as wrapper for queries
    private ObjectEntry dummy = new ObjectEntry(null, Integer.MIN_VALUE, NIL, 0);
    private Comparator cmp = null;
    
    // ------------------------------------------------------------------------
    // Constructors
    
    public ObjectIntTreeMap() {
        this(null, false);
    }
    
    public ObjectIntTreeMap(boolean allowDuplicates) {
        this(null, allowDuplicates);
    }
    
    public ObjectIntTreeMap(Comparator comparator) {
        this(comparator, false);
    }
    
    public ObjectIntTreeMap(Comparator comparator, boolean allowDuplicates) {
        super(null, allowDuplicates);
        this.cmp = (comparator == null ? super.comparator() : comparator);
    }
    
    /**
     * @@see java.util.SortedMap#comparator()
     */
    public Comparator comparator() {
        return cmp;
    }
    
    // ------------------------------------------------------------------------
    // SortedMap Methods

    /**
     * @@see java.util.Map#containsKey(java.lang.Object)
     */
    public boolean containsKey(Object key) {
        return find(key, 0) != NIL;
    }

    /**
     * @@see java.util.Map#get(java.lang.Object)
     */
    public int get(Object key) {
        Entry ret = find(key, 0);
        return ( ret == NIL ? Integer.MIN_VALUE : ret.val );
    }

    /**
     * @@see java.util.Map#put(java.lang.Object, java.lang.Object)
     */
    public int put(Object key, int value) {
        Entry t = root;
        lastOrder = 0;
        
        if (t == NIL) {
            incrementSize(true);
            root = new ObjectEntry(key, value, NIL, lastOrder);
            return Integer.MIN_VALUE;
        }

        dummy.key = key;
        dummy.order = Integer.MAX_VALUE;
        
        while (true) {
            int cmp = compare(dummy, t);
            if (cmp == 0) {
                return t.setValue(value);
            } else if (cmp < 0) {
                if (t.left != NIL) {
                    t = t.left;
                } else {
                    incrementSize(lastOrder==0);
                    t.left = new ObjectEntry(key, value, t, lastOrder);
                    fixUpInsert(t.left);
                    return Integer.MIN_VALUE;
                }
            } else { // cmp > 0
                if (t.right != NIL) {
                    t = t.right;
                } else {
                    incrementSize(lastOrder==0);
                    t.right = new ObjectEntry(key, value, t, lastOrder);
                    fixUpInsert(t.right);
                    return Integer.MIN_VALUE;
                }
            }
        }
    }

    /**
     * @@see java.util.Map#remove(java.lang.Object)
     */
    public int remove(Object key) {
        // remove the last instance with the given key
        Entry x;
        if ( allowDuplicates )
            x = findPredecessor(key, Integer.MAX_VALUE);
        else
            x = find(key, 0);
        
        if (x == NIL)
            return Integer.MIN_VALUE;

        int val = x.val;
        remove(x);
        return val;
    }

    public int remove(Object key, int val) {
        // remove the last instance with the given key
        Entry x = findCeiling(key, 0);
        if ( x!=NIL && ((key==null && x.getKey()!=null) || 
                        (key!=null && !x.getKey().equals(key))) )
            x = successor(x);
        if (x==NIL || ((key==null && x.getKey()!=null)
                   ||  (key!=null && !x.getKey().equals(key))) )
            return Integer.MIN_VALUE;

        for ( ; x.val != val && x != NIL; x = successor(x) );
        if (x == NIL) return Integer.MIN_VALUE;
        
        remove(x);
        return val;
    }
    
    /**
     * @@see java.util.SortedMap#firstKey()
     */
    public Object firstKey() {
        return minimum(root).getKey();
    }
    
    /**
     * @@see java.util.SortedMap#lastKey()
     */
    public Object lastKey() {
        return maximum(root).getKey();
    }
    
    // -- Collection view methods ---------------------------------------------

    public Iterator keyIterator() {
        return new KeyIterator();
    }
    
    public Iterator keyRangeIterator(Object fromKey, boolean fromInc,
                                     Object toKey,   boolean toInc)
    {
        Entry start, end;
        
        if ( fromKey == toKey && (fromKey == MIN_KEY || fromKey == MAX_KEY) )
            return Collections.EMPTY_LIST.iterator();
        
        boolean bmin = (fromKey == MIN_KEY || toKey == MAX_KEY);
        boolean bmax = (fromKey == MAX_KEY || toKey == MIN_KEY);
        
        if ( !bmax && (bmin || cmp.compare(fromKey, toKey) <= 0) ) {
            start = findCeiling(fromKey, (fromInc ? 0 : Integer.MAX_VALUE));
            end = findCeiling(toKey, (toInc? Integer.MAX_VALUE : 0));
        } else {
            start = findCeiling(fromKey, (fromInc ? Integer.MAX_VALUE : 0));
            start = predecessor(start);
            end = findCeiling(toKey, (toInc ? 0 : Integer.MAX_VALUE));
            end = predecessor(end);
        }
        return new KeyIterator(start, end);
    }
    
    public IntIterator valueRangeIterator(Object fromKey, boolean fromInc, 
                                          Object toKey,   boolean toInc)
    {
        return new ValueIterator(
           (EntryIterator)keyRangeIterator(fromKey,fromInc,toKey,toInc));
    }
    
    // ------------------------------------------------------------------------
    // Internal Binary Search Tree / Red-Black Tree methods
    // Adapted from Cormen, Leiserson, and Rivest's Introduction to Algorithms
    
    protected int compare(Entry e1, Entry e2) {
        Object k1 = e1.getKey(), k2 = e2.getKey();
        
        if ( k1 == k2 && (k1 == MIN_KEY || k1 == MAX_KEY) ) {
            return 0;
        } else if ( k1 == MIN_KEY || k2 == MAX_KEY ) {
            return -1;
        } else if ( k1 == MAX_KEY || k2 == MIN_KEY ) {
            return 1;
        }
        
        int c = cmp.compare(e1.getKey(), e2.getKey());
        if ( allowDuplicates ) {
            if ( c == 0 ) {
                c = (e1.order < e2.order ? -1 : (e1.order > e2.order ? 1 : 0));
                lastOrder = 1 + (c < 0 ? e1.order : e2.order);
            }
        }
        return c;
    }
    
    private Entry find(Object key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = find(dummy);
        dummy.key = null;
        return e;
    }
    
    private Entry findPredecessor(Object key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findPredecessor(dummy);
        dummy.key = null;
        return e;
    }
    
    private Entry findCeiling(Object key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findCeiling(dummy);
        dummy.key = null;
        return e;
    }
    
    // ========================================================================
    // Inner classes
    
    // ------------------------------------------------------------------------
    // Entry class - represents a Red-Black Tree Node
    
    static class ObjectEntry extends AbstractTreeMap.Entry {
        Object key;
        
        public ObjectEntry(Object key, int val) {
            super(val);
            this.key = key;
        }
        
        public ObjectEntry(Object key, int val, Entry parent, int order) {
            super(val, parent, order);
            this.key = key;
        }
        
        public Object getKey() {
            return key;
        }
        
        public void copyFields(Entry x) {
            super.copyFields(x);
            this.key = x.getKey();
        }
        
    }
    
} // end of class DuplicateTreeMap
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d10 1
a10 1
 *
d16 1
a16 1

d18 1
a18 1
    private final ObjectEntry dummy = new ObjectEntry(null, Integer.MIN_VALUE, NIL, 0);
d20 1
a20 1

d23 1
a23 1

d27 1
a27 1

d31 1
a31 1

d35 1
a35 1

d38 1
a38 1
        this.cmp = comparator == null ? super.comparator() : comparator;
d40 1
a40 1

d44 1
a44 2
    @@Override
	public Comparator comparator() {
d47 1
a47 1

d63 1
a63 1
        return ret == NIL ? Integer.MIN_VALUE : ret.val;
d72 1
a72 1

d81 1
a81 1

d114 7
a120 9
        if ( allowDuplicates ) {
			x = findPredecessor(key, Integer.MAX_VALUE);
		} else {
			x = find(key, 0);
		}

        if (x == NIL) {
			return Integer.MIN_VALUE;
		}
d130 6
a135 15
        if ( x!=NIL && (key==null && x.getKey()!=null ||
                        key!=null && !x.getKey().equals(key)) ) {
			x = successor(x);
		}
        if (x==NIL || key==null && x.getKey()!=null
                   ||  key!=null && !x.getKey().equals(key) ) {
			return Integer.MIN_VALUE;
		}

        for ( ; x.val != val && x != NIL; x = successor(x) ) {
			;
		}
        if (x == NIL) {
			return Integer.MIN_VALUE;
		}
d137 3
d143 1
a143 1

d150 1
a150 1

d157 1
a157 1

d163 1
a163 1

d168 7
a174 8

        if ( fromKey == toKey && (fromKey == MIN_KEY || fromKey == MAX_KEY) ) {
			return Collections.EMPTY_LIST.iterator();
		}

        boolean bmin = fromKey == MIN_KEY || toKey == MAX_KEY;
        boolean bmax = fromKey == MAX_KEY || toKey == MIN_KEY;

d186 2
a187 2

    public IntIterator valueRangeIterator(Object fromKey, boolean fromInc,
d193 1
a193 1

d197 2
a198 3

    @@Override
	protected int compare(Entry e1, Entry e2) {
d200 1
a200 1

d208 1
a208 1

d212 1
a212 1
                c = e1.order < e2.order ? -1 : e1.order > e2.order ? 1 : 0;
d218 1
a218 1

d226 1
a226 1

d234 1
a234 1

d242 1
a242 1

d245 1
a245 1

d248 1
a248 1

d251 1
a251 1

d256 1
a256 1

d261 2
a262 3

        @@Override
		public Object getKey() {
d265 2
a266 3

        @@Override
		public void copyFields(Entry x) {
d270 1
a270 1

d272 1
a272 1

@


1.1
log
@file ObjectIntTreeMap.java was initially added on branch beta.
@
text
@d1 273
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 261
package prefuse.util.collections;

import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;


public class ObjectIntTreeMap extends AbstractTreeMap implements ObjectIntSortedMap {
    
    // dummy entry used as wrapper for queries
    private ObjectEntry dummy = new ObjectEntry(null, Integer.MIN_VALUE, NIL, 0);
    private Comparator cmp = null;
    
    // ------------------------------------------------------------------------
    // Constructors
    
    public ObjectIntTreeMap() {
        this(null, false);
    }
    
    public ObjectIntTreeMap(boolean allowDuplicates) {
        this(null, allowDuplicates);
    }
    
    public ObjectIntTreeMap(Comparator comparator) {
        this(comparator, false);
    }
    
    public ObjectIntTreeMap(Comparator comparator, boolean allowDuplicates) {
        super(null, allowDuplicates);
        this.cmp = (comparator == null ? super.comparator() : comparator);
    }
    
    /**
     * @@see java.util.SortedMap#comparator()
     */
    public Comparator comparator() {
        return cmp;
    }
    
    // ------------------------------------------------------------------------
    // SortedMap Methods

    /**
     * @@see java.util.Map#containsKey(java.lang.Object)
     */
    public boolean containsKey(Object key) {
        return find(key, 0) != NIL;
    }

    /**
     * @@see java.util.Map#get(java.lang.Object)
     */
    public int get(Object key) {
        Entry ret = find(key, 0);
        return ( ret == NIL ? Integer.MIN_VALUE : ret.val );
    }

    /**
     * @@see java.util.Map#put(java.lang.Object, java.lang.Object)
     */
    public int put(Object key, int value) {
        Entry t = root;
        lastOrder = 0;
        
        if (t == NIL) {
            incrementSize(true);
            root = new ObjectEntry(key, value, NIL, lastOrder);
            return Integer.MIN_VALUE;
        }

        dummy.key = key;
        dummy.order = Integer.MAX_VALUE;
        
        while (true) {
            int cmp = compare(dummy, t);
            if (cmp == 0) {
                return t.setValue(value);
            } else if (cmp < 0) {
                if (t.left != NIL) {
                    t = t.left;
                } else {
                    incrementSize(lastOrder==0);
                    t.left = new ObjectEntry(key, value, t, lastOrder);
                    fixUpInsert(t.left);
                    return Integer.MIN_VALUE;
                }
            } else { // cmp > 0
                if (t.right != NIL) {
                    t = t.right;
                } else {
                    incrementSize(lastOrder==0);
                    t.right = new ObjectEntry(key, value, t, lastOrder);
                    fixUpInsert(t.right);
                    return Integer.MIN_VALUE;
                }
            }
        }
    }

    /**
     * @@see java.util.Map#remove(java.lang.Object)
     */
    public int remove(Object key) {
        // remove the last instance with the given key
        Entry x;
        if ( allowDuplicates )
            x = findPredecessor(key, Integer.MAX_VALUE);
        else
            x = find(key, 0);
        
        if (x == NIL)
            return Integer.MIN_VALUE;

        int val = x.val;
        remove(x);
        return val;
    }

    public int remove(Object key, int val) {
        // remove the last instance with the given key
        Entry x = find(key, 0);
        if (x == NIL) return Integer.MIN_VALUE;

        for ( ; x.val != val && x != NIL; x = successor(x) );
        if (x == NIL) return Integer.MIN_VALUE;
        
        remove(x);
        return val;
    }
    
    /**
     * @@see java.util.SortedMap#firstKey()
     */
    public Object firstKey() {
        return minimum(root).getKey();
    }
    
    /**
     * @@see java.util.SortedMap#lastKey()
     */
    public Object lastKey() {
        return maximum(root).getKey();
    }
    
    // -- Collection view methods ---------------------------------------------

    public Iterator keyIterator() {
        return new KeyIterator();
    }
    
    public Iterator keyRangeIterator(Object fromKey, boolean fromInc,
                                     Object toKey,   boolean toInc)
    {
        Entry start, end;
        
        if ( fromKey == toKey && (fromKey == MIN_KEY || fromKey == MAX_KEY) )
            return Collections.EMPTY_LIST.iterator();
        
        boolean bmin = (fromKey == MIN_KEY || toKey == MAX_KEY);
        boolean bmax = (fromKey == MAX_KEY || toKey == MIN_KEY);
        
        if ( !bmax && (bmin || cmp.compare(fromKey, toKey) <= 0) ) {
            start = findCeiling(fromKey, (fromInc ? 0 : Integer.MAX_VALUE));
            end = findCeiling(toKey, (toInc? Integer.MAX_VALUE : 0));
        } else {
            start = findCeiling(fromKey, (fromInc ? Integer.MAX_VALUE : 0));
            start = predecessor(start);
            end = findCeiling(toKey, (toInc ? 0 : Integer.MAX_VALUE));
            end = predecessor(end);
        }
        return new KeyIterator(start, end);
    }
    
    public IntIterator valueRangeIterator(Object fromKey, boolean fromInc, 
                                          Object toKey,   boolean toInc)
    {
        return new ValueIterator(
           (EntryIterator)keyRangeIterator(fromKey,fromInc,toKey,toInc));
    }
    
    // ------------------------------------------------------------------------
    // Internal Binary Search Tree / Red-Black Tree methods
    // Adapted from Cormen, Leiserson, and Rivest's Introduction to Algorithms
    
    protected int compare(Entry e1, Entry e2) {
        Object k1 = e1.getKey(), k2 = e2.getKey();
        
        if ( k1 == k2 && (k1 == MIN_KEY || k1 == MAX_KEY) ) {
            return 0;
        } else if ( k1 == MIN_KEY || k2 == MAX_KEY ) {
            return -1;
        } else if ( k1 == MAX_KEY || k2 == MIN_KEY ) {
            return 1;
        }
        
        int c = cmp.compare(e1.getKey(), e2.getKey());
        if ( allowDuplicates ) {
            if ( c == 0 ) {
                c = (e1.order < e2.order ? -1 : (e1.order > e2.order ? 1 : 0));
                lastOrder = 1 + (c < 0 ? e1.order : e2.order);
            }
        }
        return c;
    }
    
    private Entry find(Object key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = find(dummy);
        dummy.key = null;
        return e;
    }
    
    private Entry findPredecessor(Object key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findPredecessor(dummy);
        dummy.key = null;
        return e;
    }
    
    private Entry findCeiling(Object key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findCeiling(dummy);
        dummy.key = null;
        return e;
    }
    
    // ========================================================================
    // Inner classes
    
    // ------------------------------------------------------------------------
    // Entry class - represents a Red-Black Tree Node
    
    static class ObjectEntry extends AbstractTreeMap.Entry {
        Object key;
        
        public ObjectEntry(Object key, int val) {
            super(val);
            this.key = key;
        }
        
        public ObjectEntry(Object key, int val, Entry parent, int order) {
            super(val, parent, order);
            this.key = key;
        }
        
        public Object getKey() {
            return key;
        }
        
        public void copyFields(Entry x) {
            super.copyFields(x);
            this.key = x.getKey();
        }
        
    }
    
} // end of class DuplicateTreeMap
@


1.1.2.2
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@d122 2
a123 4
    	Entry x = findCeiling(key, 0);
    	if ( x!=NIL && !x.getKey().equals(key) )
    		x = successor(x);
        if (x==NIL || !x.getKey().equals(key)) return Integer.MIN_VALUE;
@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d122 3
a124 3
        Entry x = findCeiling(key, 0);
        if ( x!=NIL && !x.getKey().equals(key) )
            x = successor(x);
@


1.1.2.4
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@d7 2
a8 9
/**
 * Sorted map implementation using a red-black tree to map from Object keys to
 * int values.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class ObjectIntTreeMap extends AbstractTreeMap
    implements ObjectIntSortedMap
{
@


1.1.2.5
log
@Various pre-release edits
Added RadialGraphView
Added new applets
Renamed ShapeRenderer to AbstractShapeRenderer
Renamed ShapeItemRenderer to ShapeRenderer
Merged TextItemRenderer and ImageItemRenderer into LabelRenderer
Removed demo launcher (and commented line in build.xml), will reintroduce demo launcher later
@
text
@d130 1
a130 2
        if ( x!=NIL && ((key==null && x.getKey()!=null) || 
                        (key!=null && !x.getKey().equals(key))) )
d132 1
a132 3
        if (x==NIL || ((key==null && x.getKey()!=null)
                   ||  (key!=null && !x.getKey().equals(key))) )
            return Integer.MIN_VALUE;
@


