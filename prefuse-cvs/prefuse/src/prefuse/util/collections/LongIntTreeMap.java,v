head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.18;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.02.02.19.01.51;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.38;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util.collections;

/**
 * Sorted map implementation using a red-black tree to map from long keys to
 * int values.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class LongIntTreeMap extends AbstractTreeMap implements LongIntSortedMap {
    
    // dummy entry used as wrapper for queries
    private LongEntry dummy = 
        new LongEntry(Long.MIN_VALUE, Integer.MAX_VALUE, NIL, 0);
        
    // ------------------------------------------------------------------------
    // Constructors
    
    public LongIntTreeMap() {
        this(null, false);
    }
    
    public LongIntTreeMap(boolean allowDuplicates) {
        this(null, allowDuplicates);
    }
    
    public LongIntTreeMap(LiteralComparator comparator) {
        this(comparator, false);
    }
    
    public LongIntTreeMap(LiteralComparator comparator, 
                               boolean allowDuplicates)
    {
        super(comparator, allowDuplicates);
    }
    
    // ------------------------------------------------------------------------
    // SortedMap Methods
    
    /**
     * @@see java.util.Map#clear()
     */
    public void clear() {
        ++modCount;
        size = 0;
        root = NIL;
    }

    /**
     * @@see java.util.Map#containsKey(java.lang.Object)
     */
    public boolean containsKey(long key) {
        return find(key, 0) != NIL;
    }

    /**
     * @@see java.util.Map#get(java.lang.Object)
     */
    public int get(long key) {
        Entry ret = find(key, 0);
        return ( ret == NIL ? Integer.MIN_VALUE : ret.val );
    }

    /**
     * @@see java.util.Map#put(java.lang.Object, java.lang.Object)
     */
    public int put(long key, int value) {
        Entry t = root;
        lastOrder = 0;
        
        if (t == NIL) {
            incrementSize(true);
            root = new LongEntry(key, value, NIL, lastOrder);
            return Integer.MIN_VALUE;
        }

        dummy.key = key;
        dummy.order = Integer.MAX_VALUE;
        
        while (true) {
            int cmp = compare(dummy, t);
            if (cmp == 0) {
                return t.setValue(value);
            } else if (cmp < 0) {
                if (t.left != NIL) {
                    t = t.left;
                } else {
                    incrementSize(lastOrder==0);
                    t.left = new LongEntry(key, value, t, lastOrder);
                    fixUpInsert(t.left);
                    return Integer.MIN_VALUE;
                }
            } else { // cmp > 0
                if (t.right != NIL) {
                    t = t.right;
                } else {
                    incrementSize(lastOrder==0);
                    t.right = new LongEntry(key, value, t, lastOrder);
                    fixUpInsert(t.right);
                    return Integer.MIN_VALUE;
                }
            }
        }
    }

    /**
     * @@see java.util.Map#remove(java.lang.Object)
     */
    public int remove(long key) {
        // remove the last instance with the given key
        Entry x;
        if ( allowDuplicates )
            x = findPredecessor(key, Integer.MAX_VALUE);
        else
            x = find(key, 0);
        
        if (x == NIL)
            return Integer.MIN_VALUE;

        int val = x.val;
        remove(x);
        return val;
    }

    public int remove(long key, int val) {
        // remove the last instance with the given key
        Entry x = findCeiling(key, 0);
        if ( x!=NIL && x.getLongKey() != key )
            x = successor(x);
        if (x==NIL || x.getLongKey()!=key) return Integer.MIN_VALUE;

        for ( ; x.val != val && x != NIL; x = successor(x) );
        if (x == NIL) return Integer.MIN_VALUE;
        
        remove(x);
        return val;
    }
    
    /**
     * @@see java.util.SortedMap#firstKey()
     */
    public long firstKey() {
        return minimum(root).getLongKey();
    }
    
    /**
     * @@see java.util.SortedMap#lastKey()
     */
    public long lastKey() {
        return maximum(root).getLongKey();
    }
    
    // -- Collection view methods ---------------------------------------------
    
    public LiteralIterator keyIterator() {
        return new KeyIterator();
    }
    
    public LiteralIterator keyRangeIterator(long fromKey, boolean fromInc,
                                            long toKey,   boolean toInc)
    {
        Entry start, end;
        
        if ( cmp.compare(fromKey, toKey) <= 0 ) {
            start = findCeiling(fromKey, (fromInc ? 0 : Integer.MAX_VALUE));
            end = findCeiling(toKey, (toInc? Integer.MAX_VALUE : 0));
        } else {
            start = findCeiling(fromKey, (fromInc ? Integer.MAX_VALUE : 0));
            start = predecessor(start);
            end = findCeiling(toKey, (toInc ? 0 : Integer.MAX_VALUE));
            end = predecessor(end);
        }
        return new KeyIterator(start, end);
    }
    
    public IntIterator valueRangeIterator(long fromKey, boolean fromInc, 
                                          long toKey,   boolean toInc)
    {
        return new ValueIterator(
            (EntryIterator)keyRangeIterator(fromKey,fromInc,toKey,toInc));
    }
    
    // ------------------------------------------------------------------------
    // Internal Binary Search Tree / Red-Black Tree methods
    // Adapted from Cormen, Leiserson, and Rivest's Introduction to Algorithms
    
    protected int compare(Entry e1, Entry e2) {
        int c = cmp.compare(e1.getLongKey(), e2.getLongKey());
        if ( allowDuplicates && c == 0 ) {
            c = (e1.order < e2.order ? -1 : (e1.order > e2.order ? 1 : 0));
            lastOrder = 1 + (c < 0 ? e1.order : e2.order);
        }
        return c;
    }
    
    private Entry find(long key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = find(dummy);
        return e;
    }
    
    private Entry findPredecessor(long key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findPredecessor(dummy);
        return e;
    }
    
    private Entry findCeiling(long key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findCeiling(dummy);
        return e;
    }
    
    // ========================================================================
    // Inner classes
    
    // ------------------------------------------------------------------------
    // Entry class - represents a Red-Black Tree Node
    
    static class LongEntry extends AbstractTreeMap.Entry {
        long key;
        
        public LongEntry(long key, int val) {
            super(val);
            this.key = key;
        }
        
        public LongEntry(long key, int val, Entry parent, int order) {
            super(val, parent, order);
            this.key = key;
        }
        
        public long getLongKey() {
            return key;
        }
        
        public Object getKey() {
            return new Long(key);
        }
        
        public boolean keyEquals(Entry e) {
            return (e instanceof LongEntry && key == ((LongEntry)e).key);
        }
        
        public boolean equals(Object o) {
            if (!(o instanceof LongEntry))
                return false;
            
            LongEntry e = (LongEntry)o;
            return (key == e.key && val == e.val);
        }

        public int hashCode() {
            int khash = (int)(key^(key>>>32));
            int vhash = val;
            return khash ^ vhash ^ order;
        }

        public String toString() {
            return key + "=" + val;
        }
        
        public void copyFields(Entry x) {
            super.copyFields(x);
            this.key = x.getLongKey();
        }
        
    }
    
    // ------------------------------------------------------------------------
    // Iterators
    
    private class KeyIterator extends AbstractTreeMap.KeyIterator {
        public KeyIterator() {
            super();   
        }
        public KeyIterator(Entry start, Entry end) {
            super(start, end);
        }
        public boolean isLongSupported() {
            return true;
        }
        public long nextLong() {
            return nextEntry().getLongKey();
        }
    }
    
} // end of class LongIntTreeMap
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d6 1
a6 1
 *
d10 1
a10 1

d12 1
a12 1
    private final LongEntry dummy =
d14 1
a14 1

d17 1
a17 1

d21 1
a21 1

d25 1
a25 1

d29 2
a30 2

    public LongIntTreeMap(LiteralComparator comparator,
d35 1
a35 1

d38 1
a38 1

d42 1
a42 2
    @@Override
	public void clear() {
d60 1
a60 1
        return ret == NIL ? Integer.MIN_VALUE : ret.val;
d69 1
a69 1

d78 1
a78 1

d111 7
a117 9
        if ( allowDuplicates ) {
			x = findPredecessor(key, Integer.MAX_VALUE);
		} else {
			x = find(key, 0);
		}

        if (x == NIL) {
			return Integer.MIN_VALUE;
		}
d127 7
a133 14
        if ( x!=NIL && x.getLongKey() != key ) {
			x = successor(x);
		}
        if (x==NIL || x.getLongKey()!=key) {
			return Integer.MIN_VALUE;
		}

        for ( ; x.val != val && x != NIL; x = successor(x) ) {
			;
		}
        if (x == NIL) {
			return Integer.MIN_VALUE;
		}

d137 1
a137 1

d144 1
a144 1

d151 1
a151 1

d153 1
a153 1

d157 1
a157 1

d162 1
a162 1

d174 2
a175 2

    public IntIterator valueRangeIterator(long fromKey, boolean fromInc,
d181 1
a181 1

d185 2
a186 3

    @@Override
	protected int compare(Entry e1, Entry e2) {
d189 1
a189 1
            c = e1.order < e2.order ? -1 : e1.order > e2.order ? 1 : 0;
d194 1
a194 1

d201 1
a201 1

d208 1
a208 1

d215 1
a215 1

d218 1
a218 1

d221 1
a221 1

d224 1
a224 1

d229 1
a229 1

d234 2
a235 3

        @@Override
		public long getLongKey() {
d238 2
a239 3

        @@Override
		public Object getKey() {
d242 9
a250 12

        @@Override
		public boolean keyEquals(Entry e) {
            return e instanceof LongEntry && key == ((LongEntry)e).key;
        }

        @@Override
		public boolean equals(Object o) {
            if (!(o instanceof LongEntry)) {
				return false;
			}

d252 1
a252 1
            return key == e.key && val == e.val;
d255 2
a256 3
        @@Override
		public int hashCode() {
            int khash = (int)(key^key>>>32);
d261 1
a261 2
        @@Override
		public String toString() {
d264 2
a265 3

        @@Override
		public void copyFields(Entry x) {
d269 1
a269 1

d271 1
a271 1

d274 1
a274 1

d277 1
a277 1
            super();
d282 1
a282 2
        @@Override
		public boolean isLongSupported() {
d285 1
a285 2
        @@Override
		public long nextLong() {
d289 1
a289 1

@


1.1
log
@file LongIntTreeMap.java was initially added on branch beta.
@
text
@d1 290
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 285
package prefuse.util.collections;




public class LongIntTreeMap extends AbstractTreeMap implements LongIntSortedMap {
    
    // dummy entry used as wrapper for queries
    private LongEntry dummy = 
        new LongEntry(Long.MIN_VALUE, Integer.MAX_VALUE, NIL, 0);
        
    // ------------------------------------------------------------------------
    // Constructors
    
    public LongIntTreeMap() {
        this(null, false);
    }
    
    public LongIntTreeMap(boolean allowDuplicates) {
        this(null, allowDuplicates);
    }
    
    public LongIntTreeMap(LiteralComparator comparator) {
        this(comparator, false);
    }
    
    public LongIntTreeMap(LiteralComparator comparator, 
                               boolean allowDuplicates)
    {
        super(comparator, allowDuplicates);
    }
    
    // ------------------------------------------------------------------------
    // SortedMap Methods
    
    /**
     * @@see java.util.Map#clear()
     */
    public void clear() {
        ++modCount;
        size = 0;
        root = NIL;
    }

    /**
     * @@see java.util.Map#containsKey(java.lang.Object)
     */
    public boolean containsKey(long key) {
        return find(key, 0) != NIL;
    }

    /**
     * @@see java.util.Map#get(java.lang.Object)
     */
    public int get(long key) {
        Entry ret = find(key, 0);
        return ( ret == NIL ? Integer.MIN_VALUE : ret.val );
    }

    /**
     * @@see java.util.Map#put(java.lang.Object, java.lang.Object)
     */
    public int put(long key, int value) {
        Entry t = root;
        lastOrder = 0;
        
        if (t == NIL) {
            incrementSize(true);
            root = new LongEntry(key, value, NIL, lastOrder);
            return Integer.MIN_VALUE;
        }

        dummy.key = key;
        dummy.order = Integer.MAX_VALUE;
        
        while (true) {
            int cmp = compare(dummy, t);
            if (cmp == 0) {
                return t.setValue(value);
            } else if (cmp < 0) {
                if (t.left != NIL) {
                    t = t.left;
                } else {
                    incrementSize(lastOrder==0);
                    t.left = new LongEntry(key, value, t, lastOrder);
                    fixUpInsert(t.left);
                    return Integer.MIN_VALUE;
                }
            } else { // cmp > 0
                if (t.right != NIL) {
                    t = t.right;
                } else {
                    incrementSize(lastOrder==0);
                    t.right = new LongEntry(key, value, t, lastOrder);
                    fixUpInsert(t.right);
                    return Integer.MIN_VALUE;
                }
            }
        }
    }

    /**
     * @@see java.util.Map#remove(java.lang.Object)
     */
    public int remove(long key) {
        // remove the last instance with the given key
        Entry x;
        if ( allowDuplicates )
            x = findPredecessor(key, Integer.MAX_VALUE);
        else
            x = find(key, 0);
        
        if (x == NIL)
            return Integer.MIN_VALUE;

        int val = x.val;
        remove(x);
        return val;
    }

    public int remove(long key, int val) {
        // remove the last instance with the given key
        Entry x = find(key, 0);
        if (x == NIL) return Integer.MIN_VALUE;

        for ( ; x.val != val && x != NIL; x = successor(x) );
        if (x == NIL) return Integer.MIN_VALUE;
        
        remove(x);
        return val;
    }
    
    /**
     * @@see java.util.SortedMap#firstKey()
     */
    public long firstKey() {
        return minimum(root).getLongKey();
    }
    
    /**
     * @@see java.util.SortedMap#lastKey()
     */
    public long lastKey() {
        return maximum(root).getLongKey();
    }
    
    // -- Collection view methods ---------------------------------------------
    
    public LiteralIterator keyIterator() {
        return new KeyIterator();
    }
    
    public LiteralIterator keyRangeIterator(long fromKey, boolean fromInc,
                                            long toKey,   boolean toInc)
    {
        Entry start, end;
        
        if ( cmp.compare(fromKey, toKey) <= 0 ) {
            start = findCeiling(fromKey, (fromInc ? 0 : Integer.MAX_VALUE));
            end = findCeiling(toKey, (toInc? Integer.MAX_VALUE : 0));
        } else {
            start = findCeiling(fromKey, (fromInc ? Integer.MAX_VALUE : 0));
            start = predecessor(start);
            end = findCeiling(toKey, (toInc ? 0 : Integer.MAX_VALUE));
            end = predecessor(end);
        }
        return new KeyIterator(start, end);
    }
    
    public IntIterator valueRangeIterator(long fromKey, boolean fromInc, 
                                          long toKey,   boolean toInc)
    {
        return new ValueIterator(
            (EntryIterator)keyRangeIterator(fromKey,fromInc,toKey,toInc));
    }
    
    // ------------------------------------------------------------------------
    // Internal Binary Search Tree / Red-Black Tree methods
    // Adapted from Cormen, Leiserson, and Rivest's Introduction to Algorithms
    
    protected int compare(Entry e1, Entry e2) {
        int c = cmp.compare(e1.getLongKey(), e2.getLongKey());
        if ( allowDuplicates && c == 0 ) {
            c = (e1.order < e2.order ? -1 : (e1.order > e2.order ? 1 : 0));
            lastOrder = 1 + (c < 0 ? e1.order : e2.order);
        }
        return c;
    }
    
    private Entry find(long key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = find(dummy);
        return e;
    }
    
    private Entry findPredecessor(long key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findPredecessor(dummy);
        return e;
    }
    
    private Entry findCeiling(long key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findCeiling(dummy);
        return e;
    }
    
    // ========================================================================
    // Inner classes
    
    // ------------------------------------------------------------------------
    // Entry class - represents a Red-Black Tree Node
    
    static class LongEntry extends AbstractTreeMap.Entry {
        long key;
        
        public LongEntry(long key, int val) {
            super(val);
            this.key = key;
        }
        
        public LongEntry(long key, int val, Entry parent, int order) {
            super(val, parent, order);
            this.key = key;
        }
        
        public long getLongKey() {
            return key;
        }
        
        public Object getKey() {
            return new Long(key);
        }
        
        public boolean keyEquals(Entry e) {
            return (e instanceof LongEntry && key == ((LongEntry)e).key);
        }
        
        public boolean equals(Object o) {
            if (!(o instanceof LongEntry))
                return false;
            
            LongEntry e = (LongEntry)o;
            return (key == e.key && val == e.val);
        }

        public int hashCode() {
            int khash = (int)(key^(key>>>32));
            int vhash = val;
            return khash ^ vhash ^ order;
        }

        public String toString() {
            return key + "=" + val;
        }
        
        public void copyFields(Entry x) {
            super.copyFields(x);
            this.key = x.getLongKey();
        }
        
    }
    
    // ------------------------------------------------------------------------
    // Iterators
    
    private class KeyIterator extends AbstractTreeMap.KeyIterator {
        public KeyIterator() {
            super();   
        }
        public KeyIterator(Entry start, Entry end) {
            super(start, end);
        }
        public boolean isLongSupported() {
            return true;
        }
        public long nextLong() {
            return nextEntry().getLongKey();
        }
    }
    
} // end of class LongIntTreeMap
@


1.1.2.2
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@a5 1

d123 2
a124 4
    	Entry x = findCeiling(key, 0);
    	if ( x!=NIL && x.getLongKey() != key )
    		x = successor(x);
        if (x==NIL || x.getLongKey()!=key) return Integer.MIN_VALUE;
@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d124 3
a126 3
        Entry x = findCeiling(key, 0);
        if ( x!=NIL && x.getLongKey() != key )
            x = successor(x);
@


1.1.2.4
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@d3 4
a6 6
/**
 * Sorted map implementation using a red-black tree to map from long keys to
 * int values.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
@


