head	2.2;
access;
symbols
	java_1_5:2.2.0.4
	Root_java_1_5:2.2
	beta:2.2.0.2
	beta-20080113:2.2
	beta-20071021:2.2
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.2
date	2006.07.15.18.13.53;	author jheer;	state Exp;
branches
	2.2.4.1;
next	2.1;

2.1
date	2006.05.16.00.20.59;	author jheer;	state Exp;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.02.02.19.01.51;	author jheer;	state Exp;
branches;
next	;

2.2.4.1
date	2008.01.23.23.55.38;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.2
log
@Added byte value to map to an Int<->Int index
@
text
@package prefuse.util.collections;

import java.util.Comparator;
import java.util.Date;

import prefuse.data.DataTypeException;


/**
 * Factory class that generates the appropriate IntSortedMap implementation
 * given a key data type.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class SortedMapFactory {

    public static IntSortedMap getMap(
            Class type, Comparator cmp, boolean unique)
        throws IncompatibleComparatorException
    {
        if ( !comparatorCheck(type, cmp) ) {
            throw new IncompatibleComparatorException();
        }
        
        if ( type.equals(int.class) || type.equals(byte.class) )
        {
            return new IntIntTreeMap((LiteralComparator)cmp, !unique);
        } 
        else if ( type.equals(long.class) || type.isAssignableFrom(Date.class) )
        {
            return new LongIntTreeMap((LiteralComparator)cmp, !unique);
        }
        else if ( type.equals(float.class) )
        {
            return new FloatIntTreeMap((LiteralComparator)cmp, !unique);
        }
        else if ( type.equals(double.class) )
        {
            return new DoubleIntTreeMap((LiteralComparator)cmp, !unique);
        }
        else if ( type.equals(boolean.class) )
        {
            return new BooleanIntBitSetMap();
        }
        else if ( Object.class.isAssignableFrom(type) )
        {
            return new ObjectIntTreeMap(cmp, !unique);
        }
        else {
            throw new DataTypeException(
                    "No map available for the provided type");
        }
    }
    
    public static boolean comparatorCheck(Class type, Comparator cmp) {
        if ( cmp == null )
        {
            return true;
        }
        else if ( type.equals(int.class) )
        {
            if ( !(cmp instanceof LiteralIterator) )
                return false;
            try {
                ((LiteralComparator)cmp).compare(0,0);
                return true;
            } catch ( Exception e ) {
                return false;
            }
        } 
        else if ( type.equals(long.class) )
        {
            if ( !(cmp instanceof LiteralIterator) )
                return false;
            try {
                ((LiteralComparator)cmp).compare(0L,0L);
                return true;
            } catch ( Exception e ) {
                return false;
            }
        }
        else if ( type.equals(float.class) )
        {
            if ( !(cmp instanceof LiteralIterator) )
                return false;
            try {
                ((LiteralComparator)cmp).compare(0.f,0.f);
                return true;
            } catch ( Exception e ) {
                return false;
            }
        }
        else if ( type.equals(double.class) )
        {
            if ( !(cmp instanceof LiteralIterator) )
                return false;
            try {
                ((LiteralComparator)cmp).compare(0.0,0.0);
                return true;
            } catch ( Exception e ) {
                return false;
            }
        }
        else if ( type.equals(boolean.class) )
        {
            if ( !(cmp instanceof LiteralIterator) )
                return false;
            try {
                ((LiteralComparator)cmp).compare(false,false);
                return true;
            } catch ( Exception e ) {
                return false;
            }
        }
        else if ( Object.class.isAssignableFrom(type) )
        {
            return true;
        }
        else {
            throw new DataTypeException(
                    "No comparator available for the provided type");
        }
    }
    
} // end of class SortedMapFactory
@


2.2.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d12 1
a12 1
 *
d24 1
a24 1

d28 1
a28 1
        }
d54 1
a54 1

d62 2
a63 3
            if ( !(cmp instanceof LiteralIterator) ) {
				return false;
			}
d70 1
a70 1
        }
d73 2
a74 3
            if ( !(cmp instanceof LiteralIterator) ) {
				return false;
			}
d84 2
a85 3
            if ( !(cmp instanceof LiteralIterator) ) {
				return false;
			}
d95 2
a96 3
            if ( !(cmp instanceof LiteralIterator) ) {
				return false;
			}
d106 2
a107 3
            if ( !(cmp instanceof LiteralIterator) ) {
				return false;
			}
d124 1
a124 1

@


2.1
log
@Fixed index creation bug for DateColumn instances
@
text
@d25 1
a25 1
        if ( type.equals(int.class) )
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d4 1
d29 1
a29 1
        else if ( type.equals(long.class) )
@


1.1
log
@file SortedMapFactory.java was initially added on branch beta.
@
text
@d1 124
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 121
package prefuse.util.collections;

import java.util.Comparator;

import prefuse.data.DataTypeException;


/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class SortedMapFactory {

    public static IntSortedMap getMap(
            Class type, Comparator cmp, boolean unique)
        throws IncompatibleComparatorException
    {
        if ( !comparatorCheck(type, cmp) ) {
            throw new IncompatibleComparatorException();
        }
        
        if ( type.equals(int.class) )
        {
            return new IntIntTreeMap((LiteralComparator)cmp, !unique);
        } 
        else if ( type.equals(long.class) )
        {
            return new LongIntTreeMap((LiteralComparator)cmp, !unique);
        }
        else if ( type.equals(float.class) )
        {
            return new FloatIntTreeMap((LiteralComparator)cmp, !unique);
        }
        else if ( type.equals(double.class) )
        {
            return new DoubleIntTreeMap((LiteralComparator)cmp, !unique);
        }
        else if ( type.equals(boolean.class) )
        {
            return new BooleanIntBitSetMap();
        }
        else if ( Object.class.isAssignableFrom(type) )
        {
            return new ObjectIntTreeMap(cmp, !unique);
        }
        else {
            throw new DataTypeException(
                    "No map available for the provided type");
        }
    }
    
    public static boolean comparatorCheck(Class type, Comparator cmp) {
        if ( cmp == null )
        {
            return true;
        }
        else if ( type.equals(int.class) )
        {
            if ( !(cmp instanceof LiteralIterator) )
                return false;
            try {
                ((LiteralComparator)cmp).compare(0,0);
                return true;
            } catch ( Exception e ) {
                return false;
            }
        } 
        else if ( type.equals(long.class) )
        {
            if ( !(cmp instanceof LiteralIterator) )
                return false;
            try {
                ((LiteralComparator)cmp).compare(0L,0L);
                return true;
            } catch ( Exception e ) {
                return false;
            }
        }
        else if ( type.equals(float.class) )
        {
            if ( !(cmp instanceof LiteralIterator) )
                return false;
            try {
                ((LiteralComparator)cmp).compare(0.f,0.f);
                return true;
            } catch ( Exception e ) {
                return false;
            }
        }
        else if ( type.equals(double.class) )
        {
            if ( !(cmp instanceof LiteralIterator) )
                return false;
            try {
                ((LiteralComparator)cmp).compare(0.0,0.0);
                return true;
            } catch ( Exception e ) {
                return false;
            }
        }
        else if ( type.equals(boolean.class) )
        {
            if ( !(cmp instanceof LiteralIterator) )
                return false;
            try {
                ((LiteralComparator)cmp).compare(false,false);
                return true;
            } catch ( Exception e ) {
                return false;
            }
        }
        else if ( Object.class.isAssignableFrom(type) )
        {
            return true;
        }
        else {
            throw new DataTypeException(
                    "No comparator available for the provided type");
        }
    }
    
} // end of class SortedMapFactory
@


1.1.2.2
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@d9 1
a9 4
 * Factory class that generates the appropriate IntSortedMap implementation
 * given a key data type.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
@


