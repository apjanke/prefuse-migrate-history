head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.02.02.19.01.51;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.38;	author jogiles;	state dead;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util.collections;

import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * Iterator implementation that combines the results of multiple iterators.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class CompositeIterator implements Iterator {

    private Iterator[] m_iters;
    private int m_cur;
    
    public CompositeIterator(int size) {
        m_iters = new Iterator[size];
    }
    
    public CompositeIterator(Iterator iter1, Iterator iter2) {
        this(new Iterator[] {iter1, iter2});
    }
    
    public CompositeIterator(Iterator[] iters) {
        m_iters = iters;
        m_cur = 0;
    }

    public void setIterator(int idx, Iterator iter) {
        m_iters[idx] = iter;
    }
    
    /**
     * Not supported.
     * @@see java.util.Iterator#remove()
     */
    public void remove() {
        throw new UnsupportedOperationException();
    }
    
    /**
     * @@see java.util.Iterator#next()
     */
    public Object next() {
        if ( hasNext() ) {
            return m_iters[m_cur].next();
        } else {
            throw new NoSuchElementException();
        }
    }

    /**
     * @@see java.util.Iterator#hasNext()
     */
    public boolean hasNext() {
        if ( m_iters == null )
            return false;
        
        while ( true ) {
            if ( m_cur >= m_iters.length ) {
                m_iters = null;
                return false;
            } if ( m_iters[m_cur] == null ) {
                ++m_cur;
            } else if ( m_iters[m_cur].hasNext() ) {
                return true;
            } else {
                ++m_cur;
            }
        }
    }

} // end of class CompositeIterator
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@@


1.1
log
@file CompositeIterator.java was initially added on branch beta.
@
text
@d1 73
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 61
package prefuse.util.collections;

import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class CompositeIterator implements Iterator {

    private Iterator[] m_iters;
    private int m_cur;
    
    public CompositeIterator(int size) {
        m_iters = new Iterator[size];
    }
    
    public CompositeIterator(Iterator iter1, Iterator iter2) {
        this(new Iterator[] {iter1, iter2});
    }
    
    public CompositeIterator(Iterator[] iters) {
        m_iters = iters;
        m_cur = 0;
    }

    public void setIterator(int idx, Iterator iter) {
        m_iters[idx] = iter;
    }
    
    public void remove() {
        throw new UnsupportedOperationException();
    }
    
    public Object next() {
        if ( hasNext() ) {
            return m_iters[m_cur].next();
        } else {
            throw new NoSuchElementException();
        }
    }

    public boolean hasNext() {
        if ( m_iters == null )
            return false;
        
        while ( true ) {
            if ( m_cur >= m_iters.length ) {
                m_iters = null;
                return false;
            } if ( m_iters[m_cur] == null ) {
                ++m_cur;
            } else if ( m_iters[m_cur].hasNext() ) {
                return true;
            } else {
                ++m_cur;
            }
        }
    }

} // end of class CompositeIterator
@


1.1.2.2
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@d7 1
a7 3
 * Iterator implementation that combines the results of multiple iterators.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a30 4
    /**
     * Not supported.
     * @@see java.util.Iterator#remove()
     */
a34 3
    /**
     * @@see java.util.Iterator#next()
     */
a42 3
    /**
     * @@see java.util.Iterator#hasNext()
     */
@


