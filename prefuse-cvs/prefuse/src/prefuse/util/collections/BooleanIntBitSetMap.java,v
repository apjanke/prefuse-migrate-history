head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.18;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.02.02.19.01.51;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.38;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util.collections;

import java.util.BitSet;
import java.util.Comparator;
import java.util.NoSuchElementException;

/**
 * Sorted map implementation using bit vectors to map from boolean keys to
 * int values.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class BooleanIntBitSetMap implements BooleanIntSortedMap {

    private BitSet m_true = new BitSet();
    private BitSet m_false = new BitSet();
    
    public BooleanIntBitSetMap() {
    }
    
    public boolean firstKey() {
        return false;
    }

    public boolean lastKey() {
        return true;
    }

    public boolean containsKey(boolean key) {
        BitSet set = key ? m_true : m_false;
        return set.cardinality()>0;
    }

    public IntIterator valueRangeIterator(boolean fromKey, boolean fromInc,
                                          boolean toKey, boolean toInc)
    {
        if ( !fromInc && !toInc ) {
            // empty iterator
            return new BitSetIterator(null);
        } else if ( fromKey==toKey || !toInc ) {
            return new BitSetIterator(fromKey ? m_true : m_false);
        } else if ( !fromInc ) {
            return new BitSetIterator(toKey ? m_true : m_false);
        } else {
            return new BitSetIterator(fromKey ? m_true : m_false,
                                      toKey ? m_true : m_false);
        }
    }

    public LiteralIterator keyIterator() {
        return new BitSetIterator(m_false, m_true);
    }

    public LiteralIterator keyRangeIterator(boolean fromKey, boolean fromInc,
                                            boolean toKey, boolean toInc)
    {
        if ( !fromInc && !toInc ) {
            // empty iterator
            return new BitSetIterator(null);
        } else if ( fromKey==toKey || !toInc ) {
            return new BitSetIterator(fromKey ? m_true : m_false);
        } else if ( !fromInc ) {
            return new BitSetIterator(toKey ? m_true : m_false);
        } else {
            return new BitSetIterator(fromKey ? m_true : m_false,
                                      toKey ? m_true : m_false);
        }
    }

    public int get(boolean key) {
        BitSet set = key ? m_true : m_false;
        return set.nextSetBit(0);
    }

    public int remove(boolean key) {
        BitSet set = key ? m_true : m_false;
        int idx = set.length()-1;
        set.clear(idx);
        return idx;
    }

    public int remove(boolean key, int value) {
        BitSet set = key ? m_true : m_false;
        if ( set.get(value) ) {
            set.clear(value);
            return value;
        } else {
            return Integer.MIN_VALUE;
        }
    }

    public int put(boolean key, int value) {
        BitSet set = key ? m_true : m_false;
        boolean ret = set.get(value);
        set.set(value);
        return ret ? value : Integer.MIN_VALUE;
    }

    public int getMinimum() {
        if ( m_false.cardinality() > 0 ) {
            return m_false.nextSetBit(0);
        } else if ( m_true.cardinality() > 0 ) {
            return m_true.nextSetBit(0);
        } else {
            return Integer.MIN_VALUE;
        }
    }

    public int getMaximum() {
        int idx = m_true.length()-1;
        return idx>0 ? idx : m_false.length()-1;
    }

    public int getMedian() {
        int fsize = m_false.cardinality();
        int tsize = m_true.cardinality();
        if ( fsize == 0 && tsize == 0 )
            return Integer.MIN_VALUE;

        int med = (fsize+tsize)/2;
        BitSet set = ( fsize>tsize ? m_false : m_true );
        for( int i=set.nextSetBit(0), j=0; i>=0; 
             i=set.nextSetBit(i+1), ++j )
        {
            if ( j == med ) return i;
        }
        // shouldn't ever happen
        return Integer.MIN_VALUE;
    }

    public int getUniqueCount() {
        int count = 0;
        if ( m_false.cardinality() > 0 ) ++count;
        if ( m_true.cardinality() > 0 )  ++count;
        return count;
    }

    public boolean isAllowDuplicates() {
        return true;
    }

    public int size() {
        return m_true.cardinality() + m_false.cardinality();
    }

    public boolean isEmpty() {
        return m_true.isEmpty() && m_false.isEmpty();
    }

    public Comparator comparator() {
        return DefaultLiteralComparator.getInstance();
    }

    public void clear() {
        m_true.clear();
        m_false.clear();
    }

    public boolean containsValue(int value) {
        return m_false.get(value) || m_true.get(value);
    }


    public IntIterator valueIterator(boolean ascending) {
        if ( !ascending ) {
            return new BitSetIterator(m_true, m_false);
        } else {
            return new BitSetIterator(m_false, m_true);
        }
    }
    
    public class BitSetIterator extends IntIterator {

        private BitSet m_cur, m_next;
        private int m_val = -1;
        
        public BitSetIterator(BitSet set) {
            this(set, null);
        }
        public BitSetIterator(BitSet first, BitSet second) {
            m_cur = first;
            m_next = second;
            if ( first == null ) {
                m_val = -2;
            } else {
                m_val = -1;
                advance();
            }
        }
        private void advance() {
            int idx = m_cur.nextSetBit(m_val+1);
            if ( idx < 0 ) {
                if ( m_next != null ) {
                    m_cur = m_next;
                    m_next = null;
                    m_val = -1;
                    advance();
                } else {
                    m_val = -2;
                }
                return;
            } else {
                m_val = idx;
            }
        }
        public int nextInt() {
            if ( m_val < 0 )
                throw new NoSuchElementException();
            int retval = m_val;
            advance();
            return retval;
        }
        public boolean nextBoolean() {
            if ( m_cur == m_true ) {
                advance();
                return true;
            } else if ( m_cur == m_false ) {
                advance();
                return false;
            } else {
                throw new NoSuchElementException();
            }
        }
        public boolean hasNext() {
            return m_val >= 0;
        }
        public void remove() {
            throw new UnsupportedOperationException();
        }
    }

} // end of class BooleanIntBitSetMap
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d10 1
a10 1
 *
d15 3
a17 3
    private final BitSet m_true = new BitSet();
    private final BitSet m_false = new BitSet();

d20 1
a20 1

d117 2
a118 3
        if ( fsize == 0 && tsize == 0 ) {
			return Integer.MIN_VALUE;
		}
d121 2
a122 2
        BitSet set = fsize>tsize ? m_false : m_true;
        for( int i=set.nextSetBit(0), j=0; i>=0;
d125 1
a125 3
            if ( j == med ) {
				return i;
			}
d133 2
a134 6
        if ( m_false.cardinality() > 0 ) {
			++count;
		}
        if ( m_true.cardinality() > 0 ) {
			++count;
		}
d171 1
a171 1

d176 1
a176 1

d206 3
a208 5
        @@Override
		public int nextInt() {
            if ( m_val < 0 ) {
				throw new NoSuchElementException();
			}
d213 1
a213 2
        @@Override
		public boolean nextBoolean() {
@


1.1
log
@file BooleanIntBitSetMap.java was initially added on branch beta.
@
text
@d1 232
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 232
package prefuse.util.collections;

import java.util.BitSet;
import java.util.Comparator;
import java.util.NoSuchElementException;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class BooleanIntBitSetMap implements BooleanIntSortedMap {

    private BitSet m_true = new BitSet();
    private BitSet m_false = new BitSet();
    
    public BooleanIntBitSetMap() {
    }
    
    public boolean firstKey() {
        return false;
    }

    public boolean lastKey() {
        return true;
    }

    public boolean containsKey(boolean key) {
        BitSet set = key ? m_true : m_false;
        return set.cardinality()>0;
    }

    public IntIterator valueRangeIterator(boolean fromKey, boolean fromInc,
                                          boolean toKey, boolean toInc)
    {
        if ( !fromInc && !toInc ) {
            // empty iterator
            return new BitSetIterator(null);
        } else if ( fromKey==toKey || !toInc ) {
            return new BitSetIterator(fromKey ? m_true : m_false);
        } else if ( !fromInc ) {
            return new BitSetIterator(toKey ? m_true : m_false);
        } else {
            return new BitSetIterator(fromKey ? m_true : m_false,
                                      toKey ? m_true : m_false);
        }
    }

    public LiteralIterator keyIterator() {
        return new BitSetIterator(m_false, m_true);
    }

    public LiteralIterator keyRangeIterator(boolean fromKey, boolean fromInc,
                                            boolean toKey, boolean toInc)
    {
        if ( !fromInc && !toInc ) {
            // empty iterator
            return new BitSetIterator(null);
        } else if ( fromKey==toKey || !toInc ) {
            return new BitSetIterator(fromKey ? m_true : m_false);
        } else if ( !fromInc ) {
            return new BitSetIterator(toKey ? m_true : m_false);
        } else {
            return new BitSetIterator(fromKey ? m_true : m_false,
                                      toKey ? m_true : m_false);
        }
    }

    public int get(boolean key) {
        BitSet set = key ? m_true : m_false;
        return set.nextSetBit(0);
    }

    public int remove(boolean key) {
        BitSet set = key ? m_true : m_false;
        int idx = set.length()-1;
        set.clear(idx);
        return idx;
    }

    public int remove(boolean key, int value) {
        BitSet set = key ? m_true : m_false;
        if ( set.get(value) ) {
            set.clear(value);
            return value;
        } else {
            return Integer.MIN_VALUE;
        }
    }

    public int put(boolean key, int value) {
        BitSet set = key ? m_true : m_false;
        boolean ret = set.get(value);
        set.set(value);
        return ret ? value : Integer.MIN_VALUE;
    }

    public int getMinimum() {
        if ( m_false.cardinality() > 0 ) {
            return m_false.nextSetBit(0);
        } else if ( m_true.cardinality() > 0 ) {
            return m_true.nextSetBit(0);
        } else {
            return Integer.MIN_VALUE;
        }
    }

    public int getMaximum() {
        int idx = m_true.length()-1;
        return idx>0 ? idx : m_false.length()-1;
    }

    public int getMedian() {
        int fsize = m_false.cardinality();
        int tsize = m_true.cardinality();
        if ( fsize == 0 && tsize == 0 )
            return Integer.MIN_VALUE;

        int med = (fsize+tsize)/2;
        BitSet set = ( fsize>tsize ? m_false : m_true );
        for( int i=set.nextSetBit(0), j=0; i>=0; 
             i=set.nextSetBit(i+1), ++j )
        {
            if ( j == med ) return i;
        }
        // shouldn't ever happen
        return Integer.MIN_VALUE;
    }

    public int getUniqueCount() {
        int count = 0;
        if ( m_false.cardinality() > 0 ) ++count;
        if ( m_true.cardinality() > 0 )  ++count;
        return count;
    }

    public boolean isAllowDuplicates() {
        return true;
    }

    public int size() {
        return m_true.cardinality() + m_false.cardinality();
    }

    public boolean isEmpty() {
        return m_true.isEmpty() && m_false.isEmpty();
    }

    public Comparator comparator() {
        return DefaultLiteralComparator.getInstance();
    }

    public void clear() {
        m_true.clear();
        m_false.clear();
    }

    public boolean containsValue(int value) {
        return m_false.get(value) || m_true.get(value);
    }


    public IntIterator valueIterator(boolean ascending) {
        if ( !ascending ) {
            return new BitSetIterator(m_true, m_false);
        } else {
            return new BitSetIterator(m_false, m_true);
        }
    }
    
    public class BitSetIterator extends IntIterator {

        private BitSet m_cur, m_next;
        private int m_val = -1;
        
        public BitSetIterator(BitSet set) {
            this(set, null);
        }
        
        public BitSetIterator(BitSet first, BitSet second) {
            m_cur = first;
            m_next = second;
            if ( first == null ) {
                m_val = -2;
            } else {
                m_val = -1;
                advance();
            }
        }
        
        private void advance() {
            int idx = m_cur.nextSetBit(m_val+1);
            if ( idx < 0 ) {
                if ( m_next != null ) {
                    m_cur = m_next;
                    m_next = null;
                    m_val = -1;
                    advance();
                } else {
                    m_val = -2;
                }
                return;
            } else {
                m_val = idx;
            }
        }
        
        public int nextInt() {
            if ( m_val < 0 )
                throw new NoSuchElementException();
            int retval = m_val;
            advance();
            return retval;
        }
        
        public boolean nextBoolean() {
            if ( m_cur == m_true ) {
                advance();
                return true;
            } else if ( m_cur == m_false ) {
                advance();
                return false;
            } else {
                throw new NoSuchElementException();
            }
        }

        public boolean hasNext() {
            return m_val >= 0;
        }
        
    }

} // end of class BooleanIntBitSetMap@


1.1.2.2
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@d177 1
d188 1
d205 1
d213 1
d225 1
d229 1
a229 3
        public void remove() {
        	throw new UnsupportedOperationException();
        }
@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d225 1
a225 1
            throw new UnsupportedOperationException();
d229 1
a229 1
} // end of class BooleanIntBitSetMap
@


1.1.2.4
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@d8 1
a8 4
 * Sorted map implementation using bit vectors to map from boolean keys to
 * int values.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
@


