head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2006.01.23.22.08.47;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.23.07.18;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.02.02.19.01.51;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.38;	author jogiles;	state dead;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@/**
 * Copyright (c) 2004-2006 Regents of the University of California.
 * See "license-prefuse.txt" for licensing terms.
 */
package prefuse.util.collections;

import java.util.NoSuchElementException;

/**
 * IntIterator implementation that provides an iteration over the
 * contents of an int array.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class IntArrayIterator extends IntIterator {

    private int[] m_array;
    private int m_cur;
    private int m_end;
    
    public IntArrayIterator(int[] array, int start, int len) {
        m_array = array;
        m_cur = start;
        m_end = start+len;
    }
    
    /**
     * @@see prefuse.util.collections.IntIterator#nextInt()
     */
    public int nextInt() {
        if ( m_cur >= m_end )
            throw new NoSuchElementException();
        return m_array[m_cur++];
    }

    /**
     * @@see java.util.Iterator#hasNext()
     */
    public boolean hasNext() {
        return m_cur < m_end;
    }
    
    public void remove() {
        throw new UnsupportedOperationException();
    }

} // end of class IntArrayIterator
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@@


1.1
log
@file IntArrayIterator.java was initially added on branch beta.
@
text
@d1 47
@


1.1.2.1
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@a0 44
/**
 * Copyright (c) 2004-2006 Regents of the University of California.
 * See "license-prefuse.txt" for licensing terms.
 */
package prefuse.util.collections;

import java.util.NoSuchElementException;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> prefuse(AT)jheer.org
 */
public class IntArrayIterator extends IntIterator {

	private int[] m_array;
	private int m_cur;
	private int m_end;
	
	public IntArrayIterator(int[] array, int start, int len) {
		m_array = array;
		m_cur = start;
		m_end = start+len;
	}
	
	/**
	 * @@see prefuse.util.collections.IntIterator#nextInt()
	 */
	public int nextInt() {
		if ( m_cur >= m_end )
			throw new NoSuchElementException();
		return m_array[m_cur++];
	}

	/**
	 * @@see java.util.Iterator#hasNext()
	 */
	public boolean hasNext() {
		return m_cur < m_end;
	}
	
	public void remove() {
    	throw new UnsupportedOperationException();
    }

} // end of class IntArrayIterator
@


1.1.2.2
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d14 18
a31 18
    private int[] m_array;
    private int m_cur;
    private int m_end;
    
    public IntArrayIterator(int[] array, int start, int len) {
        m_array = array;
        m_cur = start;
        m_end = start+len;
    }
    
    /**
     * @@see prefuse.util.collections.IntIterator#nextInt()
     */
    public int nextInt() {
        if ( m_cur >= m_end )
            throw new NoSuchElementException();
        return m_array[m_cur++];
    }
d33 9
a41 9
    /**
     * @@see java.util.Iterator#hasNext()
     */
    public boolean hasNext() {
        return m_cur < m_end;
    }
    
    public void remove() {
        throw new UnsupportedOperationException();
@


1.1.2.3
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@d10 1
a10 4
 * IntIterator implementation that provides an iteration over the
 * contents of an int array.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
@


