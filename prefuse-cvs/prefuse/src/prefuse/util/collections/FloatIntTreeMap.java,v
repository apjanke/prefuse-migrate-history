head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.18;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.02.02.19.01.51;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.38;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util.collections;

/**
 * Sorted map implementation using a red-black tree to map from float keys to
 * int values.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class FloatIntTreeMap extends AbstractTreeMap implements FloatIntSortedMap {
    
    // dummy entry used as wrapper for queries
    private FloatEntry dummy = 
        new FloatEntry(Float.MIN_VALUE, Integer.MAX_VALUE, NIL, 0);
        
    // ------------------------------------------------------------------------
    // Constructors
    
    public FloatIntTreeMap() {
        this(null, false);
    }
    
    public FloatIntTreeMap(boolean allowDuplicates) {
        this(null, allowDuplicates);
    }
    
    public FloatIntTreeMap(LiteralComparator comparator) {
        this(comparator, false);
    }
    
    public FloatIntTreeMap(LiteralComparator comparator, 
                               boolean allowDuplicates)
    {
        super(comparator, allowDuplicates);
    }
    
    // ------------------------------------------------------------------------
    // SortedMap Methods
    
    /**
     * @@see java.util.Map#clear()
     */
    public void clear() {
        ++modCount;
        size = 0;
        root = NIL;
    }

    /**
     * @@see java.util.Map#containsKey(java.lang.Object)
     */
    public boolean containsKey(float key) {
        return find(key, 0) != NIL;
    }

    /**
     * @@see java.util.Map#get(java.lang.Object)
     */
    public int get(float key) {
        Entry ret = find(key, 0);
        return ( ret == NIL ? Integer.MIN_VALUE : ret.val );
    }

    /**
     * @@see java.util.Map#put(java.lang.Object, java.lang.Object)
     */
    public int put(float key, int value) {
        Entry t = root;
        lastOrder = 0;
        
        if (t == NIL) {
            incrementSize(true);
            root = new FloatEntry(key, value, NIL, lastOrder);
            return Integer.MIN_VALUE;
        }

        dummy.key = key;
        dummy.order = Integer.MAX_VALUE;
        
        while (true) {
            int cmp = compare(dummy, t);
            if (cmp == 0) {
                return t.setValue(value);
            } else if (cmp < 0) {
                if (t.left != NIL) {
                    t = t.left;
                } else {
                    incrementSize(lastOrder==0);
                    t.left = new FloatEntry(key, value, t, lastOrder);
                    fixUpInsert(t.left);
                    return Integer.MIN_VALUE;
                }
            } else { // cmp > 0
                if (t.right != NIL) {
                    t = t.right;
                } else {
                    incrementSize(lastOrder==0);
                    t.right = new FloatEntry(key, value, t, lastOrder);
                    fixUpInsert(t.right);
                    return Integer.MIN_VALUE;
                }
            }
        }
    }

    /**
     * @@see java.util.Map#remove(java.lang.Object)
     */
    public int remove(float key) {
        // remove the last instance with the given key
        Entry x;
        if ( allowDuplicates )
            x = findPredecessor(key, Integer.MAX_VALUE);
        else
            x = find(key, 0);
        
        if (x == NIL)
            return Integer.MIN_VALUE;

        int val = x.val;
        remove(x);
        return val;
    }

    public int remove(float key, int val) {
        // remove the last instance with the given key
        Entry x = findCeiling(key, 0);
        if ( x!=NIL && x.getFloatKey() != key )
            x = successor(x);
        if (x==NIL || x.getFloatKey()!=key) return Integer.MIN_VALUE;

        for ( ; x.val != val && x != NIL; x = successor(x) );
        if (x == NIL) return Integer.MIN_VALUE;
        
        remove(x);
        return val;
    }
    
    /**
     * @@see java.util.SortedMap#firstKey()
     */
    public float firstKey() {
        return minimum(root).getFloatKey();
    }
    
    /**
     * @@see java.util.SortedMap#lastKey()
     */
    public float lastKey() {
        return maximum(root).getFloatKey();
    }
    
    // -- Collection view methods ---------------------------------------------
    
    public LiteralIterator keyIterator() {
        return new KeyIterator();
    }
    
    public LiteralIterator keyRangeIterator(float fromKey, boolean fromInc,
                                            float toKey,   boolean toInc)
    {
        Entry start, end;
        
        if ( cmp.compare(fromKey, toKey) <= 0 ) {
            start = findCeiling(fromKey, (fromInc ? 0 : Integer.MAX_VALUE));
            end = findCeiling(toKey, (toInc? Integer.MAX_VALUE : 0));
        } else {
            start = findCeiling(fromKey, (fromInc ? Integer.MAX_VALUE : 0));
            start = predecessor(start);
            end = findCeiling(toKey, (toInc ? 0 : Integer.MAX_VALUE));
            end = predecessor(end);
        }
        return new KeyIterator(start, end);
    }
    
    public IntIterator valueRangeIterator(float fromKey, boolean fromInc, 
                                          float toKey,   boolean toInc)
    {
        return new ValueIterator(
            (EntryIterator)keyRangeIterator(fromKey,fromInc,toKey,toInc));
    }    
    
    // ------------------------------------------------------------------------
    // Internal Binary Search Tree / Red-Black Tree methods
    // Adapted from Cormen, Leiserson, and Rivest's Introduction to Algorithms
    
    protected int compare(Entry e1, Entry e2) {
        int c = cmp.compare(e1.getFloatKey(), e2.getFloatKey());
        if ( allowDuplicates ) {
            if ( c == 0 ) {
                c = (e1.order < e2.order ? -1 : (e1.order > e2.order ? 1 : 0));
                lastOrder = 1 + (c < 0 ? e1.order : e2.order);
            }
        }
        return c;
    }
    
    private Entry find(float key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = find(dummy);
        return e;
    }
    
    private Entry findPredecessor(float key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findPredecessor(dummy);
        return e;
    }
    
    private Entry findCeiling(float key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findCeiling(dummy);
        return e;
    }
    
    // ========================================================================
    // Inner classes
    
    // ------------------------------------------------------------------------
    // Entry class - represents a Red-Black Tree Node
    
    static class FloatEntry extends AbstractTreeMap.Entry {
        float key;
        
        public FloatEntry(float key, int val) {
            super(val);
            this.key = key;
        }
        
        public FloatEntry(float key, int val, Entry parent, int order) {
            super(val, parent, order);
            this.key = key;
        }
        
        public float getFloatKey() {
            return key;
        }
        
        public Object getKey() {
            return new Float(key);
        }
        
        public boolean keyEquals(Entry e) {
            return (e instanceof FloatEntry && key == ((FloatEntry)e).key);
        }
        
        public boolean equals(Object o) {
            if (!(o instanceof FloatEntry))
                return false;
            
            FloatEntry e = (FloatEntry)o;
            return (key == e.key && val == e.val);
        }

        public int hashCode() {
            int khash = Float.floatToIntBits(key);
            int vhash = val;
            return khash ^ vhash ^ order;
        }

        public String toString() {
            return key + "=" + val;
        }
        
        public void copyFields(Entry x) {
            super.copyFields(x);
            this.key = x.getFloatKey();
        }
        
    }
    
    // ------------------------------------------------------------------------
    // Iterators
    
    private class KeyIterator extends AbstractTreeMap.KeyIterator {
        public KeyIterator() {
            super();   
        }
        public KeyIterator(Entry start, Entry end) {
            super(start, end);
        }
        public boolean isFloatSupported() {
            return true;
        }
        public float nextFloat() {
            return nextEntry().getFloatKey();
        }
    }
    
} // end of class FloatIntTreeMap
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d6 1
a6 1
 *
d10 1
a10 1

d12 1
a12 1
    private final FloatEntry dummy =
d14 1
a14 1

d17 1
a17 1

d21 1
a21 1

d25 1
a25 1

d29 2
a30 2

    public FloatIntTreeMap(LiteralComparator comparator,
d35 1
a35 1

d38 1
a38 1

d42 1
a42 2
    @@Override
	public void clear() {
d60 1
a60 1
        return ret == NIL ? Integer.MIN_VALUE : ret.val;
d69 1
a69 1

d78 1
a78 1

d111 7
a117 9
        if ( allowDuplicates ) {
			x = findPredecessor(key, Integer.MAX_VALUE);
		} else {
			x = find(key, 0);
		}

        if (x == NIL) {
			return Integer.MIN_VALUE;
		}
d127 7
a133 14
        if ( x!=NIL && x.getFloatKey() != key ) {
			x = successor(x);
		}
        if (x==NIL || x.getFloatKey()!=key) {
			return Integer.MIN_VALUE;
		}

        for ( ; x.val != val && x != NIL; x = successor(x) ) {
			;
		}
        if (x == NIL) {
			return Integer.MIN_VALUE;
		}

d137 1
a137 1

d144 1
a144 1

d151 1
a151 1

d153 1
a153 1

d157 1
a157 1

d162 1
a162 1

d174 2
a175 2

    public IntIterator valueRangeIterator(float fromKey, boolean fromInc,
d180 2
a181 2
    }

d185 2
a186 3

    @@Override
	protected int compare(Entry e1, Entry e2) {
d190 1
a190 1
                c = e1.order < e2.order ? -1 : e1.order > e2.order ? 1 : 0;
d196 1
a196 1

d203 1
a203 1

d210 1
a210 1

d217 1
a217 1

d220 1
a220 1

d223 1
a223 1

d226 1
a226 1

d231 1
a231 1

d236 2
a237 3

        @@Override
		public float getFloatKey() {
d240 2
a241 3

        @@Override
		public Object getKey() {
d244 9
a252 12

        @@Override
		public boolean keyEquals(Entry e) {
            return e instanceof FloatEntry && key == ((FloatEntry)e).key;
        }

        @@Override
		public boolean equals(Object o) {
            if (!(o instanceof FloatEntry)) {
				return false;
			}

d254 1
a254 1
            return key == e.key && val == e.val;
d257 1
a257 2
        @@Override
		public int hashCode() {
d263 1
a263 2
        @@Override
		public String toString() {
d266 2
a267 3

        @@Override
		public void copyFields(Entry x) {
d271 1
a271 1

d273 1
a273 1

d276 1
a276 1

d279 1
a279 1
            super();
d284 1
a284 2
        @@Override
		public boolean isFloatSupported() {
d287 1
a287 2
        @@Override
		public float nextFloat() {
d291 1
a291 1

@


1.1
log
@file FloatIntTreeMap.java was initially added on branch beta.
@
text
@d1 292
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 288
package prefuse.util.collections;





public class FloatIntTreeMap extends AbstractTreeMap implements FloatIntSortedMap {
    
    // dummy entry used as wrapper for queries
    private FloatEntry dummy = 
        new FloatEntry(Float.MIN_VALUE, Integer.MAX_VALUE, NIL, 0);
        
    // ------------------------------------------------------------------------
    // Constructors
    
    public FloatIntTreeMap() {
        this(null, false);
    }
    
    public FloatIntTreeMap(boolean allowDuplicates) {
        this(null, allowDuplicates);
    }
    
    public FloatIntTreeMap(LiteralComparator comparator) {
        this(comparator, false);
    }
    
    public FloatIntTreeMap(LiteralComparator comparator, 
                               boolean allowDuplicates)
    {
        super(comparator, allowDuplicates);
    }
    
    // ------------------------------------------------------------------------
    // SortedMap Methods
    
    /**
     * @@see java.util.Map#clear()
     */
    public void clear() {
        ++modCount;
        size = 0;
        root = NIL;
    }

    /**
     * @@see java.util.Map#containsKey(java.lang.Object)
     */
    public boolean containsKey(float key) {
        return find(key, 0) != NIL;
    }

    /**
     * @@see java.util.Map#get(java.lang.Object)
     */
    public int get(float key) {
        Entry ret = find(key, 0);
        return ( ret == NIL ? Integer.MIN_VALUE : ret.val );
    }

    /**
     * @@see java.util.Map#put(java.lang.Object, java.lang.Object)
     */
    public int put(float key, int value) {
        Entry t = root;
        lastOrder = 0;
        
        if (t == NIL) {
            incrementSize(true);
            root = new FloatEntry(key, value, NIL, lastOrder);
            return Integer.MIN_VALUE;
        }

        dummy.key = key;
        dummy.order = Integer.MAX_VALUE;
        
        while (true) {
            int cmp = compare(dummy, t);
            if (cmp == 0) {
                return t.setValue(value);
            } else if (cmp < 0) {
                if (t.left != NIL) {
                    t = t.left;
                } else {
                    incrementSize(lastOrder==0);
                    t.left = new FloatEntry(key, value, t, lastOrder);
                    fixUpInsert(t.left);
                    return Integer.MIN_VALUE;
                }
            } else { // cmp > 0
                if (t.right != NIL) {
                    t = t.right;
                } else {
                    incrementSize(lastOrder==0);
                    t.right = new FloatEntry(key, value, t, lastOrder);
                    fixUpInsert(t.right);
                    return Integer.MIN_VALUE;
                }
            }
        }
    }

    /**
     * @@see java.util.Map#remove(java.lang.Object)
     */
    public int remove(float key) {
        // remove the last instance with the given key
        Entry x;
        if ( allowDuplicates )
            x = findPredecessor(key, Integer.MAX_VALUE);
        else
            x = find(key, 0);
        
        if (x == NIL)
            return Integer.MIN_VALUE;

        int val = x.val;
        remove(x);
        return val;
    }

    public int remove(float key, int val) {
        // remove the last instance with the given key
        Entry x = find(key, 0);
        if (x == NIL) return Integer.MIN_VALUE;

        for ( ; x.val != val && x != NIL; x = successor(x) );
        if (x == NIL) return Integer.MIN_VALUE;
        
        remove(x);
        return val;
    }
    
    /**
     * @@see java.util.SortedMap#firstKey()
     */
    public float firstKey() {
        return minimum(root).getFloatKey();
    }
    
    /**
     * @@see java.util.SortedMap#lastKey()
     */
    public float lastKey() {
        return maximum(root).getFloatKey();
    }
    
    // -- Collection view methods ---------------------------------------------
    
    public LiteralIterator keyIterator() {
        return new KeyIterator();
    }
    
    public LiteralIterator keyRangeIterator(float fromKey, boolean fromInc,
                                            float toKey,   boolean toInc)
    {
        Entry start, end;
        
        if ( cmp.compare(fromKey, toKey) <= 0 ) {
            start = findCeiling(fromKey, (fromInc ? 0 : Integer.MAX_VALUE));
            end = findCeiling(toKey, (toInc? Integer.MAX_VALUE : 0));
        } else {
            start = findCeiling(fromKey, (fromInc ? Integer.MAX_VALUE : 0));
            start = predecessor(start);
            end = findCeiling(toKey, (toInc ? 0 : Integer.MAX_VALUE));
            end = predecessor(end);
        }
        return new KeyIterator(start, end);
    }
    
    public IntIterator valueRangeIterator(float fromKey, boolean fromInc, 
                                          float toKey,   boolean toInc)
    {
        return new ValueIterator(
            (EntryIterator)keyRangeIterator(fromKey,fromInc,toKey,toInc));
    }    
    
    // ------------------------------------------------------------------------
    // Internal Binary Search Tree / Red-Black Tree methods
    // Adapted from Cormen, Leiserson, and Rivest's Introduction to Algorithms
    
    protected int compare(Entry e1, Entry e2) {
        int c = cmp.compare(e1.getFloatKey(), e2.getFloatKey());
        if ( allowDuplicates ) {
            if ( c == 0 ) {
                c = (e1.order < e2.order ? -1 : (e1.order > e2.order ? 1 : 0));
                lastOrder = 1 + (c < 0 ? e1.order : e2.order);
            }
        }
        return c;
    }
    
    private Entry find(float key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = find(dummy);
        return e;
    }
    
    private Entry findPredecessor(float key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findPredecessor(dummy);
        return e;
    }
    
    private Entry findCeiling(float key, int order) {
        dummy.key = key;
        dummy.order = order;
        Entry e = findCeiling(dummy);
        return e;
    }
    
    // ========================================================================
    // Inner classes
    
    // ------------------------------------------------------------------------
    // Entry class - represents a Red-Black Tree Node
    
    static class FloatEntry extends AbstractTreeMap.Entry {
        float key;
        
        public FloatEntry(float key, int val) {
            super(val);
            this.key = key;
        }
        
        public FloatEntry(float key, int val, Entry parent, int order) {
            super(val, parent, order);
            this.key = key;
        }
        
        public float getFloatKey() {
            return key;
        }
        
        public Object getKey() {
            return new Float(key);
        }
        
        public boolean keyEquals(Entry e) {
            return (e instanceof FloatEntry && key == ((FloatEntry)e).key);
        }
        
        public boolean equals(Object o) {
            if (!(o instanceof FloatEntry))
                return false;
            
            FloatEntry e = (FloatEntry)o;
            return (key == e.key && val == e.val);
        }

        public int hashCode() {
            int khash = Float.floatToIntBits(key);
            int vhash = val;
            return khash ^ vhash ^ order;
        }

        public String toString() {
            return key + "=" + val;
        }
        
        public void copyFields(Entry x) {
            super.copyFields(x);
            this.key = x.getFloatKey();
        }
        
    }
    
    // ------------------------------------------------------------------------
    // Iterators
    
    private class KeyIterator extends AbstractTreeMap.KeyIterator {
        public KeyIterator() {
            super();   
        }
        public KeyIterator(Entry start, Entry end) {
            super(start, end);
        }
        public boolean isFloatSupported() {
            return true;
        }
        public float nextFloat() {
            return nextEntry().getFloatKey();
        }
    }
    
} // end of class FloatIntTreeMap
@


1.1.2.2
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@a6 1

d124 2
a125 4
        Entry x = findCeiling(key, 0);
    	if ( x!=NIL && x.getFloatKey() != key )
    		x = successor(x);
        if (x==NIL || x.getFloatKey()!=key) return Integer.MIN_VALUE;
@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d126 2
a127 2
        if ( x!=NIL && x.getFloatKey() != key )
            x = successor(x);
@


1.1.2.4
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@d3 5
a7 6
/**
 * Sorted map implementation using a red-black tree to map from float keys to
 * int values.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
@


