head	1.2;
access;
symbols
	java_1_5:1.2.0.4
	Root_java_1_5:1.2
	beta:1.2.0.2
	beta-20080113:1.2
	beta-20071021:1.2;
locks; strict;
comment	@# @;


1.2
date	2006.06.15.23.06.36;	author jheer;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2006.06.14.15.22.38;	author jheer;	state Exp;
branches;
next	;

1.2.4.1
date	2008.01.23.23.55.38;	author jogiles;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2008.02.29.06.12.57;	author amarsden;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Added javadoc comments
@
text
@package prefuse.util.collections;

import java.util.Comparator;

/**
 * Comparator that makes comparison using an ordered list of
 * individual comparators;
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class CompositeComparator implements Comparator {

    private static final int INCREMENT = 2;
    private Comparator[] m_cmp;
    private int m_rev = 1;
    private int m_size = 0;

    /**
     * Creates an empty CompositeComparator with the given capacity.
     * @@param size the starting capacity of this comparator
     */
    public CompositeComparator(int size) {
        this(size, false);
    }
    
    /**
     * Creates an empty CompositeComparator with the given capacity.
     * @@param size the starting capacity of this comparator
     * @@param reverse when true, reverses the sort order of the included
     * comparators, when false, objects are sorted as usual
     */
    public CompositeComparator(int size, boolean reverse) {
        m_cmp = new Comparator[size];
        m_rev = reverse ? -1 : 1;
    }
    
    /**
     * Creates a new CompositeComparator.
     * @@param cmp the constituent comparators of this composite
     */
    public CompositeComparator(Comparator[] cmp) {
        this(cmp, false);
    }
    
    /**
     * Creates a new CompositeComparator.
     * @@param cmp the constituent comparators of this composite
     * @@param reverse when true, reverses the sort order of the included
     * comparators, when false, objects are sorted as usual
     */
    public CompositeComparator(Comparator[] cmp, boolean reverse) {
        this(cmp.length, reverse);
        System.arraycopy(cmp, 0, m_cmp, 0, cmp.length);
        m_size = cmp.length;
    }
    
    /**
     * Adds an additional comparator to this composite.
     * @@param c the Comparator to add
     */
    public void add(Comparator c) {
        if ( c == null ) return;
        if ( m_cmp.length == m_size ) {
            Comparator[] cmp = new Comparator[m_size+INCREMENT];
            System.arraycopy(m_cmp, 0, cmp, 0, m_size);
            m_cmp = cmp;
        }
        m_cmp[m_size++] = c;
    }
    
    /**
     * Removes a comparator from this composite.
     * @@param c the Comparator to remove
     * @@return true if the comparator was successfully removed,
     * false otherwise
     */
    public boolean remove(Comparator c) {
        for ( int i=0; i<m_size; ++i ) {
            if ( m_cmp[i].equals(c) ) {
                System.arraycopy(m_cmp, i+1, m_cmp, i, m_size-i);
                --m_size;
                return true;
            }
        }
        return false;
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
     */
    public int compare(Object o1, Object o2) {
        for ( int i=0; i<m_cmp.length; ++i ) {
            int c = m_cmp[i].compare(o1, o2);
            if ( c != 0 ) {
                return m_rev*c;
            }
        }
        return 0;
    }

} // end of class CompositeComparator
@


1.2.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d8 1
a8 1
 *
d11 1
a11 1
public class CompositeComparator<E> implements Comparator<E> {
d14 1
a14 1
    private Comparator<? super E>[] m_cmp;
d25 1
a25 1

d36 1
a36 1

d41 1
a41 1
    public CompositeComparator(Comparator<? super E>[] cmp) {
d44 1
a44 1

d51 1
a51 1
    public CompositeComparator(Comparator<? super E>[] cmp, boolean reverse) {
d56 1
a56 1

d61 2
a62 4
    public void add(Comparator<? super E> c) {
        if ( c == null ) {
			return;
		}
d64 1
a64 1
            Comparator<? super E>[] cmp = new Comparator[m_size+INCREMENT];
d70 1
a70 1

d77 1
a77 1
    public boolean remove(Comparator<? super E> c) {
d87 1
a87 1

d89 1
a89 1

d93 1
a93 1
    public int compare(E o1, E o2) {
@


1.2.4.2
log
@varargs in constructors
@
text
@d41 2
a42 2
    public CompositeComparator(Comparator<? super E> ... cmp) {
        this(false, cmp);
d51 1
a51 1
    public CompositeComparator(boolean reverse, Comparator<? super E> ... cmp) {
@


1.1
log
@Added full sorting mechanisms for TupleSets, see prefuse.data.util.Sort
@
text
@d18 4
d26 6
d37 4
d45 6
d57 4
d71 6
d90 3
@

