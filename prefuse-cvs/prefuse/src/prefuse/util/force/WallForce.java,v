head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.30;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.30;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.27.09.05.15;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.37;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util.force;

import java.awt.geom.Line2D;

/**
 * Uses a gravitational force model to act as a "wall". Can be used to
 * construct line segments which either attract or repel items.
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class WallForce extends AbstractForce {

    private static String[] pnames = new String[] { "GravitationalConstant" };
    
    public static final float DEFAULT_GRAV_CONSTANT = -0.1f;
    public static final float DEFAULT_MIN_GRAV_CONSTANT = -1.0f;
    public static final float DEFAULT_MAX_GRAV_CONSTANT = 1.0f;
    public static final int GRAVITATIONAL_CONST = 0;
    
    private float x1, y1, x2, y2;
    private float dx, dy;
    
    /**
     * Create a new WallForce.
     * @@param gravConst the gravitational constant of the wall
     * @@param x1 the first x-coordinate of the wall
     * @@param y1 the first y-coordinate of the wall
     * @@param x2 the second x-coordinate of the wall
     * @@param y2 the second y-coordinate of the wall
     */
    public WallForce(float gravConst, 
        float x1, float y1, float x2, float y2) 
    {
        params = new float[] { gravConst };
        minValues = new float[] { DEFAULT_MIN_GRAV_CONSTANT };
        maxValues = new float[] { DEFAULT_MAX_GRAV_CONSTANT };
        
        this.x1 = x1; this.y1 = y1;
        this.x2 = x2; this.y2 = y2;
        dx = x2-x1;
        dy = y2-y1;
        float r = (float)Math.sqrt(dx*dx+dy*dy);
        if ( dx != 0.0 ) dx /= r;
        if ( dy != 0.0 ) dy /= r;
    }
    
    /**
     * Create a new WallForce with default gravitational constant.
     * @@param x1 the first x-coordinate of the wall
     * @@param y1 the first y-coordinate of the wall
     * @@param x2 the second x-coordinate of the wall
     * @@param y2 the second y-coordinate of the wall
     */
    public WallForce(float x1, float y1, float x2, float y2) {
        this(DEFAULT_GRAV_CONSTANT,x1,y1,x2,y2);
    }
    
    /**
     * Returns true.
     * @@see prefuse.util.force.Force#isItemForce()
     */
    public boolean isItemForce() {
        return true;
    }
    
    /**
     * @@see prefuse.util.force.AbstractForce#getParameterNames()
     */
    protected String[] getParameterNames() {
        return pnames;
    }
    
    /**
     * @@see prefuse.util.force.Force#getForce(prefuse.util.force.ForceItem)
     */
    public void getForce(ForceItem item) {
        float[] n = item.location;
        int ccw = Line2D.relativeCCW(x1,y1,x2,y2,n[0],n[1]);
        float r = (float)Line2D.ptSegDist(x1,y1,x2,y2,n[0],n[1]);
        if ( r == 0.0 ) r = (float)Math.random() / 100.0f;
        float v = params[GRAVITATIONAL_CONST]*item.mass / (r*r*r);
        if ( n[0] >= Math.min(x1,x2) && n[0] <= Math.max(x1,x2) )
            item.force[1] += ccw*v*dx;
        if ( n[1] >= Math.min(y1,y2) && n[1] <= Math.max(y1,y2) )
            item.force[0] += -1*ccw*v*dy;
    }

} // end of class WallForce
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d14 1
a14 1

d19 2
a20 2

    private final float x1, y1, x2, y2;
d22 1
a22 1

d31 2
a32 2
    public WallForce(float gravConst,
        float x1, float y1, float x2, float y2)
d37 1
a37 1

d43 2
a44 6
        if ( dx != 0.0 ) {
			dx /= r;
		}
        if ( dy != 0.0 ) {
			dy /= r;
		}
d46 1
a46 1

d57 1
a57 1

d62 1
a62 2
    @@Override
	public boolean isItemForce() {
d65 1
a65 1

d69 1
a69 2
    @@Override
	protected String[] getParameterNames() {
d72 1
a72 1

d76 1
a76 2
    @@Override
	public void getForce(ForceItem item) {
d80 1
a80 3
        if ( r == 0.0 ) {
			r = (float)Math.random() / 100.0f;
		}
d82 4
a85 6
        if ( n[0] >= Math.min(x1,x2) && n[0] <= Math.max(x1,x2) ) {
			item.force[1] += ccw*v*dx;
		}
        if ( n[1] >= Math.min(y1,y2) && n[1] <= Math.max(y1,y2) ) {
			item.force[0] += -1*ccw*v*dy;
		}
@


1.1
log
@file WallForce.java was initially added on branch beta.
@
text
@d1 88
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 67
package prefuse.util.force;

import java.awt.geom.Line2D;

/**
 * Uses a gravitational force model to act as a "wall". Can be used to
 * construct line segments which either attract or repel items.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class WallForce extends AbstractForce {

    private static String[] pnames = new String[] { "GravitationalConstant" };
    
    public static final float DEFAULT_GRAV_CONSTANT = -0.1f;
    public static final float DEFAULT_MIN_GRAV_CONSTANT = -1.0f;
    public static final float DEFAULT_MAX_GRAV_CONSTANT = 1.0f;
    public static final int GRAVITATIONAL_CONST = 0;
    
    private float x1, y1, x2, y2;
    private float dx, dy;
    
    public WallForce(float gravConst, 
        float x1, float y1, float x2, float y2) 
    {
        params = new float[] { gravConst };
        minValues = new float[] { DEFAULT_MIN_GRAV_CONSTANT };
        maxValues = new float[] { DEFAULT_MAX_GRAV_CONSTANT };
        
        this.x1 = x1; this.y1 = y1;
        this.x2 = x2; this.y2 = y2;
        dx = x2-x1;
        dy = y2-y1;
        float r = (float)Math.sqrt(dx*dx+dy*dy);
        if ( dx != 0.0 ) dx /= r;
        if ( dy != 0.0 ) dy /= r;
    } //
    
    public WallForce(float x1, float y1, float x2, float y2) {
        this(DEFAULT_GRAV_CONSTANT,x1,y1,x2,y2);
    } //
    
    public boolean isItemForce() {
        return true;
    } //
    
    protected String[] getParameterNames() {
        return pnames;
    } //
    
    /* (non-Javadoc)
     * @@see edu.berkeley.guir.prefusex.force.Force#getForce(edu.berkeley.guir.prefusex.force.ForceItem)
     */
    public void getForce(ForceItem item) {
        float[] n = item.location;
        int ccw = Line2D.relativeCCW(x1,y1,x2,y2,n[0],n[1]);
        float r = (float)Line2D.ptSegDist(x1,y1,x2,y2,n[0],n[1]);
        if ( r == 0.0 ) r = (float)Math.random() / 100.0f;
        float v = params[GRAVITATIONAL_CONST]*item.mass / (r*r*r);
        if ( n[0] >= Math.min(x1,x2) && n[0] <= Math.max(x1,x2) )
            item.force[1] += ccw*v*dx;
        if ( n[1] >= Math.min(y1,y2) && n[1] <= Math.max(y1,y2) )
            item.force[0] += -1*ccw*v*dy;
    } //

} // end of class WallForce
@


1.1.2.2
log
@Lots of javadoc
@
text
@d9 2
a10 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a23 8
    /**
     * Create a new WallForce.
     * @@param gravConst the gravitational constant of the wall
     * @@param x1 the first x-coordinate of the wall
     * @@param y1 the first y-coordinate of the wall
     * @@param x2 the second x-coordinate of the wall
     * @@param y2 the second y-coordinate of the wall
     */
d38 1
a38 1
    }
a39 7
    /**
     * Create a new WallForce with default gravitational constant.
     * @@param x1 the first x-coordinate of the wall
     * @@param y1 the first y-coordinate of the wall
     * @@param x2 the second x-coordinate of the wall
     * @@param y2 the second y-coordinate of the wall
     */
d42 1
a42 1
    }
a43 4
    /**
     * Returns true.
     * @@see prefuse.util.force.Force#isItemForce()
     */
d46 1
a46 1
    }
a47 3
    /**
     * @@see prefuse.util.force.AbstractForce#getParameterNames()
     */
d50 1
a50 1
    }
d52 2
a53 2
    /**
     * @@see prefuse.util.force.Force#getForce(prefuse.util.force.ForceItem)
d65 1
a65 1
    }
@


