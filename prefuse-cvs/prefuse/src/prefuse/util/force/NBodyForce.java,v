head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.30;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.30;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.23.07.18;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.27.09.05.15;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.02.09.05.12.45;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.37;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util.force;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Random;

/**
 * <p>Force function which computes an n-body force such as gravity,
 * anti-gravity, or the results of electric charges. This function implements
 * the the Barnes-Hut algorithm for efficient n-body force simulations,
 * using a quad-tree with aggregated mass values to compute the n-body
 * force in O(N log N) time, where N is the number of ForceItems.</p>
 * 
 * <p>The algorithm used is that of J. Barnes and P. Hut, in their research
 * paper <i>A Hierarchical  O(n log n) force calculation algorithm</i>, Nature, 
 *  v.324, December 1986. For more details on the algorithm, see one of
 *  the following links --
 * <ul>
 *   <li><a href="http://www.cs.berkeley.edu/~demmel/cs267/lecture26/lecture26.html">James Demmel's UC Berkeley lecture notes</a>
 *   <li><a href="http://www.physics.gmu.edu/~large/lr_forces/desc/bh/bhdesc.html">Description of the Barnes-Hut algorithm</a>
 *   <li><a href="http://www.ifa.hawaii.edu/~barnes/treecode/treeguide.html">Joshua Barnes' recent implementation</a>
 * </ul></p>
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class NBodyForce extends AbstractForce {

    /* 
     * The indexing scheme for quadtree child nodes goes row by row.
     *   0 | 1    0 -> top left,    1 -> top right
     *  -------
     *   2 | 3    2 -> bottom left, 3 -> bottom right
     */

    private static String[] pnames = new String[] { "GravitationalConstant", 
            "Distance", "BarnesHutTheta"  };
    
    public static final float DEFAULT_GRAV_CONSTANT = -1.0f;
    public static final float DEFAULT_MIN_GRAV_CONSTANT = -10f;
    public static final float DEFAULT_MAX_GRAV_CONSTANT = 10f;
    
    public static final float DEFAULT_DISTANCE = -1f;
    public static final float DEFAULT_MIN_DISTANCE = -1f;
    public static final float DEFAULT_MAX_DISTANCE = 500f;
    
    public static final float DEFAULT_THETA = 0.9f;
    public static final float DEFAULT_MIN_THETA = 0.0f;
    public static final float DEFAULT_MAX_THETA = 1.0f;
    
    public static final int GRAVITATIONAL_CONST = 0;
    public static final int MIN_DISTANCE = 1;
    public static final int BARNES_HUT_THETA = 2;
    
    private float xMin, xMax, yMin, yMax;
    private QuadTreeNodeFactory factory = new QuadTreeNodeFactory();
    private QuadTreeNode root;
    
    private Random rand = new Random(12345678L); // deterministic randomness

    /**
     * Create a new NBodyForce with default parameters.
     */
    public NBodyForce() {
        this(DEFAULT_GRAV_CONSTANT, DEFAULT_DISTANCE, DEFAULT_THETA);
    }
    
    /**
     * Create a new NBodyForce.
     * @@param gravConstant the gravitational constant to use. Nodes will
     * attract each other if this value is positive, and will repel each
     * other if it is negative.
     * @@param minDistance the distance within which two particles will
     * interact. If -1, the value is treated as infinite.
     * @@param theta the Barnes-Hut parameter theta, which controls when
     * an aggregated mass is used rather than drilling down to individual
     * item mass values.
     */
    public NBodyForce(float gravConstant, float minDistance, float theta) {
        params = new float[] { gravConstant, minDistance, theta };
        minValues = new float[] { DEFAULT_MIN_GRAV_CONSTANT,
            DEFAULT_MIN_DISTANCE, DEFAULT_MIN_THETA };
        maxValues = new float[] { DEFAULT_MAX_GRAV_CONSTANT,
            DEFAULT_MAX_DISTANCE, DEFAULT_MAX_THETA };
        root = factory.getQuadTreeNode();
    }

    /**
     * Returns true.
     * @@see prefuse.util.force.Force#isItemForce()
     */
    public boolean isItemForce() {
        return true;
    }
    
    /**
     * @@see prefuse.util.force.AbstractForce#getParameterNames()
     */
    protected String[] getParameterNames() {
        return pnames;
    } 
    
    /**
     * Set the bounds of the region for which to compute the n-body simulation
     * @@param xMin the minimum x-coordinate
     * @@param yMin the minimum y-coordinate
     * @@param xMax the maximum x-coordinate
     * @@param yMax the maximum y-coordinate
     */
    private void setBounds(float xMin, float yMin, float xMax, float yMax) {
        this.xMin = xMin;
        this.yMin = yMin;
        this.xMax = xMax;
        this.yMax = yMax;
    }

    /**
     * Clears the quadtree of all entries.
     */
    public void clear() {
        clearHelper(root);
        root = factory.getQuadTreeNode();
    }
    
    private void clearHelper(QuadTreeNode n) {
        for ( int i = 0; i < n.children.length; i++ ) {
            if ( n.children[i] != null )
                clearHelper(n.children[i]);
        }
        factory.reclaim(n);
    }

    /**
     * Initialize the simulation with the provided enclosing simulation. After
     * this call has been made, the simulation can be queried for the 
     * n-body force acting on a given item.
     * @@param fsim the enclosing ForceSimulator
     */
    public void init(ForceSimulator fsim) {
        clear(); // clear internal state
        
        // compute and squarify bounds of quadtree
        float x1 = Float.MAX_VALUE, y1 = Float.MAX_VALUE;
        float x2 = Float.MIN_VALUE, y2 = Float.MIN_VALUE;
        Iterator itemIter = fsim.getItems();
        while ( itemIter.hasNext() ) {
            ForceItem item = (ForceItem)itemIter.next();
            float x = item.location[0];
            float y = item.location[1];
            if ( x < x1 ) x1 = x;
            if ( y < y1 ) y1 = y;
            if ( x > x2 ) x2 = x;
            if ( y > y2 ) y2 = y;
        }
        float dx = x2-x1, dy = y2-y1;
        if ( dx > dy ) { y2 = y1 + dx; } else { x2 = x1 + dy; }
        setBounds(x1,y1,x2,y2);
        
        // insert items into quadtree
        itemIter = fsim.getItems();
        while ( itemIter.hasNext() ) {
            ForceItem item = (ForceItem)itemIter.next();
            insert(item);
        }
        
        // calculate magnitudes and centers of mass
        calcMass(root);
    }

    /**
     * Inserts an item into the quadtree.
     * @@param item the ForceItem to add.
     * @@throws IllegalStateException if the current location of the item is
     *  outside the bounds of the quadtree
     */
    public void insert(ForceItem item) {
        // insert item into the quadtrees
        try {
            insert(item, root, xMin, yMin, xMax, yMax);
        } catch ( StackOverflowError e ) {
            // TODO: safe to remove?
            e.printStackTrace();
        }
    }

    private void insert(ForceItem p, QuadTreeNode n, 
                        float x1, float y1, float x2, float y2)
    {
        // try to insert particle p at node n in the quadtree
        // by construction, each leaf will contain either 1 or 0 particles
        if ( n.hasChildren ) {
            // n contains more than 1 particle
            insertHelper(p,n,x1,y1,x2,y2);
        } else if ( n.value != null ) {
            // n contains 1 particle
            if ( isSameLocation(n.value, p) ) {
                insertHelper(p,n,x1,y1,x2,y2);
            } else {
                ForceItem v = n.value; n.value = null;
                insertHelper(v,n,x1,y1,x2,y2);
                insertHelper(p,n,x1,y1,x2,y2);
            }
        } else { 
            // n is empty, so is a leaf
            n.value = p;
        }
    }
    
    private static boolean isSameLocation(ForceItem f1, ForceItem f2) {
        float dx = Math.abs(f1.location[0]-f2.location[0]);
        float dy = Math.abs(f1.location[1]-f2.location[1]);
        return ( dx < 0.01 && dy < 0.01 );
    }
    
    private void insertHelper(ForceItem p, QuadTreeNode n, 
                              float x1, float y1, float x2, float y2)
    {   
        float x = p.location[0], y = p.location[1];
        float splitx = (x1+x2)/2;
        float splity = (y1+y2)/2;
        int i = (x>=splitx ? 1 : 0) + (y>=splity ? 2 : 0);
        // create new child node, if necessary
        if ( n.children[i] == null ) {
            n.children[i] = factory.getQuadTreeNode();
            n.hasChildren = true;
        }
        // update bounds
        if ( i==1 || i==3 ) x1 = splitx; else x2 = splitx;
        if ( i > 1 )        y1 = splity; else y2 = splity;
        // recurse 
        insert(p,n.children[i],x1,y1,x2,y2);        
    }

    private void calcMass(QuadTreeNode n) {
        float xcom = 0, ycom = 0;
        n.mass = 0;
        if ( n.hasChildren ) {
            for ( int i=0; i < n.children.length; i++ ) {
                if ( n.children[i] != null ) {
                    calcMass(n.children[i]);
                    n.mass += n.children[i].mass;
                    xcom += n.children[i].mass * n.children[i].com[0];
                    ycom += n.children[i].mass * n.children[i].com[1];
                }
            }
        }
        if ( n.value != null ) {
            n.mass += n.value.mass;
            xcom += n.value.mass * n.value.location[0];
            ycom += n.value.mass * n.value.location[1];
        }
        n.com[0] = xcom / n.mass;
        n.com[1] = ycom / n.mass;
    }

    /**
     * Calculates the force vector acting on the given item.
     * @@param item the ForceItem for which to compute the force
     */
    public void getForce(ForceItem item) {
        try {
            forceHelper(item,root,xMin,yMin,xMax,yMax);
        } catch ( StackOverflowError e ) {
            // TODO: safe to remove?
            e.printStackTrace();
        }
    }
    
    private void forceHelper(ForceItem item, QuadTreeNode n, 
                             float x1, float y1, float x2, float y2)
    {
        float dx = n.com[0] - item.location[0];
        float dy = n.com[1] - item.location[1];
        float r  = (float)Math.sqrt(dx*dx+dy*dy);
        boolean same = false;
        if ( r == 0.0f ) {
            // if items are in the exact same place, add some noise
            dx = (rand.nextFloat()-0.5f) / 50.0f;
            dy = (rand.nextFloat()-0.5f) / 50.0f;
            r  = (float)Math.sqrt(dx*dx+dy*dy);
            same = true;
        }
        boolean minDist = params[MIN_DISTANCE]>0f && r>params[MIN_DISTANCE];
        
        // the Barnes-Hut approximation criteria is if the ratio of the
        // size of the quadtree box to the distance between the point and
        // the box's center of mass is beneath some threshold theta.
        if ( (!n.hasChildren && n.value != item) || 
             (!same && (x2-x1)/r < params[BARNES_HUT_THETA]) ) 
        {
            if ( minDist ) return;
            // either only 1 particle or we meet criteria
            // for Barnes-Hut approximation, so calc force
            float v = params[GRAVITATIONAL_CONST]*item.mass*n.mass 
                        / (r*r*r);
            item.force[0] += v*dx;
            item.force[1] += v*dy;
        } else if ( n.hasChildren ) {
            // recurse for more accurate calculation
            float splitx = (x1+x2)/2;
            float splity = (y1+y2)/2;
            for ( int i=0; i<n.children.length; i++ ) {
                if ( n.children[i] != null ) {
                    forceHelper(item, n.children[i],
                        (i==1||i==3?splitx:x1), (i>1?splity:y1),
                        (i==1||i==3?x2:splitx), (i>1?y2:splity));
                }
            }
            if ( minDist ) return;
            if ( n.value != null && n.value != item ) {
                float v = params[GRAVITATIONAL_CONST]*item.mass*n.value.mass
                            / (r*r*r);
                item.force[0] += v*dx;
                item.force[1] += v*dy;
            }
        }
    }

    /**
     * Represents a node in the quadtree.
     */
    public static final class QuadTreeNode {
        public QuadTreeNode() {
            com = new float[] {0.0f, 0.0f};
            children = new QuadTreeNode[4];
        } //
        boolean hasChildren = false;
        float mass; // total mass held by this node
        float[] com; // center of mass of this node 
        ForceItem value; // ForceItem in this node, null if node has children
        QuadTreeNode[] children; // children nodes
    } // end of inner class QuadTreeNode

    /**
     * Helper class to minimize number of object creations across multiple
     * uses of the quadtree.
     */
    public static final class QuadTreeNodeFactory {
        private int maxNodes = 50000;
        private ArrayList nodes = new ArrayList();
        
        public QuadTreeNode getQuadTreeNode() {
            if ( nodes.size() > 0 ) {
                return (QuadTreeNode)nodes.remove(nodes.size()-1);
            } else {
                return new QuadTreeNode();
            }
        }
        public void reclaim(QuadTreeNode n) {
            n.mass = 0;
            n.com[0] = 0.0f; n.com[1] = 0.0f;
            n.value = null;
            n.hasChildren = false;
            Arrays.fill(n.children, null);          
            if ( nodes.size() < maxNodes )
                nodes.add(n);
        }
    } // end of inner class QuadTreeNodeFactory

} // end of class NBodyForce
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d5 1
d14 1
a14 1
 *
d16 1
a16 1
 * paper <i>A Hierarchical  O(n log n) force calculation algorithm</i>, Nature,
d24 1
a24 1
 *
d29 1
a29 1
    /*
d36 1
a36 1
    private static String[] pnames = new String[] { "GravitationalConstant",
d38 1
a38 1

d42 1
a42 1

d46 1
a46 1

d50 1
a50 1

d54 1
a54 1

d56 1
a56 1
    private final QuadTreeNodeFactory factory = new QuadTreeNodeFactory();
d58 2
a59 2

    private final Random rand = new Random(12345678L); // deterministic randomness
d67 1
a67 1

d92 1
a92 2
    @@Override
	public boolean isItemForce() {
d95 1
a95 1

d99 1
a99 2
    @@Override
	protected String[] getParameterNames() {
d101 2
a102 2
    }

d124 1
a124 1

d126 3
a128 4
        for (QuadTreeNode element : n.children) {
            if ( element != null ) {
				clearHelper(element);
			}
d135 1
a135 1
     * this call has been made, the simulation can be queried for the
d139 1
a139 2
    @@Override
	public void init(ForceSimulator fsim) {
d141 1
a141 1

d145 3
a147 1
        for( ForceItem item : fsim.getItems()) {
d150 4
a153 12
            if ( x < x1 ) {
				x1 = x;
			}
            if ( y < y1 ) {
				y1 = y;
			}
            if ( x > x2 ) {
				x2 = x;
			}
            if ( y > y2 ) {
				y2 = y;
			}
d158 1
a158 1

d160 3
a162 1
        for( ForceItem item : fsim.getItems()) {
d165 1
a165 1

d186 1
a186 1
    private void insert(ForceItem p, QuadTreeNode n,
d203 1
a203 1
        } else {
d208 1
a208 1

d212 1
a212 1
        return dx < 0.01 && dy < 0.01;
d214 2
a215 2

    private void insertHelper(ForceItem p, QuadTreeNode n,
d217 1
a217 1
    {
d228 4
a231 12
        if ( i==1 || i==3 ) {
			x1 = splitx;
		} else {
			x2 = splitx;
		}
        if ( i > 1 ) {
			y1 = splity;
		} else {
			y2 = splity;
		}
        // recurse
        insert(p,n.children[i],x1,y1,x2,y2);
d238 6
a243 6
            for (QuadTreeNode element : n.children) {
                if ( element != null ) {
                    calcMass(element);
                    n.mass += element.mass;
                    xcom += element.mass * element.com[0];
                    ycom += element.mass * element.com[1];
d260 1
a260 2
    @@Override
	public void getForce(ForceItem item) {
d268 2
a269 2

    private void forceHelper(ForceItem item, QuadTreeNode n,
d284 1
a284 1

d288 2
a289 2
        if ( !n.hasChildren && n.value != item ||
             !same && (x2-x1)/r < params[BARNES_HUT_THETA] )
d291 1
a291 3
            if ( minDist ) {
				return;
			}
d294 1
a294 1
            float v = params[GRAVITATIONAL_CONST]*item.mass*n.mass
d309 1
a309 3
            if ( minDist ) {
				return;
			}
d329 1
a329 1
        float[] com; // center of mass of this node
d339 3
a341 3
        private final int maxNodes = 50000;
        private final ArrayList<QuadTreeNode> nodes = new ArrayList<QuadTreeNode>();

d344 1
a344 1
                return nodes.remove(nodes.size()-1);
d354 3
a356 4
            Arrays.fill(n.children, null);
            if ( nodes.size() < maxNodes ) {
				nodes.add(n);
			}
@


1.1
log
@file NBodyForce.java was initially added on branch beta.
@
text
@d1 360
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 341
package prefuse.util.force;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Random;

/**
 * A quad-tree based implementation of the Barnes-Hut algorithm for
 *  efficient n-body force simulations. This can be used to create
 *  force-based layouts of graphs.
 * 
 * The Barnes-Hut algorithm originally appeared in <i>"A Hierarchical 
 *  O(n log n) force calculation algorithm" by J. Barnes and P. Hut, Nature, 
 *  v.324, December 1986</i>. For more details on the algorithm, see one of
 *  the following links --
 * <ul>
 *   <li><a href="http://www.cs.berkeley.edu/~demmel/cs267/lecture26/lecture26.html">James Demmel's UC Berkeley lecture notes</a>
 *   <li><a href="http://www.physics.gmu.edu/~large/lr_forces/desc/bh/bhdesc.html">Description of the Barnes-Hut algorithm</a>
 *   <li><a href="http://www.ifa.hawaii.edu/~barnes/treecode/treeguide.html">Joshua Barnes' recent implementation</a>
 * </ul>
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class NBodyForce extends AbstractForce {

	/* 
	 * The labeling scheme for quadtree child nodes goes row by row.
	 *   0 | 1    0 -> top left,    1 -> top right
	 *  -------
	 *   2 | 3    2 -> bottom left, 3 -> bottom right
	 */

    private static String[] pnames = new String[] { "GravitationalConstant", 
            "Distance", "BarnesHutTheta"  };
    
    public static final float DEFAULT_GRAV_CONSTANT = -0.4f;
    public static final float DEFAULT_MIN_GRAV_CONSTANT = -10f;
    public static final float DEFAULT_MAX_GRAV_CONSTANT = 10f;
    
    public static final float DEFAULT_DISTANCE = -1f;
    public static final float DEFAULT_MIN_DISTANCE = -1f;
    public static final float DEFAULT_MAX_DISTANCE = 500f;
    
    public static final float DEFAULT_THETA = 0.9f;
    public static final float DEFAULT_MIN_THETA = 0.0f;
    public static final float DEFAULT_MAX_THETA = 1.0f;
    
    public static final int GRAVITATIONAL_CONST = 0;
    public static final int MIN_DISTANCE = 1;
    public static final int BARNES_HUT_THETA = 2;
    
    private float xMin, xMax, yMin, yMax;
	private QuadTreeNodeFactory factory = new QuadTreeNodeFactory();
	private QuadTreeNode root;
	
	private Random rand = new Random(12345678L); // deterministic randomness

    /**
     * Construct a new empty NBodyForce simulation.
     */
    public NBodyForce() {
        this(DEFAULT_GRAV_CONSTANT, DEFAULT_DISTANCE, DEFAULT_THETA);
    } //
    
    public NBodyForce(float gravConstant, float minDistance, float theta) {
        params = new float[] { gravConstant, minDistance, theta };
        minValues = new float[] { DEFAULT_MIN_GRAV_CONSTANT,
            DEFAULT_MIN_DISTANCE, DEFAULT_MIN_THETA };
        maxValues = new float[] { DEFAULT_MAX_GRAV_CONSTANT,
            DEFAULT_MAX_DISTANCE, DEFAULT_MAX_THETA };
        root = factory.getQuadTreeNode();
    } //

    public boolean isItemForce() {
        return true;
    } //
    
    protected String[] getParameterNames() {
        return pnames;
    } //
    
	/**
	 * Set the bounds of the region for which to compute the n-body simulation
	 * @@param xMin the minimum x-coordinate
	 * @@param yMin the minimum y-coordinate
	 * @@param xMax the maximum x-coordinate
	 * @@param yMax the maximum y-coordinate
	 */
	private void setBounds(float xMin, float yMin, float xMax, float yMax) {
		this.xMin = xMin;
        this.yMin = yMin;
        this.xMax = xMax;
        this.yMax = yMax;
	} //

	/**
	 * Clears the quadtree of all entries.
	 */
	public void clear() {
		clearHelper(root);
		root = factory.getQuadTreeNode();
	} //
	
	private void clearHelper(QuadTreeNode n) {
		for ( int i = 0; i < n.children.length; i++ ) {
			if ( n.children[i] != null )
				clearHelper(n.children[i]);
		}
		factory.reclaim(n);
	} //

	/**
	 * Initialize the simulation with the provided enclosing simulation. After
     * this call has been made, the simulation can be queried for the 
     * n-body force on a given item.
	 * @@param fsim the enclosing ForceSimulator
	 */
	public void init(ForceSimulator fsim) {
		clear(); // clear internal state
        
        // compute and squarify bounds of quadtree
        float x1 = Float.MAX_VALUE, y1 = Float.MAX_VALUE;
        float x2 = Float.MIN_VALUE, y2 = Float.MIN_VALUE;
        Iterator itemIter = fsim.getItems();
        while ( itemIter.hasNext() ) {
            ForceItem item = (ForceItem)itemIter.next();
            float x = item.location[0];
            float y = item.location[1];
            if ( x < x1 ) x1 = x;
            if ( y < y1 ) y1 = y;
            if ( x > x2 ) x2 = x;
            if ( y > y2 ) y2 = y;
        }
        float dx = x2-x1, dy = y2-y1;
        if ( dx > dy ) { y2 = y1 + dx; } else { x2 = x1 + dy; }
        setBounds(x1,y1,x2,y2);
        
        // insert items into quadtree
        itemIter = fsim.getItems();
        while ( itemIter.hasNext() ) {
            ForceItem item = (ForceItem)itemIter.next();
            insert(item);
        }
        
        // calculate magnitudes and centers of mass
		calcMass(root);
	} //

	/**
	 * Inserts an item into the quadtree.
	 * @@param item the ForceItem to add.
	 * @@throws IllegalStateException if the current location of the item is
	 *  outside the bounds of the quadtree
	 */
	public void insert(ForceItem item) {
		// insert item into the quadtrees
	    try {
	        insert(item, root, xMin, yMin, xMax, yMax);
	    } catch ( StackOverflowError e ) {
	        // TODO: safe to remove?
	        e.printStackTrace();
	    }
	} //

	private void insert(ForceItem p, QuadTreeNode n, 
                        float x1, float y1, float x2, float y2)
    {
		// try to insert particle p at node n in the quadtree
		// by construction, each leaf will contain either 1 or 0 particles
		if ( n.hasChildren ) {
			// n contains more than 1 particle
			insertHelper(p,n,x1,y1,x2,y2);
		} else if ( n.value != null ) {
			// n contains 1 particle
            if ( isSameLocation(n.value, p) ) {
                insertHelper(p,n,x1,y1,x2,y2);
            } else {
                ForceItem v = n.value; n.value = null;
                insertHelper(v,n,x1,y1,x2,y2);
                insertHelper(p,n,x1,y1,x2,y2);
            }
		} else { 
			// n is empty, so is a leaf
			n.value = p;
		}
	} //
    
    private static boolean isSameLocation(ForceItem f1, ForceItem f2) {
        float dx = Math.abs(f1.location[0]-f2.location[0]);
        float dy = Math.abs(f1.location[1]-f2.location[1]);
        return ( dx < 0.01 && dy < 0.01 );
    } //
    
	private void insertHelper(ForceItem p, QuadTreeNode n, 
                              float x1, float y1, float x2, float y2)
    {   
		float x = p.location[0], y = p.location[1];
		float splitx = (x1+x2)/2;
		float splity = (y1+y2)/2;
		int i = (x>=splitx ? 1 : 0) + (y>=splity ? 2 : 0);
		// create new child node, if necessary
		if ( n.children[i] == null ) {
			n.children[i] = factory.getQuadTreeNode();
			n.hasChildren = true;
		}
		// update bounds
		if ( i==1 || i==3 ) x1 = splitx; else x2 = splitx;
		if ( i > 1 )        y1 = splity; else y2 = splity;
		// recurse 
		insert(p,n.children[i],x1,y1,x2,y2);		
	} //

	private void calcMass(QuadTreeNode n) {
		float xcom = 0, ycom = 0;
		n.mass = 0;
        if ( n.hasChildren ) {
    		for ( int i=0; i < n.children.length; i++ ) {
    			if ( n.children[i] != null ) {
    				calcMass(n.children[i]);
    				n.mass += n.children[i].mass;
    				xcom += n.children[i].mass * n.children[i].com[0];
    				ycom += n.children[i].mass * n.children[i].com[1];
    			}
    		}
        }
        if ( n.value != null ) {
            n.mass += n.value.mass;
            xcom += n.value.mass * n.value.location[0];
            ycom += n.value.mass * n.value.location[1];
        }
        n.com[0] = xcom / n.mass;
        n.com[1] = ycom / n.mass;
	} //

    /**
     * Calculates the force vector acting on the given item.
     * @@param item the ForceItem for which to compute the force
     */
	public void getForce(ForceItem item) {
	    try {
	        forceHelper(item,root,xMin,yMin,xMax,yMax);
	    } catch ( StackOverflowError e ) {
	        // TODO: safe to remove?
	        e.printStackTrace();
	    }
	} //
	
	private void forceHelper(ForceItem item, QuadTreeNode n, 
                             float x1, float y1, float x2, float y2)
	{
		float dx = n.com[0] - item.location[0];
        float dy = n.com[1] - item.location[1];
        float r  = (float)Math.sqrt(dx*dx+dy*dy);
        boolean same = false;
        if ( r == 0.0f ) {
            // if items are in the exact same place, add some noise
            dx = (rand.nextFloat()-0.5f) / 50.0f;
            dy = (rand.nextFloat()-0.5f) / 50.0f;
            r  = (float)Math.sqrt(dx*dx+dy*dy);
            same = true;
        }
        boolean minDist = params[MIN_DISTANCE]>0f && r>params[MIN_DISTANCE];
		
		// the Barnes-Hut approximation criteria is if the ratio of the
		// size of the quadtree box to the distance between the point and
		// the box's center of mass is beneath some threshold theta.
		if ( (!n.hasChildren && n.value != item) || 
             (!same && (x2-x1)/r < params[BARNES_HUT_THETA]) ) 
        {
            if ( minDist ) return;
			// either only 1 particle or we meet criteria
			// for Barnes-Hut approximation, so calc force
			float v = params[GRAVITATIONAL_CONST]*item.mass*n.mass 
                        / (r*r*r);
            item.force[0] += v*dx;
            item.force[1] += v*dy;
		} else if ( n.hasChildren ) {
			// recurse for more accurate calculation
			float splitx = (x1+x2)/2;
			float splity = (y1+y2)/2;
			for ( int i=0; i<n.children.length; i++ ) {
				if ( n.children[i] != null ) {
					forceHelper(item, n.children[i],
						(i==1||i==3?splitx:x1), (i>1?splity:y1),
						(i==1||i==3?x2:splitx), (i>1?y2:splity));
				}
			}
            if ( minDist ) return;
            if ( n.value != null && n.value != item ) {
                float v = params[GRAVITATIONAL_CONST]*item.mass*n.value.mass
                            / (r*r*r);
                item.force[0] += v*dx;
                item.force[1] += v*dy;
            }
		}
	} //

	/**
	 * Represents a node in the quadtree.
	 */
	public final class QuadTreeNode {
		public QuadTreeNode() {
            com = new float[] {0.0f, 0.0f};
			children = new QuadTreeNode[4];
		} //
		boolean hasChildren = false;
		float mass; // total mass held by this node
		float[] com; // center of mass of this node 
		ForceItem value; // ForceItem in this node, null if node has children
		QuadTreeNode[] children; // children nodes
	} // end of inner class QuadTreeNode

	/**
	 * Helper class to minimize number of object creations across multiple
	 * uses of the quadtree.
	 */
	public final class QuadTreeNodeFactory {
		private int maxNodes = 50000;
		private ArrayList nodes = new ArrayList();
		
		public QuadTreeNode getQuadTreeNode() {
			if ( nodes.size() > 0 ) {
				return (QuadTreeNode)nodes.remove(nodes.size()-1);
			} else {
				return new QuadTreeNode();
			}
		} //
		public void reclaim(QuadTreeNode n) {
			n.mass = 0;
			n.com[0] = 0.0f; n.com[1] = 0.0f;
			n.value = null;
			n.hasChildren = false;
			Arrays.fill(n.children, null);			
			if ( nodes.size() < maxNodes )
				nodes.add(n);
		} //
	} // end of inner class QuadTreeNodeFactory

} // end of class NBodyForce
@


1.1.2.2
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d28 6
a33 6
    /* 
     * The labeling scheme for quadtree child nodes goes row by row.
     *   0 | 1    0 -> top left,    1 -> top right
     *  -------
     *   2 | 3    2 -> bottom left, 3 -> bottom right
     */
d55 4
a58 4
    private QuadTreeNodeFactory factory = new QuadTreeNodeFactory();
    private QuadTreeNode root;
    
    private Random rand = new Random(12345678L); // deterministic randomness
d84 9
a92 9
    /**
     * Set the bounds of the region for which to compute the n-body simulation
     * @@param xMin the minimum x-coordinate
     * @@param yMin the minimum y-coordinate
     * @@param xMax the maximum x-coordinate
     * @@param yMax the maximum y-coordinate
     */
    private void setBounds(float xMin, float yMin, float xMax, float yMax) {
        this.xMin = xMin;
d96 1
a96 1
    } //
d98 15
a112 15
    /**
     * Clears the quadtree of all entries.
     */
    public void clear() {
        clearHelper(root);
        root = factory.getQuadTreeNode();
    } //
    
    private void clearHelper(QuadTreeNode n) {
        for ( int i = 0; i < n.children.length; i++ ) {
            if ( n.children[i] != null )
                clearHelper(n.children[i]);
        }
        factory.reclaim(n);
    } //
d114 2
a115 2
    /**
     * Initialize the simulation with the provided enclosing simulation. After
d118 4
a121 4
     * @@param fsim the enclosing ForceSimulator
     */
    public void init(ForceSimulator fsim) {
        clear(); // clear internal state
d148 2
a149 2
        calcMass(root);
    } //
d151 15
a165 15
    /**
     * Inserts an item into the quadtree.
     * @@param item the ForceItem to add.
     * @@throws IllegalStateException if the current location of the item is
     *  outside the bounds of the quadtree
     */
    public void insert(ForceItem item) {
        // insert item into the quadtrees
        try {
            insert(item, root, xMin, yMin, xMax, yMax);
        } catch ( StackOverflowError e ) {
            // TODO: safe to remove?
            e.printStackTrace();
        }
    } //
d167 1
a167 1
    private void insert(ForceItem p, QuadTreeNode n, 
d170 7
a176 7
        // try to insert particle p at node n in the quadtree
        // by construction, each leaf will contain either 1 or 0 particles
        if ( n.hasChildren ) {
            // n contains more than 1 particle
            insertHelper(p,n,x1,y1,x2,y2);
        } else if ( n.value != null ) {
            // n contains 1 particle
d184 5
a188 5
        } else { 
            // n is empty, so is a leaf
            n.value = p;
        }
    } //
d196 1
a196 1
    private void insertHelper(ForceItem p, QuadTreeNode n, 
d199 19
a217 19
        float x = p.location[0], y = p.location[1];
        float splitx = (x1+x2)/2;
        float splity = (y1+y2)/2;
        int i = (x>=splitx ? 1 : 0) + (y>=splity ? 2 : 0);
        // create new child node, if necessary
        if ( n.children[i] == null ) {
            n.children[i] = factory.getQuadTreeNode();
            n.hasChildren = true;
        }
        // update bounds
        if ( i==1 || i==3 ) x1 = splitx; else x2 = splitx;
        if ( i > 1 )        y1 = splity; else y2 = splity;
        // recurse 
        insert(p,n.children[i],x1,y1,x2,y2);        
    } //

    private void calcMass(QuadTreeNode n) {
        float xcom = 0, ycom = 0;
        n.mass = 0;
d219 8
a226 8
            for ( int i=0; i < n.children.length; i++ ) {
                if ( n.children[i] != null ) {
                    calcMass(n.children[i]);
                    n.mass += n.children[i].mass;
                    xcom += n.children[i].mass * n.children[i].com[0];
                    ycom += n.children[i].mass * n.children[i].com[1];
                }
            }
d235 1
a235 1
    } //
d241 10
a250 10
    public void getForce(ForceItem item) {
        try {
            forceHelper(item,root,xMin,yMin,xMax,yMax);
        } catch ( StackOverflowError e ) {
            // TODO: safe to remove?
            e.printStackTrace();
        }
    } //
    
    private void forceHelper(ForceItem item, QuadTreeNode n, 
d252 2
a253 2
    {
        float dx = n.com[0] - item.location[0];
d265 5
a269 5
        
        // the Barnes-Hut approximation criteria is if the ratio of the
        // size of the quadtree box to the distance between the point and
        // the box's center of mass is beneath some threshold theta.
        if ( (!n.hasChildren && n.value != item) || 
d273 3
a275 3
            // either only 1 particle or we meet criteria
            // for Barnes-Hut approximation, so calc force
            float v = params[GRAVITATIONAL_CONST]*item.mass*n.mass 
d279 11
a289 11
        } else if ( n.hasChildren ) {
            // recurse for more accurate calculation
            float splitx = (x1+x2)/2;
            float splity = (y1+y2)/2;
            for ( int i=0; i<n.children.length; i++ ) {
                if ( n.children[i] != null ) {
                    forceHelper(item, n.children[i],
                        (i==1||i==3?splitx:x1), (i>1?splity:y1),
                        (i==1||i==3?x2:splitx), (i>1?y2:splity));
                }
            }
d297 2
a298 2
        }
    } //
d300 5
a304 5
    /**
     * Represents a node in the quadtree.
     */
    public final class QuadTreeNode {
        public QuadTreeNode() {
d306 34
a339 34
            children = new QuadTreeNode[4];
        } //
        boolean hasChildren = false;
        float mass; // total mass held by this node
        float[] com; // center of mass of this node 
        ForceItem value; // ForceItem in this node, null if node has children
        QuadTreeNode[] children; // children nodes
    } // end of inner class QuadTreeNode

    /**
     * Helper class to minimize number of object creations across multiple
     * uses of the quadtree.
     */
    public final class QuadTreeNodeFactory {
        private int maxNodes = 50000;
        private ArrayList nodes = new ArrayList();
        
        public QuadTreeNode getQuadTreeNode() {
            if ( nodes.size() > 0 ) {
                return (QuadTreeNode)nodes.remove(nodes.size()-1);
            } else {
                return new QuadTreeNode();
            }
        } //
        public void reclaim(QuadTreeNode n) {
            n.mass = 0;
            n.com[0] = 0.0f; n.com[1] = 0.0f;
            n.value = null;
            n.hasChildren = false;
            Arrays.fill(n.children, null);          
            if ( nodes.size() < maxNodes )
                nodes.add(n);
        } //
    } // end of inner class QuadTreeNodeFactory
@


1.1.2.3
log
@Lots of javadoc
@
text
@d9 3
a11 5
 * <p>Force function which computes an n-body force such as gravity,
 * anti-gravity, or the results of electric charges. This function implements
 * the the Barnes-Hut algorithm for efficient n-body force simulations,
 * using a quad-tree with aggregated mass values to compute the n-body
 * force in O(N log N) time, where N is the number of ForceItems.</p>
d13 3
a15 3
 * <p>The algorithm used is that of J. Barnes and P. Hut, in their research
 * paper <i>A Hierarchical  O(n log n) force calculation algorithm</i>, Nature, 
 *  v.324, December 1986. For more details on the algorithm, see one of
d21 1
a21 1
 * </ul></p>
d23 2
a24 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d29 1
a29 1
     * The indexing scheme for quadtree child nodes goes row by row.
d61 1
a61 1
     * Create a new NBodyForce with default parameters.
d65 1
a65 1
    }
a66 11
    /**
     * Create a new NBodyForce.
     * @@param gravConstant the gravitational constant to use. Nodes will
     * attract each other if this value is positive, and will repel each
     * other if it is negative.
     * @@param minDistance the distance within which two particles will
     * interact. If -1, the value is treated as infinite.
     * @@param theta the Barnes-Hut parameter theta, which controls when
     * an aggregated mass is used rather than drilling down to individual
     * item mass values.
     */
d74 1
a74 1
    }
a75 4
    /**
     * Returns true.
     * @@see prefuse.util.force.Force#isItemForce()
     */
d78 1
a78 1
    }
a79 3
    /**
     * @@see prefuse.util.force.AbstractForce#getParameterNames()
     */
d82 1
a82 1
    } 
d96 1
a96 1
    }
d104 1
a104 1
    }
d112 1
a112 1
    }
d117 1
a117 1
     * n-body force acting on a given item.
d149 1
a149 1
    }
d165 1
a165 1
    }
d188 1
a188 1
    }
d194 1
a194 1
    }
d213 1
a213 1
    }
d235 1
a235 1
    }
d248 1
a248 1
    }
d298 1
a298 1
    }
d303 1
a303 1
    public static final class QuadTreeNode {
d319 1
a319 1
    public static final class QuadTreeNodeFactory {
d329 1
a329 1
        }
d338 1
a338 1
        }
@


1.1.2.4
log
@Various pre-release edits
Added RadialGraphView
Added new applets
Renamed ShapeRenderer to AbstractShapeRenderer
Renamed ShapeItemRenderer to ShapeRenderer
Merged TextItemRenderer and ImageItemRenderer into LabelRenderer
Removed demo launcher (and commented line in build.xml), will reintroduce demo launcher later
@
text
@d39 1
a39 1
    public static final float DEFAULT_GRAV_CONSTANT = -1.0f;
@


