head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.30;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.30;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.23.07.18;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.27.09.05.15;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.37;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util.force;

/**
 * Abstract base class for force functions in a force simulation. This
 * skeletal version provides support for storing and retrieving float-valued
 * parameters of the force function. Subclasses should use the protected
 * field <code>params</code> to store parameter values.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public abstract class AbstractForce implements Force {

    protected float[] params;
    protected float[] minValues;
    protected float[] maxValues;

    /**
     * Initialize this force function. This default implementation does nothing.
     * Subclasses should override this method with any needed initialization.
     * @@param fsim the encompassing ForceSimulator
     */
    public void init(ForceSimulator fsim) {
        // do nothing.
    }

    /**
     * @@see prefuse.util.force.Force#getParameterCount()
     */
    public int getParameterCount() {
        return ( params == null ? 0 : params.length );
    }

    /**
     * @@see prefuse.util.force.Force#getParameter(int)
     */
    public float getParameter(int i) {
        if ( i < 0 || params == null || i >= params.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            return params[i];
        }
    }
    
    /**
     * @@see prefuse.util.force.Force#getMinValue(int)
     */
    public float getMinValue(int i) {
        if ( i < 0 || params == null || i >= params.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            return minValues[i];
        }
    }
    
    /**
     * @@see prefuse.util.force.Force#getMaxValue(int)
     */
    public float getMaxValue(int i) {
        if ( i < 0 || params == null || i >= params.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            return maxValues[i];
        }
    }
    
    /**
     * @@see prefuse.util.force.Force#getParameterName(int)
     */
    public String getParameterName(int i) {
        String[] pnames = getParameterNames();
        if ( i < 0 || pnames == null || i >= pnames.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            return pnames[i];
        }
    }

    /**
     * @@see prefuse.util.force.Force#setParameter(int, float)
     */
    public void setParameter(int i, float val) {
        if ( i < 0 || params == null || i >= params.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            params[i] = val;
        }
    }
    
    /**
     * @@see prefuse.util.force.Force#setMinValue(int, float)
     */
    public void setMinValue(int i, float val) {
        if ( i < 0 || params == null || i >= params.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            minValues[i] = val;
        }
    }
    
    /**
     * @@see prefuse.util.force.Force#setMaxValue(int, float)
     */
    public void setMaxValue(int i, float val) {
        if ( i < 0 || params == null || i >= params.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            maxValues[i] = val;
        }
    }
    
    protected abstract String[] getParameterNames();
    
    /**
     * Returns false.
     * @@see prefuse.util.force.Force#isItemForce()
     */
    public boolean isItemForce() {
        return false;
    }
    
    /**
     * Returns false.
     * @@see prefuse.util.force.Force#isSpringForce()
     */
    public boolean isSpringForce() {
        return false;
    }
    
    /**
     * Throws an UnsupportedOperationException.
     * @@see prefuse.util.force.Force#getForce(prefuse.util.force.ForceItem)
     */
    public void getForce(ForceItem item) {
        throw new UnsupportedOperationException(
            "This class does not support this operation");
    }
    
    /**
     * Throws an UnsupportedOperationException.
     * @@see prefuse.util.force.Force#getForce(prefuse.util.force.Spring)
     */
    public void getForce(Spring spring) {
        throw new UnsupportedOperationException(
            "This class does not support this operation");
    }
    
} // end of abstract class AbstractForce
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d4 5
a8 5
 * Abstract base class for force functions in a force simulation. This skeletal
 * version provides support for storing and retrieving float-valued parameters
 * of the force function. Subclasses should use the protected field
 * <code>params</code> to store parameter values.
 *
d13 134
a146 140
	protected float[] params;
	protected float[] minValues;
	protected float[] maxValues;

	/**
	 * Initialize this force function. This default implementation does nothing.
	 * Subclasses should override this method with any needed initialization.
	 *
	 * @@param fsim
	 *            the encompassing ForceSimulator
	 */
	public void init(ForceSimulator fsim) {
		// do nothing.
	}

	/**
	 * @@see prefuse.util.force.Force#getParameterCount()
	 */
	public int getParameterCount() {
		return params == null ? 0 : params.length;
	}

	/**
	 * @@see prefuse.util.force.Force#getParameter(int)
	 */
	public float getParameter(int i) {
		if (i < 0 || params == null || i >= params.length) {
			throw new IndexOutOfBoundsException();
		} else {
			return params[i];
		}
	}

	/**
	 * @@see prefuse.util.force.Force#getMinValue(int)
	 */
	public float getMinValue(int i) {
		if (i < 0 || params == null || i >= params.length) {
			throw new IndexOutOfBoundsException();
		} else {
			return minValues[i];
		}
	}

	/**
	 * @@see prefuse.util.force.Force#getMaxValue(int)
	 */
	public float getMaxValue(int i) {
		if (i < 0 || params == null || i >= params.length) {
			throw new IndexOutOfBoundsException();
		} else {
			return maxValues[i];
		}
	}

	/**
	 * @@see prefuse.util.force.Force#getParameterName(int)
	 */
	public String getParameterName(int i) {
		String[] pnames = getParameterNames();
		if (i < 0 || pnames == null || i >= pnames.length) {
			throw new IndexOutOfBoundsException();
		} else {
			return pnames[i];
		}
	}

	/**
	 * @@see prefuse.util.force.Force#setParameter(int, float)
	 */
	public void setParameter(int i, float val) {
		if (i < 0 || params == null || i >= params.length) {
			throw new IndexOutOfBoundsException();
		} else {
			params[i] = val;
		}
	}

	/**
	 * @@see prefuse.util.force.Force#setMinValue(int, float)
	 */
	public void setMinValue(int i, float val) {
		if (i < 0 || params == null || i >= params.length) {
			throw new IndexOutOfBoundsException();
		} else {
			minValues[i] = val;
		}
	}

	/**
	 * @@see prefuse.util.force.Force#setMaxValue(int, float)
	 */
	public void setMaxValue(int i, float val) {
		if (i < 0 || params == null || i >= params.length) {
			throw new IndexOutOfBoundsException();
		} else {
			maxValues[i] = val;
		}
	}

	protected abstract String[] getParameterNames();

	/**
	 * Returns false.
	 *
	 * @@see prefuse.util.force.Force#isItemForce()
	 */
	public boolean isItemForce() {
		return false;
	}

	/**
	 * Returns false.
	 *
	 * @@see prefuse.util.force.Force#isSpringForce()
	 */
	public boolean isSpringForce() {
		return false;
	}

	/**
	 * Throws an UnsupportedOperationException.
	 *
	 * @@see prefuse.util.force.Force#getForce(prefuse.util.force.ForceItem)
	 */
	public void getForce(ForceItem item) {
		throw new UnsupportedOperationException(
				"This class does not support this operation");
	}

	/**
	 * Throws an UnsupportedOperationException.
	 *
	 * @@see prefuse.util.force.Force#getForce(prefuse.util.force.Spring)
	 */
	public void getForce(Spring spring) {
		throw new UnsupportedOperationException(
				"This class does not support this operation");
	}

@


1.1
log
@file AbstractForce.java was initially added on branch beta.
@
text
@d1 147
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 108
package prefuse.util.force;

/**
 * Abstract implementation of force functions in a force simulation. This
 * skeletal version provides support for storing and retrieving float-valued
 * parameters of the force function. Subclasses should use the protected
 * field <code>params</code> to store parameter values.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefusex(AT)jheer.org
 */
public abstract class AbstractForce implements Force {

    protected float[] params;
    protected float[] minValues;
    protected float[] maxValues;

    /**
     * Initialize this force function. This default implementation does nothing.
     * Subclasses should override this method with any needed initialization.
     * @@param fsim the encompassing ForceSimulator
     */
    public void init(ForceSimulator fsim) {
        // do nothing.
    } //

    public int getParameterCount() {
        return ( params == null ? 0 : params.length );
    } //

    public float getParameter(int i) {
        if ( i < 0 || params == null || i >= params.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            return params[i];
        }
    } //
    
    public float getMinValue(int i) {
        if ( i < 0 || params == null || i >= params.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            return minValues[i];
        }
    } //
    
    public float getMaxValue(int i) {
        if ( i < 0 || params == null || i >= params.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            return maxValues[i];
        }
    } //
    
    public String getParameterName(int i) {
        String[] pnames = getParameterNames();
        if ( i < 0 || pnames == null || i >= pnames.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            return pnames[i];
        }
    } //

    public void setParameter(int i, float val) {
        if ( i < 0 || params == null || i >= params.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            params[i] = val;
        }
    } //
    
    public void setMinValue(int i, float val) {
        if ( i < 0 || params == null || i >= params.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            minValues[i] = val;
        }
    } //
    
    public void setMaxValue(int i, float val) {
        if ( i < 0 || params == null || i >= params.length ) {
            throw new IndexOutOfBoundsException();
        } else {
            maxValues[i] = val;
        }
    } //
    
    protected abstract String[] getParameterNames();
    
    public boolean isItemForce() {
        return false;
    } //
    
    public boolean isSpringForce() {
        return false;
    } //
    
    public void getForce(ForceItem item) {
        throw new UnsupportedOperationException(
            "This class does not support this operation");
    } //
    
    public void getForce(Spring spring) {
        throw new UnsupportedOperationException(
            "This class does not support this operation");
    } //
    
} // end of abstract class AbstractForce@


1.1.2.2
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d108 1
a108 1
} // end of abstract class AbstractForce
@


1.1.2.3
log
@Lots of javadoc
@
text
@d4 1
a4 1
 * Abstract base class for force functions in a force simulation. This
d9 2
a10 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d25 1
a25 1
    }
a26 3
    /**
     * @@see prefuse.util.force.Force#getParameterCount()
     */
d29 1
a29 1
    }
a30 3
    /**
     * @@see prefuse.util.force.Force#getParameter(int)
     */
d37 1
a37 1
    }
a38 3
    /**
     * @@see prefuse.util.force.Force#getMinValue(int)
     */
d45 1
a45 1
    }
a46 3
    /**
     * @@see prefuse.util.force.Force#getMaxValue(int)
     */
d53 1
a53 1
    }
a54 3
    /**
     * @@see prefuse.util.force.Force#getParameterName(int)
     */
d62 1
a62 1
    }
a63 3
    /**
     * @@see prefuse.util.force.Force#setParameter(int, float)
     */
d70 1
a70 1
    }
a71 3
    /**
     * @@see prefuse.util.force.Force#setMinValue(int, float)
     */
d78 1
a78 1
    }
a79 3
    /**
     * @@see prefuse.util.force.Force#setMaxValue(int, float)
     */
d86 1
a86 1
    }
a89 4
    /**
     * Returns false.
     * @@see prefuse.util.force.Force#isItemForce()
     */
d92 1
a92 1
    }
a93 4
    /**
     * Returns false.
     * @@see prefuse.util.force.Force#isSpringForce()
     */
d96 1
a96 1
    }
a97 4
    /**
     * Throws an UnsupportedOperationException.
     * @@see prefuse.util.force.Force#getForce(prefuse.util.force.ForceItem)
     */
d101 1
a101 1
    }
a102 4
    /**
     * Throws an UnsupportedOperationException.
     * @@see prefuse.util.force.Force#getForce(prefuse.util.force.Spring)
     */
d106 1
a106 1
    }
@


