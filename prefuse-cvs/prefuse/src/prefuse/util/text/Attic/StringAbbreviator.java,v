head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.20;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.23.07.20;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.02.07.00.42.53;	author jheer;	state dead;
branches;
next	;


desc
@@


1.1
log
@file StringAbbreviator.java was initially added on branch beta.
@
text
@@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 354
package prefuse.util.text;

import java.io.*;
import java.net.URL;
import java.util.Hashtable;
import java.awt.FontMetrics;

/**
 * This class controls the abbreviation of strings to fit them to a given 
 * length. It provides methods for various types of strings, specifically
 * names, phone numbers, and e-mail addresses, in addition to simple
 * string truncation.
 *
 * @@version 1.0
 * @@author David Nation
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class StringAbbreviator {

    private static final String SUFFIX = "suffix";
	private static final String PREFIX = "prefix";
	
	public static final int NAME     = 0;
    public static final int PHONE    = 1;
    public static final int EMAIL    = 2;
    public static final int TRUNCATE = 3;
    public static final int FILE     = 4;

    public static final String STR_NAME     = "name";
    public static final String STR_PHONE    = "phone";
    public static final String STR_EMAIL    = "email";
    public static final String STR_TRUNCATE = "truncate";
    public static final String STR_FILE     = "file";

    protected URL datadir;
    protected String datafile;
    protected Hashtable abbrevT;

    protected static Hashtable prefixSuffixT = new Hashtable();
    static {
        prefixSuffixT.put( "mr",    PREFIX );
        prefixSuffixT.put( "mr.",   PREFIX );
        prefixSuffixT.put( "dr",    PREFIX );
        prefixSuffixT.put( "dr.",   PREFIX );
        prefixSuffixT.put( "lt",    PREFIX );
        prefixSuffixT.put( "lt.",   PREFIX );
        prefixSuffixT.put( "gen",   PREFIX );
        prefixSuffixT.put( "gen.",  PREFIX );
        prefixSuffixT.put( "sgt",   PREFIX );
        prefixSuffixT.put( "sgt.",  PREFIX );
        prefixSuffixT.put( "cmdr",  PREFIX );
        prefixSuffixT.put( "cmdr.", PREFIX );
        prefixSuffixT.put( "cpt",   PREFIX );
        prefixSuffixT.put( "cpt.",  PREFIX );
        prefixSuffixT.put( "ii",    SUFFIX );
        prefixSuffixT.put( "iii",   SUFFIX );
        prefixSuffixT.put( "iv",    SUFFIX );
        prefixSuffixT.put( "jr",    SUFFIX );
        prefixSuffixT.put( "jr.",   SUFFIX );
        prefixSuffixT.put( "sr",    SUFFIX );
        prefixSuffixT.put( "sr.",   SUFFIX );
    } //
    
    private static StringAbbreviator s_abbrev = new StringAbbreviator(null,null);


    //// =====================================================================
    //// == CONSTRUCTOR ======================================================

    /** 
     * Construct an abbreviator.
     * @@param docBase Document base for applet or application.
     * @@param abbrfile File name which contains abbreviation pairs.
     */
    public StringAbbreviator(URL docBase, String abbrfile) {
		datadir = docBase;
		datafile = abbrfile;
    } //
    
    public static StringAbbreviator getInstance() {
    	return s_abbrev;
    } //

    //// == END CONSTRUCTOR ==================================================
    //// =====================================================================



    //// =====================================================================
    //// == ABBREVIATION METHODS =============================================

    public String abbreviate(String str, int type, FontMetrics fm, int width) {
		switch ( type ) {
		case NAME:
		    if (fm.stringWidth(str) > width) str = abbreviateName(str, false);
		    if (fm.stringWidth(str) > width) str = abbreviateName(str, true);
		    break;
		case PHONE:
		    if (fm.stringWidth(str) > width) str = abbreviatePhone(str, 8);
		    if (fm.stringWidth(str) > width) str = abbreviatePhone(str, 4);
		    break;
		case EMAIL:
		    if (fm.stringWidth(str) > width) str = abbreviateEmail(str);
		    break;
		case FILE:
		    if (fm.stringWidth(str) > width) str = abbreviate(str, false);
		    if (fm.stringWidth(str) > width) str = abbreviate(str, true);
		    break;
		case TRUNCATE:
		default:
		    int lastblank = 0, nchars = 0, cumx = 0;
		    while ( cumx < width &&  nchars < str.length() ) {
			if ( Character.isWhitespace(str.charAt(nchars)) ) {
			    lastblank = nchars;
			}
			cumx += fm.charWidth(str.charAt(nchars));
			nchars++;
		    }
		    if ( nchars < str.length() && lastblank > 0 ) { nchars = lastblank; }
		    str = ( nchars > 0 ? str.substring(0, nchars) : str );
		}
		return str;
    } //
    
    public String abbreviateName(String str, FontMetrics fm, int width) {
    	return abbreviate(str, NAME, fm, width);
    } //
    
	public String abbreviateEmail(String str, FontMetrics fm, int width) {
		return abbreviate(str, EMAIL, fm, width);
	} //

    protected String abbreviate(String inString, boolean initial) {
		// If abbreviation file has not been read in yet, read it in.
		if (abbrevT == null) {
		    readAbbrFile();
		}
	
		String allowableLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		StringReader in = new StringReader(inString);
		StreamTokenizer p = new StreamTokenizer(in);
		p.wordChars('&', '&');
		p.wordChars('@@', '@@');
		p.ordinaryChar(',');
		p.ordinaryChar('.');
		p.ordinaryChar('-');
		p.ordinaryChar(':');
		int c;
		String newVal = null;
		StringBuffer outString = new StringBuffer();
		boolean firstTime = true;
		try {
		out:
		    while (true) {
			c = p.nextToken();
		 	switch (c) {
			case StreamTokenizer.TT_EOF:
			    break out;
			case StreamTokenizer.TT_EOL:
			    System.err.println("warning: unexpected EOL token"); break;
			case StreamTokenizer.TT_NUMBER:
			    if (firstTime) firstTime = false;
			    else if (!initial) outString.append(" ");
			    outString.append(new Integer((int)(p.nval)));
			    break;
			case StreamTokenizer.TT_WORD:
			    if (firstTime) firstTime = false;
			    else if (!initial) outString.append(" ");
			    if (initial) {
				String tmps = p.sval.substring(0,1);			
			        if ( allowableLetters.indexOf(tmps) >= 0 ) outString.append(tmps);
			    } else {
				if ((newVal = (String) abbrevT.get(p.sval.toLowerCase())) != null) {
				    outString.append(newVal);
				} else {
				    outString.append(p.sval);
				}
			    }
			    break;
			case ',':
			    outString.append((char) c);
			    break;
			case ':':
			    outString.append((char) c);
			    break;
			case '.':
			    if (!initial) outString.append((char) c);
			    break;
			case '-':
			    if (!initial) outString.append((char) c);
			    break;
			default:
			    if (!initial) outString.append((char) c);
			    break;
			}
		    }
		} catch (IOException e) {
		    e.printStackTrace();
		}
		return outString.toString();
    } //

    protected String abbreviatePhone(String inString, int maxChars) {
		if ((inString != null) && (inString.length() > maxChars)) {
		    return inString.substring(inString.length() - maxChars);
		} else return inString;
    } //

    protected String abbreviateEmail(String inString) {
		if ((inString != null) && (inString.indexOf('@@') > 0)) {
		    return inString.substring(0, inString.indexOf('@@'));
		} else {
		    return inString;
		}
    } //

    protected String abbreviateName(String inString, boolean lastOnly) {
		StringReader in = new StringReader(inString);
		StreamTokenizer p = new StreamTokenizer(in);
		p.wordChars('&', '&');
		p.wordChars('@@', '@@');
		p.wordChars(':', ':');
		p.ordinaryChar(',');
		p.ordinaryChar('-');
		int c;
		String lastNameHold = null;
		String lastInitialHold = null;
		StringBuffer outString = new StringBuffer();
		try {
		out:
		    while (true) {
			c = p.nextToken();
		 	switch (c) {
			case StreamTokenizer.TT_EOF:
			    break out;
			case StreamTokenizer.TT_EOL:
			    System.err.println("warning: unexpected EOL token"); break;
			case StreamTokenizer.TT_NUMBER:
			    break;
			case ',':
			    break out;
			case StreamTokenizer.TT_WORD:
			    if (p.sval.endsWith(":")) outString.append(p.sval + " ");
			    else if (prefixSuffixT.get(p.sval.toLowerCase()) == null) {
			        if (!lastOnly) {
			            if (lastInitialHold != null) outString.append(lastInitialHold);
			            lastInitialHold = p.sval.substring(0,1)+". ";
			        }
			        lastNameHold = p.sval;
			    }
			    break;
			default:
			    break;
			}
		    }
		    outString.append(lastNameHold);
		} catch (IOException e) {
		    e.printStackTrace();
		}
		return outString.toString();
    } //

    //// == END ABBREVIATION METHODS =========================================
    //// =====================================================================



    //// =====================================================================
    //// == ABBREV FILE PARSING ==============================================

    /**
     * Reads in the abbreviation file.
     */
    public void readAbbrFile() {
		abbrevT = new Hashtable();
		try {  // open directory data file
		    URL theURL = new URL(datadir, datafile);
		    BufferedReader d = new BufferedReader(new InputStreamReader(theURL.openStream()));
		    parseAbbrFile(d, abbrevT);
		}
		catch (Exception e) {
		    // No abbrev file found, but that's OK, we'll just go on without it -- jheer
		}
    } //

    /**
     * Parses an abbreviation mapping coming in from an input stream.
     * @@param in the BufferedReader from which to read the mappings.
     * @@param h the Hashtable in which to store the mappings.
     */
    public static void parseAbbrFile(BufferedReader in, Hashtable h) {
		StreamTokenizer p = new StreamTokenizer(in);
		//key values are separated by white spaces or '='
		p.whitespaceChars('=', '=');
		p.wordChars('&', '&');	// allow & as an abbreviation
		p.wordChars('/', '/');
		p.slashStarComments(true);
		p.slashSlashComments(true);
		p.commentChar('#');
		int c;
		String key = null;
		boolean errflag = false;
		boolean expecting_value = false;
		try {
		out:
		    while (true) {
			c = p.nextToken();
		 	switch (c) {
			case StreamTokenizer.TT_EOF:
			    break out;
			case StreamTokenizer.TT_EOL:
			    System.err.println("warning: unexpected EOL token"); break;
			case StreamTokenizer.TT_NUMBER:
			    if (expecting_value) {
				h.put(key, new Double(p.nval));
				expecting_value = false;
			    } else {
				errflag = true;
				break out;
			    }
			    break;
			case StreamTokenizer.TT_WORD:
			    if (expecting_value) {
				h.put(key, p.sval);
				expecting_value = false;
			    } else {
				expecting_value = true;
				key = p.sval.toLowerCase();
			    }
			    break;
			default:
			    errflag = true;
			    break out;
			}
		    }
		    if (errflag) System.out.println("Error encountered around '"+key+"'");
		} catch (IOException e) {
		    e.printStackTrace();
		}
    } //

    /** 
     * Set the abbreviation file name.
     * @@param fileName Abbreviation file name.
     */
    public void setAbbrFile(String fileName) {
		datafile = fileName;
		readAbbrFile();
    } //

    //// == END ABBREV FILE PARSING ==========================================
    //// =====================================================================

} // end of class StringAbbreviator
@


1.1.2.2
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d21 3
a23 3
    private static final String PREFIX = "prefix";
    
    public static final int NAME     = 0;
d76 2
a77 2
        datadir = docBase;
        datafile = abbrfile;
d81 1
a81 1
        return s_abbrev;
d93 30
a122 30
        switch ( type ) {
        case NAME:
            if (fm.stringWidth(str) > width) str = abbreviateName(str, false);
            if (fm.stringWidth(str) > width) str = abbreviateName(str, true);
            break;
        case PHONE:
            if (fm.stringWidth(str) > width) str = abbreviatePhone(str, 8);
            if (fm.stringWidth(str) > width) str = abbreviatePhone(str, 4);
            break;
        case EMAIL:
            if (fm.stringWidth(str) > width) str = abbreviateEmail(str);
            break;
        case FILE:
            if (fm.stringWidth(str) > width) str = abbreviate(str, false);
            if (fm.stringWidth(str) > width) str = abbreviate(str, true);
            break;
        case TRUNCATE:
        default:
            int lastblank = 0, nchars = 0, cumx = 0;
            while ( cumx < width &&  nchars < str.length() ) {
            if ( Character.isWhitespace(str.charAt(nchars)) ) {
                lastblank = nchars;
            }
            cumx += fm.charWidth(str.charAt(nchars));
            nchars++;
            }
            if ( nchars < str.length() && lastblank > 0 ) { nchars = lastblank; }
            str = ( nchars > 0 ? str.substring(0, nchars) : str );
        }
        return str;
d126 1
a126 1
        return abbreviate(str, NAME, fm, width);
d129 3
a131 3
    public String abbreviateEmail(String str, FontMetrics fm, int width) {
        return abbreviate(str, EMAIL, fm, width);
    } //
d134 67
a200 67
        // If abbreviation file has not been read in yet, read it in.
        if (abbrevT == null) {
            readAbbrFile();
        }
    
        String allowableLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        StringReader in = new StringReader(inString);
        StreamTokenizer p = new StreamTokenizer(in);
        p.wordChars('&', '&');
        p.wordChars('@@', '@@');
        p.ordinaryChar(',');
        p.ordinaryChar('.');
        p.ordinaryChar('-');
        p.ordinaryChar(':');
        int c;
        String newVal = null;
        StringBuffer outString = new StringBuffer();
        boolean firstTime = true;
        try {
        out:
            while (true) {
            c = p.nextToken();
            switch (c) {
            case StreamTokenizer.TT_EOF:
                break out;
            case StreamTokenizer.TT_EOL:
                System.err.println("warning: unexpected EOL token"); break;
            case StreamTokenizer.TT_NUMBER:
                if (firstTime) firstTime = false;
                else if (!initial) outString.append(" ");
                outString.append(new Integer((int)(p.nval)));
                break;
            case StreamTokenizer.TT_WORD:
                if (firstTime) firstTime = false;
                else if (!initial) outString.append(" ");
                if (initial) {
                String tmps = p.sval.substring(0,1);            
                    if ( allowableLetters.indexOf(tmps) >= 0 ) outString.append(tmps);
                } else {
                if ((newVal = (String) abbrevT.get(p.sval.toLowerCase())) != null) {
                    outString.append(newVal);
                } else {
                    outString.append(p.sval);
                }
                }
                break;
            case ',':
                outString.append((char) c);
                break;
            case ':':
                outString.append((char) c);
                break;
            case '.':
                if (!initial) outString.append((char) c);
                break;
            case '-':
                if (!initial) outString.append((char) c);
                break;
            default:
                if (!initial) outString.append((char) c);
                break;
            }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return outString.toString();
d204 3
a206 3
        if ((inString != null) && (inString.length() > maxChars)) {
            return inString.substring(inString.length() - maxChars);
        } else return inString;
d210 5
a214 5
        if ((inString != null) && (inString.indexOf('@@') > 0)) {
            return inString.substring(0, inString.indexOf('@@'));
        } else {
            return inString;
        }
d218 43
a260 43
        StringReader in = new StringReader(inString);
        StreamTokenizer p = new StreamTokenizer(in);
        p.wordChars('&', '&');
        p.wordChars('@@', '@@');
        p.wordChars(':', ':');
        p.ordinaryChar(',');
        p.ordinaryChar('-');
        int c;
        String lastNameHold = null;
        String lastInitialHold = null;
        StringBuffer outString = new StringBuffer();
        try {
        out:
            while (true) {
            c = p.nextToken();
            switch (c) {
            case StreamTokenizer.TT_EOF:
                break out;
            case StreamTokenizer.TT_EOL:
                System.err.println("warning: unexpected EOL token"); break;
            case StreamTokenizer.TT_NUMBER:
                break;
            case ',':
                break out;
            case StreamTokenizer.TT_WORD:
                if (p.sval.endsWith(":")) outString.append(p.sval + " ");
                else if (prefixSuffixT.get(p.sval.toLowerCase()) == null) {
                    if (!lastOnly) {
                        if (lastInitialHold != null) outString.append(lastInitialHold);
                        lastInitialHold = p.sval.substring(0,1)+". ";
                    }
                    lastNameHold = p.sval;
                }
                break;
            default:
                break;
            }
            }
            outString.append(lastNameHold);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return outString.toString();
d275 9
a283 9
        abbrevT = new Hashtable();
        try {  // open directory data file
            URL theURL = new URL(datadir, datafile);
            BufferedReader d = new BufferedReader(new InputStreamReader(theURL.openStream()));
            parseAbbrFile(d, abbrevT);
        }
        catch (Exception e) {
            // No abbrev file found, but that's OK, we'll just go on without it -- jheer
        }
d292 48
a339 48
        StreamTokenizer p = new StreamTokenizer(in);
        //key values are separated by white spaces or '='
        p.whitespaceChars('=', '=');
        p.wordChars('&', '&');  // allow & as an abbreviation
        p.wordChars('/', '/');
        p.slashStarComments(true);
        p.slashSlashComments(true);
        p.commentChar('#');
        int c;
        String key = null;
        boolean errflag = false;
        boolean expecting_value = false;
        try {
        out:
            while (true) {
            c = p.nextToken();
            switch (c) {
            case StreamTokenizer.TT_EOF:
                break out;
            case StreamTokenizer.TT_EOL:
                System.err.println("warning: unexpected EOL token"); break;
            case StreamTokenizer.TT_NUMBER:
                if (expecting_value) {
                h.put(key, new Double(p.nval));
                expecting_value = false;
                } else {
                errflag = true;
                break out;
                }
                break;
            case StreamTokenizer.TT_WORD:
                if (expecting_value) {
                h.put(key, p.sval);
                expecting_value = false;
                } else {
                expecting_value = true;
                key = p.sval.toLowerCase();
                }
                break;
            default:
                errflag = true;
                break out;
            }
            }
            if (errflag) System.out.println("Error encountered around '"+key+"'");
        } catch (IOException e) {
            e.printStackTrace();
        }
d347 2
a348 2
        datafile = fileName;
        readAbbrFile();
@


1.1.2.3
log
@Lots of javadoc
@
text
@d14 1
d16 1
a16 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d67 2
a68 2
    // ------------------------------------------------------------------------
    // Constructor
d78 1
a78 1
    }
a79 4
    /**
     * Access the StringAbbreviator singleton.
     * @@return the global StringAbbreviator instance.
     */
d82 1
a82 1
    }
d84 7
a90 2
    // ------------------------------------------------------------------------
    // Abbreviation Methods
a91 8
    /**
     * Abbreviate a string.
     * @@param str the string to abbreviate
     * @@param type the abbreviation type
     * @@param fm the font metrics to use to measure string length
     * @@param width the maximum allowed length of the string
     * @@return an abbreviated string
     */
d123 1
a123 1
    }
a124 7
    /**
     * Abbreviate a string as a name.
     * @@param str the string to abbreviate
     * @@param fm the font metrics to use to measure string length
     * @@param width the maximum allowed length of the string
     * @@return an abbreviated string
     */
d127 2
a128 9
    }

    /**
     * Abbreviate a string as an e-mail address.
     * @@param str the string to abbreviate
     * @@param fm the font metrics to use to measure string length
     * @@param width the maximum allowed length of the string
     * @@return an abbreviated string
     */
d131 1
a131 1
    }
d201 1
a201 1
    }
d207 1
a207 1
    }
d215 1
a215 1
    }
d261 1
a261 1
    }
d263 7
a269 2
    // ------------------------------------------------------------------------
    // Abbreviation File Parsing
d284 1
a284 1
    }
d340 1
a340 1
    }
d349 4
a352 1
    }
@


1.1.2.4
log
@Intermediate commit in run-up to release.
Upgraded Tuple, Node, and Edge to the data package.
Renamed "Function" classes to "Action" classes.
Added Shape to VisualItem Schema.
Added ShapeActions, moved Shape constants to Constants interface.
Added Background image handling to the Display class.
Added social network data file.
@
text
@@


