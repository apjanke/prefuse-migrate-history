head	2.2;
access;
symbols
	java_1_5:2.2.0.4
	Root_java_1_5:2.2
	beta:2.2.0.2
	beta-20080113:2.2
	beta-20071021:2.2
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.2
date	2006.07.15.22.50.45;	author jheer;	state Exp;
branches
	2.2.4.1;
next	2.1;

2.1
date	2006.07.15.18.23.54;	author jheer;	state Exp;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.45;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.31;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.30.09.08.06;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.02.01.19.22.43;	author jheer;	state Exp;
branches;
next	;

2.2.4.1
date	2008.01.23.23.55.36;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.2
log
@Added ability for Graph nodes to be keyed by any integer type, including long. This enables larger key sizes and timestamps to be used as node keys.
Locked the schemas for the adjunct links tables in Graph and Tree.
@
text
@package prefuse.util;

/**
 * Library routines dealing with Java Class types.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class TypeLib {

    private TypeLib() {
        // prevent instantiation
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * Check if an object is an instance of a given class, or, if the class
     * is a primitive type, if the Object is an instance of the wrapper class
     * for that primitive (e.g., as Integer is a wrapper for int).
     * @@param type the Class type
     * @@param instance the Object instance
     * @@return true if the object is an instance of the given class, or if
     * of the appropriate primitive wrapper type.
     */
    public static boolean typeCheck(Class type, Object instance) {
        return type.isAssignableFrom(instance.getClass()) ||
            isWrapperInstance(type, instance);
    }
    
    /**
     * Get the nearest shared ancestor class of two objects. Note: this
     * currently does not compute the actual least common ancestor, but
     * only looks up one level in the inheritance tree and quits if
     * it does not find a match.
     * @@param o1 the first object
     * @@param o2 the second object
     * @@return the nearest class instance of which both objects
     * are instances
     */
    public static Class getSharedType(Object o1, Object o2) {
        return getSharedType(o1.getClass(), o2.getClass());
    }
    
    /**
     * Get the nearest shared ancestor class of two classes. Note: this
     * currently does not compute the actual least common ancestor, but
     * only looks up one level in the inheritance tree and quits if
     * it does not find a match.
     * @@param type1 the first type
     * @@param type2 the second type
     * @@return the nearest class instance which is equal to or a
     * superclass of the two class instances
     */
    public static Class getSharedType(Class type1, Class type2) {
        if ( type1 == type2 ) {
            return type1;
        } else if ( type1.isAssignableFrom(type2) ) {
            return type1;
        } else if ( type2.isAssignableFrom(type1) ) {
            return type2;
        } else {
            return null;
        }
    }
    
    /**
     * Indicates if an object is an instance of a wrapper class for a given
     * primitive type.
     * @@param type the primitive Class type
     * @@param instance the object to test as wrapper (e.g., as Integer is a
     * wrapper type for int)
     * @@return true if the object is a wrapper instance of the given
     * primitive type
     */
    public static boolean isWrapperInstance(Class type, Object instance) {
        if ( !type.isPrimitive() )
            throw new IllegalArgumentException("Input type must be a primitive");
        
        if ( int.class == type && instance instanceof Integer ) {
            return true;
        } else if ( long.class == type && instance instanceof Long ) {
            return true;
        } else if ( float.class == type && instance instanceof Float ) {
            return true;
        } else if ( double.class == type && instance instanceof Double ) {
            return true;
        } else if ( boolean.class == type && instance instanceof Boolean ) {
            return true;
        } else if ( short.class == type && instance instanceof Short ) {
            return true;
        } else if ( byte.class == type && instance instanceof Byte ) {
            return true;
        } else if ( char.class == type && instance instanceof Character ) {
            return true;
        } else {
            return false;
        }
    }
    
    /**
     * Given a numeric (byte, short, int, long, float, or double) class type or
     * associated wrapper class type, return the primitive class type
     * @@param type the type to look up, must be a numerical type, but can be
     * either primitive or a wrapper.
     * @@return the primitive class type
     */
    public static Class getPrimitiveType(Class type) {
        if ( Integer.class.equals(type) || type == int.class ) {
            return int.class;
        } else if ( Long.class.equals(type) || type == long.class ) {
            return long.class;
        } else if ( Float.class.equals(type) || type == float.class ) {
            return float.class;
        } else if ( Double.class.equals(type) || type == double.class ) {
            return double.class;
        } else if ( Byte.class.equals(type) || type == byte.class ) {
            return byte.class;
        } else if ( Short.class.equals(type) || type == short.class ) {
            return short.class;
        } else {
            throw new IllegalArgumentException(
                "Input class must be a numeric type");
        }
    }
    
    /**
     * Get the wrapper class type for a primitive class type.
     * @@param type a class type
     * @@return the wrapper class for the input type if it is a
     * primitive class type, otherwise returns the input type
     */
    public static Class getWrapperType(Class type) {
        if ( !type.isPrimitive() ) {
            return type;
        } else if ( int.class == type ) {
            return Integer.class;
        } else if ( long.class == type ) {
            return Long.class;
        } else if ( float.class == type ) {
            return Float.class;
        } else if ( double.class == type ) {
            return Double.class;
        } else if ( boolean.class == type ) {
            return Boolean.class;
        } else if ( short.class == type ) {
            return Short.class;
        } else if ( char.class == type ) {
            return Character.class;
        } else if ( byte.class == type ) {
            return Byte.class;
        } else if ( short.class == type ) {
            return Short.class;
        } else {
            throw new IllegalArgumentException();
        }
    }
    
    /**
     * Indicates if a given class type is a primitive integer type
     * (one of byte, short, int, or long).
     * @@param type the type to check
     * @@return true if it is a primitive numeric type, false otherwise
     */
    public static boolean isIntegerType(Class type) {
        return ( type == byte.class || type == short.class ||
                 type == int.class  || type == long.class);
    }
    
    /**
     * Indicates if a given class type is a primitive numeric one type
     * (one of byte, short, int, long, float, or double).
     * @@param type the type to check
     * @@return true if it is a primitive numeric type, false otherwise
     */
    public static boolean isNumericType(Class type) {
        return ( type == byte.class   || type == short.class ||
                 type == int.class    || type == long.class  || 
                 type == double.class || type == float.class );
    }
    
    /**
     * Get a compatible numeric type for two primitive numeric
     * class types. Any of (byte, short, int) will resolve to int.
     * @@param c1 a numeric primitive class type (int, long, float, or double)
     * @@param c2 a numeric primitive class type (int, long, float, or double)
     * @@return the compatible numeric type for binary operations involving
     * both types.
     */
    public static Class getNumericType(Class c1, Class c2) {
        if ( !isNumericType(c1) || !isNumericType(c2) ) {
            throw new IllegalArgumentException(
                "Input types must be primitive number types");
        }
        if ( c1 == double.class || c2 == double.class ) {
            return double.class;
        } else if ( c1 == float.class || c1 == float.class ) {
            return float.class;
        } else if ( c1 == long.class || c2 == long.class ) {
            return long.class;
        } else {
            return int.class;
        }
    }
    
} // end of class TypeLib
@


2.2.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d5 1
a5 1
 *
d13 1
a13 1

d15 1
a15 1

d25 1
a25 1
    public static boolean typeCheck(Class<?> type, Object instance) {
d29 1
a29 1

d40 1
a40 1
    public static Class<?> getSharedType(Object o1, Object o2) {
d43 1
a43 1

d54 1
a54 1
    public static Class<?> getSharedType(Class<?> type1, Class<?> type2) {
d65 1
a65 1

d75 4
a78 5
    public static boolean isWrapperInstance(Class<?> type, Object instance) {
        if ( !type.isPrimitive() ) {
			throw new IllegalArgumentException("Input type must be a primitive");
		}

d99 1
a99 1

d107 1
a107 1
    public static Class<?> getPrimitiveType(Class<?> type) {
d125 1
a125 1

d132 1
a132 1
    public static Class<?> getWrapperType(Class<?> type) {
d157 1
a157 1

d164 3
a166 3
    public static boolean isIntegerType(Class<?> type) {
        return type == byte.class || type == short.class ||
                 type == int.class  || type == long.class;
d168 1
a168 1

d175 4
a178 4
    public static boolean isNumericType(Class<?> type) {
        return type == byte.class   || type == short.class ||
                 type == int.class    || type == long.class  ||
                 type == double.class || type == float.class;
d180 1
a180 1

d189 1
a189 1
    public static Class<?> getNumericType(Class<?> c1, Class<?> c2) {
d204 1
a204 1

@


2.1
log
@Added byte type to TypeLib
@
text
@d101 2
a102 2
     * Given a numeric (int, long, float, or double) class type or associated
     * wrapper class type, return the primitive class type
d108 1
a108 3
        if ( Byte.class.equals(type) || type == byte.class ) {
            return byte.class;
        } else if ( Integer.class.equals(type) || type == int.class ) {
d116 4
d151 2
d159 11
d171 1
a171 1
     * (one of int, long, float, or double).
d176 2
a177 2
        return ( type == byte.class   || type == int.class || 
                 type == long.class   || 
d183 1
a183 1
     * class types.
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d108 3
a110 1
        if ( Integer.class.equals(type) || type == int.class ) {
d161 2
a162 1
        return ( type == int.class || type == long.class || 
@


1.1
log
@file TypeLib.java was initially added on branch beta.
@
text
@d1 187
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 120
package prefuse.util;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class TypeLib {

    private TypeLib() {
        // prevent instantiation
    }
    
    // ------------------------------------------------------------------------
    
    public static boolean typeCheck(Class type, Object instance) {
        return type.isAssignableFrom(instance.getClass()) ||
            isWrapperInstance(type, instance);
    }
    
    public static Class getSharedType(Object o1, Object o2) {
        return getLeastCommonAncestor(o1.getClass(), o2.getClass());
    }
    
    public static Class getLeastCommonAncestor(Class type1, Class type2) {
        if ( type1 == type2 ) {
            return type1;
        } else if ( type1.isAssignableFrom(type2) ) {
            return type1;
        } else if ( type2.isAssignableFrom(type1) ) {
            return type2;
        } else {
            return null;
        }
    }
    
    public static boolean isWrapperInstance(Class type, Object instance) {
        if ( !type.isPrimitive() )
            throw new IllegalArgumentException("Input type must be a primitive");
        
        if ( int.class == type && instance instanceof Integer ) {
            return true;
        } else if ( long.class == type && instance instanceof Long ) {
            return true;
        } else if ( float.class == type && instance instanceof Float ) {
            return true;
        } else if ( double.class == type && instance instanceof Double ) {
            return true;
        } else if ( boolean.class == type && instance instanceof Boolean ) {
            return true;
        } else if ( short.class == type && instance instanceof Short ) {
            return true;
        } else if ( byte.class == type && instance instanceof Byte ) {
            return true;
        } else if ( char.class == type && instance instanceof Character ) {
            return true;
        } else {
            return false;
        }
    }
    
    public static Class getPrimitiveType(Class type) {
        if ( Integer.class.equals(type) || type == int.class ) {
            return int.class;
        } else if ( Long.class.equals(type) || type == long.class ) {
            return long.class;
        } else if ( Float.class.equals(type) || type == float.class ) {
            return float.class;
        } else if ( Double.class.equals(type) || type == double.class ) {
            return double.class;
        } else {
            throw new IllegalArgumentException(
                "Input class must be a numeric type");
        }
    }
    
    public static Class getWrapperType(Class type) {
        if ( !type.isPrimitive() ) {
            return type;
        } else if ( int.class == type ) {
            return Integer.class;
        } else if ( long.class == type ) {
            return Long.class;
        } else if ( float.class == type ) {
            return Float.class;
        } else if ( double.class == type ) {
            return Double.class;
        } else if ( boolean.class == type ) {
            return Boolean.class;
        } else if ( short.class == type ) {
            return Short.class;
        } else if ( char.class == type ) {
            return Character.class;
        } else if ( byte.class == type ) {
            return Byte.class;
        } else {
            throw new IllegalArgumentException();
        }
    }
    
    public static boolean isNumericType(Class type) {
        return ( type == int.class || type == long.class || 
                 type == double.class || type == float.class );
    }
    
    public static Class getNumericType(Class c1, Class c2) {
        if ( !isNumericType(c1) || !isNumericType(c2) ) {
            throw new IllegalArgumentException(
                "Input types must be primitive number types");
        }
        if ( c1 == double.class || c2 == double.class ) {
            return double.class;
        } else if ( c1 == float.class || c1 == float.class ) {
            return float.class;
        } else if ( c1 == long.class || c2 == long.class ) {
            return long.class;
        } else {
            return int.class;
        }
    }
    
} // end of class TypeLib
@


1.1.2.2
log
@Much more javadoc
@
text
@d4 1
a4 3
 * Library routines dealing with Java Class types.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a13 9
    /**
     * Check if an object is an instance of a given class, or, if the class
     * is a primitive type, if the Object is an instance of the wrapper class
     * for that primitive (e.g., as Integer is a wrapper for int).
     * @@param type the Class type
     * @@param the Object instance
     * @@return true if the object is an instance of the given class, or if
     * of the appropriate primitive wrapper type.
     */
a18 10
    /**
     * Get the nearest shared ancestor class of two objects. Note: this
     * currently does not compute the actual least common ancestor, but
     * only looks up one level in the inheritance tree and quits if
     * it does not find a match.
     * @@param o1 the first object
     * @@param o2 the second object
     * @@return the nearest class instance of which both objects
     * are instances
     */
d20 1
a20 1
        return getSharedType(o1.getClass(), o2.getClass());
d23 1
a23 11
    /**
     * Get the nearest shared ancestor class of two classes. Note: this
     * currently does not compute the actual least common ancestor, but
     * only looks up one level in the inheritance tree and quits if
     * it does not find a match.
     * @@param o1 the first type
     * @@param o2 the second type
     * @@return the nearest class instance which is equal to or a
     * superclass of the two class instances
     */
    public static Class getSharedType(Class type1, Class type2) {
a34 9
    /**
     * Indicates if an object is an instance of a wrapper class for a given
     * primitive type.
     * @@param type the primitive Class type
     * @@param instance the object to test as wrapper (e.g., as Integer is a
     * wrapper type for int)
     * @@return true if the object is a wrapper instance of the given
     * primitive type
     */
a59 7
    /**
     * Given a numeric (int, long, float, or double) class type or associated
     * wrapper class type, return the primitive class type
     * @@param type the type to look up, must be a numerical type, but can be
     * either primitive or a wrapper.
     * @@return the primitive class type
     */
a74 6
    /**
     * Get the wrapper class type for a primitive class type.
     * @@param type a class type
     * @@return the wrapper class for the input type if it is a
     * primitive class type, otherwise returns the input type
     */
a98 6
    /**
     * Indicates if a given class type is a primitive numeric one type
     * (one of int, long, float, or double).
     * @@param type the type to check
     * @@return true if it is a primitive numeric type, false otherwise
     */
a103 8
    /**
     * Get a compatible numeric type for two primitive numeric
     * class types.
     * @@param c1 a numeric primitive class type (int, long, float, or double)
     * @@param c2 a numeric primitive class type (int, long, float, or double)
     * @@return the compatible numeric type for binary operations involving
     * both types.
     */
@


1.1.2.3
log
@Javadoc'd.
@
text
@d21 1
a21 1
     * @@param instance the Object instance
d49 2
a50 2
     * @@param type1 the first type
     * @@param type2 the second type
@


