head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.20;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.42;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util.io;

import java.net.Authenticator;
import java.net.PasswordAuthentication;

/**
 * A basic username/password authenticator for use with HTTP-Auth.
 * The username or password can be reset for subsequent use as a different
 * user or on a different website.
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class PasswordAuthenticator extends Authenticator {

    private String m_username;
    private String m_password;
    private PasswordAuthentication m_auth;
    
    /**
     * Create a new password authenticator.
     * @@param username the user name
     * @@param password the password
     */
    PasswordAuthenticator(String username, String password) {
        this.m_password = password;
        this.m_username = username;
    }
    
    /**
     * Get the password.
     * @@return the password
     */
    String getPassword() {
        return m_password;
    }

    /**
     * Set the password.
     * @@return the password to use
     */
    void setPassword(String password) {
        this.m_password = password;
        this.m_auth = null;
    }

    /**
     * Get the user name.
     * @@return the user name
     */
    String getUsername() {
        return m_username;
    }
    
    /**
     * Set the user name.
     * @@return the user name to use
     */
    void setUsername(String username) {
        this.m_username = username;
        this.m_auth = null;
    }

    /**
     * Get the singleton PasswordAuthentication instance.
     * @@return the PasswordAuthentication instance
     */
    protected PasswordAuthentication getPasswordAuthentication() {
        if ( m_auth == null ) {
            m_auth = new PasswordAuthentication(
                        m_username, m_password.toCharArray());
        }
        return m_auth;
    }

    // ------------------------------------------------------------------------
    
    /**
     * Creates a new PasswordAuthenticator for the given name and password and
     * sets it as the default Authenticator for use within Java networking.
     */
    public static void setAuthentication(String username, String password) {
        Authenticator.setDefault(new PasswordAuthenticator(username,password));
    }
    
} // end of class PasswordAuthenticator
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d17 1
a17 1

d27 1
a27 1

d52 1
a52 1

d66 1
a66 2
    @@Override
	protected PasswordAuthentication getPasswordAuthentication() {
d75 1
a75 1

d83 1
a83 1

@


1.1
log
@file PasswordAuthenticator.java was initially added on branch beta.
@
text
@d1 84
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 59
package prefuse.util.io;

import java.net.Authenticator;
import java.net.PasswordAuthentication;

/**
 * A basic username/password authenticator for use with HTTP-Auth.
 * The username or password can be reset for subsequent use as a different
 * user or on a different website.
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class PasswordAuthenticator extends Authenticator {

    private String m_username;
    private String m_password;
    private PasswordAuthentication m_auth;
    
    PasswordAuthenticator(String username, String password) {
        this.m_password = password;
        this.m_username = username;
    }
    
    String getPassword() {
        return m_password;
    }

    void setPassword(String password) {
        this.m_password = password;
        this.m_auth = null;
    }

    String getUsername() {
        return m_username;
    }
    
    void setUsername(String username) {
        this.m_username = username;
        this.m_auth = null;
    }

    protected PasswordAuthentication getPasswordAuthentication() {
        if ( m_auth == null ) {
            m_auth = new PasswordAuthentication(
                        m_username, m_password.toCharArray());
        }
        return m_auth;
    }

    // ------------------------------------------------------------------------
    
    /**
     * This static utility method creates a new PasswordAuthenticator for the
     * given name and password and sets it as the default Authenticator.
     */
    public static void setAuthentication(String username, String password) {
        Authenticator.setDefault(new PasswordAuthenticator(username,password));
    }
    
} // end of class PasswordAuthenticator
@


1.1.2.2
log
@Lots of javadoc
@
text
@d10 1
a10 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a17 5
    /**
     * Create a new password authenticator.
     * @@param username the user name
     * @@param password the password
     */
a22 4
    /**
     * Get the password.
     * @@return the password
     */
a26 4
    /**
     * Set the password.
     * @@return the password to use
     */
a31 4
    /**
     * Get the user name.
     * @@return the user name
     */
a35 4
    /**
     * Set the user name.
     * @@return the user name to use
     */
a40 4
    /**
     * Get the singleton PasswordAuthentication instance.
     * @@return the PasswordAuthentication instance
     */
d52 2
a53 2
     * Creates a new PasswordAuthenticator for the given name and password and
     * sets it as the default Authenticator for use within Java networking.
@


