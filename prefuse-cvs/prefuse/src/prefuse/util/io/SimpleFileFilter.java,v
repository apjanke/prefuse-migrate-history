head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.20;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.02.02.19.01.53;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.02.07.00.42.53;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.42;	author jogiles;	state Exp;
branches;
next	2.0.4.2;

2.0.4.2
date	2008.03.10.10.51.41;	author amarsden;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.util.io;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.filechooser.FileFilter;

/**
 * A simple file filter for a particular file extension.
 *  
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class SimpleFileFilter extends FileFilter {
    
    private ArrayList exts = new ArrayList();
    private String desc;
    private Object data;
    
    /**
     * Create a new SimpleFileFilter.
     * @@param ext the file extension
     * @@param desc a description of the file type
     */
    public SimpleFileFilter(String ext, String desc) {
        addExtension(ext);
        this.desc = desc;
    }
    
    /**
     * Create a new SimpleFileFilter.
     * @@param ext the file extension
     * @@param desc a description of the file type
     * @@param data user-provided attached object
     */
    public SimpleFileFilter(String ext, String desc, Object data) {
        addExtension(ext);
        this.desc = desc;
        this.data = data;
    }
    
    /**
     * Add a file extension to this file filter.
     * @@param ext the file extension to add
     */
    public void addExtension(String ext) {
        exts.add(ext.toLowerCase());
    }
    
    /**
     * @@see javax.swing.filechooser.FileFilter#accept(java.io.File)
     */
    public boolean accept(File f) {
        if ( f == null )
            return false;
        if ( f.isDirectory() )
            return true;
        String extension = IOLib.getExtension(f);
        if ( extension == null ) return false;

        for ( Iterator iter = exts.iterator(); iter.hasNext(); ) {
            String ext = (String)iter.next();
            if ( ext.equalsIgnoreCase(extension) )
                return true;
        }
        return false;
    }
    
    /**
     * Get a user-provided attached object.
     * @@return the user-provided attached object
     */
    public Object getUserData() {
        return data;
    }
    
    /**
     * @@see javax.swing.filechooser.FileFilter#getDescription()
     */
    public String getDescription() {
        return desc;
    }
    
    /**
     * Get the first file extension associated with this filter.
     * @@return the first file extension associated with this filter
     */
    public String getExtension() {
        return (String)exts.get(0);
    }
    
} // end of class SimpleFileFilter
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@a5 1
import java.util.List;
d11 1
a11 1
 *
d15 3
a17 3

    private final List exts = new ArrayList();
    private final String desc;
d19 1
a19 1

d29 1
a29 1

d41 1
a41 1

d49 1
a49 1

d53 5
a57 8
    @@Override
	public boolean accept(File f) {
        if ( f == null ) {
			return false;
		}
        if ( f.isDirectory() ) {
			return true;
		}
d59 1
a59 3
        if ( extension == null ) {
			return false;
		}
d63 2
a64 3
            if ( ext.equalsIgnoreCase(extension) ) {
				return true;
			}
d68 1
a68 1

d76 1
a76 1

d80 1
a80 2
    @@Override
	public String getDescription() {
d83 1
a83 1

d91 1
a91 1

@


2.0.4.2
log
@Java 1.5 changes
@
text
@d5 1
d17 1
a17 1
    private final List<String> exts = new ArrayList<String>();
d67 2
a68 1
        for(String ext : exts) {
d97 1
a97 1
        return exts.get(0);
@


1.1
log
@file SimpleFileFilter.java was initially added on branch beta.
@
text
@d1 92
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 38
package prefuse.util.io;

import java.io.File;

import javax.swing.filechooser.FileFilter;

/**
 * SimpleFileFilter
 *  
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class SimpleFileFilter extends FileFilter {
    private String ext, desc;
    
    public SimpleFileFilter(String ext, String desc) {
        this.ext = ext;
        this.desc = desc;
    } //
    
    public boolean accept(File f) {
        if ( f == null )
            return false;
        if ( f.isDirectory() )
            return true;
        String extension = IOLib.getExtension(f);
        return ( extension != null && extension.equals(ext) );
    } //
    
    public String getDescription() {
        return desc;
    } //
    
    public String getExtension() {
        return ext;
    } //
    
} // end of class SimpleFileFilter
@


1.1.2.2
log
@Lots of javadoc
@
text
@d8 1
a8 1
 * A simple file filter for a particular file extension.
d10 1
a15 5
    /**
     * Create a new SimpleFileFilter.
     * @@param ext the file extension
     * @@param desc a description of the file type
     */
d19 1
a19 1
    }
a20 3
    /**
     * @@see javax.swing.filechooser.FileFilter#accept(java.io.File)
     */
d28 1
a28 1
    }
a29 3
    /**
     * @@see javax.swing.filechooser.FileFilter#getDescription()
     */
d32 1
a32 1
    }
a33 4
    /**
     * Get the file extension.
     * @@return the file extension
     */
d36 1
a36 1
    }
@


1.1.2.3
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@d10 1
a10 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
@


1.1.2.4
log
@Intermediate commit in run-up to release.
Upgraded Tuple, Node, and Edge to the data package.
Renamed "Function" classes to "Action" classes.
Added Shape to VisualItem Schema.
Added ShapeActions, moved Shape constants to Constants interface.
Added Background image handling to the Display class.
Added social network data file.
@
text
@a3 2
import java.util.ArrayList;
import java.util.Iterator;
d13 1
a13 4
    
    private ArrayList exts = new ArrayList();
    private String desc;
    private Object data;
d21 1
a21 12
        addExtension(ext);
        this.desc = desc;
    }
    
    /**
     * Create a new SimpleFileFilter.
     * @@param ext the file extension
     * @@param desc a description of the file type
     * @@param data user-provided attached object
     */
    public SimpleFileFilter(String ext, String desc, Object data) {
        addExtension(ext);
a22 9
        this.data = data;
    }
    
    /**
     * Add a file extension to this file filter.
     * @@param ext the file extension to add
     */
    public void addExtension(String ext) {
        exts.add(ext.toLowerCase());
d34 1
a34 16
        if ( extension == null ) return false;

        for ( Iterator iter = exts.iterator(); iter.hasNext(); ) {
            String ext = (String)iter.next();
            if ( ext.equalsIgnoreCase(extension) )
                return true;
        }
        return false;
    }
    
    /**
     * Get a user-provided attached object.
     * @@return the user-provided attached object
     */
    public Object getUserData() {
        return data;
d45 2
a46 2
     * Get the first file extension associated with this filter.
     * @@return the first file extension associated with this filter
d49 1
a49 1
        return (String)exts.get(0);
@


