head	2.1;
access;
symbols
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.1
date	2006.02.13.07.37.15;	author jheer;	state dead;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.46;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.20;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.23.07.20;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;


desc
@@


2.1
log
@Renamed Schema.getColumnClass to Schema.getColumnType
Added GraphWriter interface
Added GraphMLWriter class
Added TreeMLWriter class
@
text
@package prefuse.util.io;

/**
 * Utility methods for working with XML.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class XMLLib {
    
    // unicode ranges and valid/invalid characters
    private static final char   LOWER_RANGE = 0x20;
    private static final char   UPPER_RANGE = 0x7f;
    private static final char[] VALID_CHARS = { 0x9, 0xA, 0xD };
    
    private static final char[] INVALID = { '<', '>', '"', '\'', '&' };
    private static final String[] VALID = 
        { "&lt;", "&gt;", "&quot;", "&apos;", "&amp;" };
    
    /**
     * Escape a string such that it is safe to use in an XML document.
     * @@param str the string to escape
     * @@return the escaped string
     */
    public static String EscapeString(String str) {
        StringBuffer sbuf = new StringBuffer();
        EscapeString(str, sbuf);
        return sbuf.toString();
    }
    
    /**
     * Escape a string such that it is safe to use in an XML document.
     * @@param str the string to escape
     * @@param sbuf a StringBuffer in which to append the escaped string
     * @@return the escaped string
     */
    public static void EscapeString(String str, StringBuffer sbuf) {
        if ( sbuf == null ) {
            throw new IllegalArgumentException(
            "Input StringBuffer must be non-null.");
        }
        if ( str == null ) {
            sbuf.append("null");
            return;
        }
        
        int len = str.length();
        sbuf.ensureCapacity(sbuf.length() + (2*len));
        
        char buf[] = str.toCharArray();
        for (int i = 0; i < len; ++i) {
            char c = buf[i];
            
            if ( (c < LOWER_RANGE     && c != VALID_CHARS[0] && 
                  c != VALID_CHARS[1] && c != VALID_CHARS[2]) 
                 || (c > UPPER_RANGE) )
            {
                // character out of range, escape with character value
                sbuf.append("&#");
                sbuf.append(Integer.toString(c));
                sbuf.append(';');
            } else {
                boolean valid = true;
                // check for invalid characters (e.g., "<", "&", etc)
                for (int j=INVALID.length-1; j >= 0; --j )
                {
                    if ( INVALID[j] == c) {
                        valid = false;
                        sbuf.append(VALID[j]);
                        break;
                    }
                }
                // if character is valid, don't escape
                if (valid) {
                    sbuf.append(c);
                }
            }
        }
    }
    
} // end of class XMLLib
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@@


1.1
log
@file XMLLib.java was initially added on branch beta.
@
text
@d1 80
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 70
package prefuse.util.io;

/**
 * Utility methods for working with XML.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> - prefuse(AT)jheer.org
 */
public class XMLLib {
	
    // unicode ranges and valid/invalid characters
    private static final char   LOWER_RANGE = 0x20;
    private static final char   UPPER_RANGE = 0x7f;
    private static final char[] VALID_CHARS = { 0x9, 0xA, 0xD };
    
    private static final char[] INVALID = { '<', '>', '"', '\'', '&' };
    private static final String[] VALID = 
        { "&lt;", "&gt;", "&quot;", "&apos;", "&amp;" };
    
    public static String EscapeString(String str) {
	    StringBuffer sbuf = new StringBuffer();
		EscapeString(str, sbuf);
		return sbuf.toString();
	} //
	
	public static void EscapeString(String str, StringBuffer sbuf) {
	    if ( sbuf == null ) {
		    throw new IllegalArgumentException(
			"Input StringBuffer must be non-null.");
	    }
        if ( str == null ) {
            sbuf.append("null");
            return;
        }
        
        int len = str.length();
        sbuf.ensureCapacity(sbuf.length() + (2*len));
        
        char buf[] = str.toCharArray();
        for (int i = 0; i < len; ++i) {
            char c = buf[i];
            
            if ( (c < LOWER_RANGE     && c != VALID_CHARS[0] && 
                  c != VALID_CHARS[1] && c != VALID_CHARS[2]) 
                 || (c > UPPER_RANGE) )
            {
                // character out of range, escape with character value
                sbuf.append("&#");
                sbuf.append(Integer.toString(c));
                sbuf.append(';');
            } else {
                boolean valid = true;
                // check for invalid characters (e.g., "<", "&", etc)
                for (int j=INVALID.length-1; j >= 0; --j )
                {
                    if ( INVALID[j] == c) {
                        valid = false;
                        sbuf.append(VALID[j]);
                        break;
                    }
                }
                // if character is valid, don't escape
                if (valid) {
                    sbuf.append(c);
                }
            }
        }
	} //
	
} // end of class XMLLib@


1.1.2.2
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d10 1
a10 1
    
d21 10
a30 10
        StringBuffer sbuf = new StringBuffer();
        EscapeString(str, sbuf);
        return sbuf.toString();
    } //
    
    public static void EscapeString(String str, StringBuffer sbuf) {
        if ( sbuf == null ) {
            throw new IllegalArgumentException(
            "Input StringBuffer must be non-null.");
        }
d68 3
a70 3
    } //
    
} // end of class XMLLib
@


1.1.2.3
log
@Lots of javadoc
@
text
@d6 2
a7 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a19 5
    /**
     * Escape a string such that it is safe to use in an XML document.
     * @@param str the string to escape
     * @@return the escaped string
     */
d24 1
a24 1
    }
a25 6
    /**
     * Escape a string such that it is safe to use in an XML document.
     * @@param str the string to escape
     * @@param sbuf a StringBuffer in which to append the escaped string
     * @@return the escaped string
     */
d68 1
a68 1
    }
@


