head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.32;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.32;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.40;	author jogiles;	state Exp;
branches;
next	2.0.4.2;

2.0.4.2
date	2008.02.28.00.40.29;	author amarsden;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.controls;

import java.awt.Cursor;
import java.awt.Point;
import java.awt.event.MouseEvent;

import javax.swing.SwingUtilities;

import prefuse.Display;
import prefuse.activity.Activity;
import prefuse.activity.SlowInSlowOutPacer;


/**
 * <p>Allows users to pan over a display such that the display zooms in and
 * out proportionally to how fast the pan is performed.</p>
 * 
 * <p>The algorithm used is that of Takeo Igarishi and Ken Hinckley in their
 * research paper
 * <a href="http://citeseer.ist.psu.edu/igarashi00speeddependent.html">
 * Speed-dependent Automatic Zooming for Browsing Large Documents</a>,
 * UIST 2000.</p>
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class ZoomingPanControl extends ControlAdapter {

    private boolean repaint = true, started = false;
    
    private Point mouseDown, mouseCur, mouseUp;
    private int dx, dy;
    private double d = 0;
    
    private double v0 = 75.0, d0 = 50, d1 = 400, s0 = .1;
    
    private UpdateActivity update = new UpdateActivity();
    private FinishActivity finish = new FinishActivity();
    
    /**
     * Create a new ZoomingPanControl.
     */
    public ZoomingPanControl() {
        this(true);
    }
    
    /**
     * Create a new ZoomingPanControl.
     * @@param repaint true if repaint requests should be issued while
     * panning and zooming. false if repaint requests will come from
     * elsewhere (e.g., a continuously running action).
     */
    public ZoomingPanControl(boolean repaint) {
        this.repaint = repaint;
    }
    
    /**
     * @@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
     */
    public void mousePressed(MouseEvent e) {
        if ( SwingUtilities.isLeftMouseButton(e) ) {
            Display display = (Display)e.getComponent();
            display.setCursor(
                    Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
            mouseDown = e.getPoint();
        }        
    }
    
    /**
     * @@see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)
     */
    public void mouseDragged(MouseEvent e) {
        if ( SwingUtilities.isLeftMouseButton(e) ) {
            mouseCur = e.getPoint();
            dx = mouseCur.x - mouseDown.x;
            dy = mouseCur.y - mouseDown.y;
            d  = Math.sqrt(dx*dx + dy*dy);
            
            if ( !started ) {
                Display display = (Display)e.getComponent();
                update.setDisplay(display);
                update.run();
            }
        }
    }
    
    /**
     * @@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
     */
    public void mouseReleased(MouseEvent e) {
        if ( SwingUtilities.isLeftMouseButton(e) ) {
            update.cancel();
            started = false;
            
            Display display = (Display)e.getComponent();
            mouseUp = e.getPoint();
            
            finish.setDisplay(display);
            finish.run();
            
            display.setCursor(Cursor.getDefaultCursor());
        }
    }
    
    private class UpdateActivity extends Activity {
        private Display display;
        private long lastTime = 0;
        public UpdateActivity() {
            super(-1,15,0);
        }
        public void setDisplay(Display display) {
            this.display = display;
        }
        protected void run(long elapsedTime) {
            double sx = display.getTransform().getScaleX();
            double s, v;
            
            if ( d <= d0 ) {
                s = 1.0;
                v = v0*(d/d0);
            } else {
                s = ( d >= d1 ? s0 : Math.pow(s0, (d-d0)/(d1-d0)) );
                v = v0;
            }
            
            s = s/sx;
            
            double dd = (v*(elapsedTime-lastTime))/1000;
            lastTime = elapsedTime;
            double deltaX = -dd*dx/d;
            double deltaY = -dd*dy/d;
            
            display.pan(deltaX,deltaY);
            if (s != 1.0)
                display.zoom(mouseCur, s);
            
            if ( repaint )
                display.repaint();
        }
    } // end of class UpdateActivity
    
    private class FinishActivity extends Activity {
        private Display display;
        private double scale;
        public FinishActivity() {
            super(1500,15,0);
            setPacingFunction(new SlowInSlowOutPacer());
        }
        public void setDisplay(Display display) {
            this.display = display;
            this.scale = display.getTransform().getScaleX();
            double z = (scale<1.0 ? 1/scale : scale);
            setDuration((long)(500+500*Math.log(1+z)));
        }
        protected void run(long elapsedTime) {
            double f = getPace(elapsedTime);
            double s = display.getTransform().getScaleX();
            double z = (f + (1-f)*scale)/s;
            display.zoom(mouseUp,z);
            if ( repaint )
                display.repaint();
        }
    } // end of class FinishActivity
    
} // end of class ZoomingPanControl
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d17 1
a17 1
 *
d29 1
a29 1

d33 6
a38 6

    private final double v0 = 75.0, d0 = 50, d1 = 400, s0 = .1;

    private final UpdateActivity update = new UpdateActivity();
    private final FinishActivity finish = new FinishActivity();

d45 1
a45 1

d55 1
a55 1

d59 1
a59 2
    @@Override
	public void mousePressed(MouseEvent e) {
d65 1
a65 1
        }
d67 1
a67 1

d71 1
a71 2
    @@Override
	public void mouseDragged(MouseEvent e) {
d77 1
a77 1

d85 1
a85 1

d89 1
a89 2
    @@Override
	public void mouseReleased(MouseEvent e) {
d93 1
a93 1

d96 1
a96 1

d99 1
a99 1

d103 1
a103 1

d113 1
a113 2
        @@Override
		protected void run(long elapsedTime) {
d116 1
a116 1

d119 1
a119 1
                v = v0*d/d0;
d121 1
a121 1
                s = d >= d1 ? s0 : Math.pow(s0, (d-d0)/(d1-d0));
d124 1
a124 1

d126 2
a127 2

            double dd = v*(elapsedTime-lastTime)/1000;
d131 1
a131 1

d133 5
a137 7
            if (s != 1.0) {
				display.zoom(mouseCur, s);
			}

            if ( repaint ) {
				display.repaint();
			}
d140 1
a140 1

d151 1
a151 1
            double z = scale<1.0 ? 1/scale : scale;
d154 1
a154 2
        @@Override
		protected void run(long elapsedTime) {
d159 2
a160 3
            if ( repaint ) {
				display.repaint();
			}
d163 1
a163 1

@


2.0.4.2
log
@Allow the display to be zoomed in x/y dimensions separately (animation support too)
@
text
@d138 1
a138 1
				display.zoom(mouseCur, s, s);
d165 1
a165 1
            display.zoom(mouseUp, z, z);
@


1.1
log
@file ZoomingPanControl.java was initially added on branch beta.
@
text
@d1 164
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 147
package prefuse.controls;

import java.awt.Cursor;
import java.awt.Point;
import java.awt.event.MouseEvent;

import javax.swing.SwingUtilities;

import prefuse.Display;
import prefuse.activity.Activity;
import prefuse.activity.SlowInSlowOutPacer;


/**
 * <p>Allows users to pan over a display such that the display zooms in and
 * out proportionally to how fast the pan is performed.</p>
 * 
 * <p>This implementation uses the method described in Igarishi, T. and
 * Hinckley, K. "Speed-dependent Automatic Zooming for Browsing Large
 * Documents", UIST 2000. Available online at
 * <a href="http://citeseer.ist.psu.edu/igarashi00speeddependent.html">
 * http://citeseer.ist.psu.edu/igarashi00speeddependent.html</a>.</p>
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class ZoomingPanControl extends ControlAdapter {

    private boolean repaint = true, started = false;
    
    private Point mouseDown, mouseCur, mouseUp;
    private int dx, dy;
    private double d = 0;
    
    private double v0 = 75.0, d0 = 50, d1 = 400, s0 = .1;
    
    private UpdateActivity update = new UpdateActivity();
    private FinishActivity finish = new FinishActivity();
    
    public ZoomingPanControl() {
        this(true);
    } //
    
    public ZoomingPanControl(boolean repaint) {
        this.repaint = repaint;
    } //
    
    public void mousePressed(MouseEvent e) {
        if ( SwingUtilities.isLeftMouseButton(e) ) {
            Display display = (Display)e.getComponent();
            display.setCursor(
                    Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
            mouseDown = e.getPoint();
        }        
    } //
    
    public void mouseDragged(MouseEvent e) {
        if ( SwingUtilities.isLeftMouseButton(e) ) {
            mouseCur = e.getPoint();
            dx = mouseCur.x - mouseDown.x;
            dy = mouseCur.y - mouseDown.y;
            d  = Math.sqrt(dx*dx + dy*dy);
            
            if ( !started ) {
                Display display = (Display)e.getComponent();
                update.setDisplay(display);
                update.run();
            }
        }
    } //
    
    public void mouseReleased(MouseEvent e) {
        if ( SwingUtilities.isLeftMouseButton(e) ) {
            update.cancel();
            started = false;
            
            Display display = (Display)e.getComponent();
            mouseUp = e.getPoint();
            
            finish.setDisplay(display);
            finish.run();
            
            display.setCursor(Cursor.getDefaultCursor());
        }
    } //
    
    private class UpdateActivity extends Activity {
        private Display display;
        private long lastTime = 0;
        public UpdateActivity() {
            super(-1,15,0);
        } //
        public void setDisplay(Display display) {
            this.display = display;
        } //
        protected void run(long elapsedTime) {
            double sx = display.getTransform().getScaleX();
            double s, v;
            
            if ( d <= d0 ) {
                s = 1.0;
                v = v0*(d/d0);
            } else {
                s = ( d >= d1 ? s0 : Math.pow(s0, (d-d0)/(d1-d0)) );
                v = v0;
            }
            
            s = s/sx;
            
            double dd = (v*(elapsedTime-lastTime))/1000;
            lastTime = elapsedTime;
            double deltaX = -dd*dx/d;
            double deltaY = -dd*dy/d;
            
            display.pan(deltaX,deltaY);
            if (s != 1.0)
                display.zoom(mouseCur, s);
            
            if ( repaint )
                display.repaint();
        } //
    } //
    
    private class FinishActivity extends Activity {
        private Display display;
        private double scale;
        public FinishActivity() {
            super(1500,15,0);
            setPacingFunction(new SlowInSlowOutPacer());
        } //
        public void setDisplay(Display display) {
            this.display = display;
            this.scale = display.getTransform().getScaleX();
            double z = (scale<1.0 ? 1/scale : scale);
            setDuration((long)(500+500*Math.log(1+z)));
        } //
        protected void run(long elapsedTime) {
            double f = getPace(elapsedTime);
            double s = display.getTransform().getScaleX();
            double z = (f + (1-f)*scale)/s;
            display.zoom(mouseUp,z);
            if ( repaint )
                display.repaint();
        } //
    } //
    
} // end of class ZoomingPanControl
@


1.1.2.2
log
@Lots of javadoc
@
text
@d18 3
a20 2
 * <p>The algorithm used is that of Takeo Igarishi and Ken Hinckley in their
 * research paper
d22 1
a22 2
 * Speed-dependent Automatic Zooming for Browsing Large Documents</a>,
 * UIST 2000.</p>
d24 2
a25 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a39 3
    /**
     * Create a new ZoomingPanControl.
     */
d42 1
a42 1
    }
a43 6
    /**
     * Create a new ZoomingPanControl.
     * @@param repaint true if repaint requests should be issued while
     * panning and zooming. false if repaint requests will come from
     * elsewhere (e.g., a continuously running action).
     */
d46 1
a46 1
    }
a47 3
    /**
     * @@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
     */
d55 1
a55 1
    }
a56 3
    /**
     * @@see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)
     */
d70 1
a70 1
    }
a71 3
    /**
     * @@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
     */
d85 1
a85 1
    }
d92 1
a92 1
        }
d95 1
a95 1
        }
d121 2
a122 2
        }
    } // end of class UpdateActivity
d130 1
a130 1
        }
d136 1
a136 1
        }
d144 2
a145 2
        }
    } // end of class FinishActivity
@


