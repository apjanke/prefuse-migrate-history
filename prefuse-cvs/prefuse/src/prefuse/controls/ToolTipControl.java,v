head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.32;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.32;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.40;	author jogiles;	state Exp;
branches;
next	2.0.4.2;

2.0.4.2
date	2008.03.18.22.13.09;	author amarsden;	state Exp;
branches;
next	2.0.4.3;

2.0.4.3
date	2008.04.22.02.25.37;	author amarsden;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.controls;

import java.awt.event.MouseEvent;

import prefuse.Display;
import prefuse.visual.VisualItem;


/**
 * Control that enables a tooltip display for items based on mouse hover.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class ToolTipControl extends ControlAdapter {

    private String[] label;
    private StringBuffer sbuf;
    
    /**
     * Create a new ToolTipControl.
     * @@param field the field name to use for the tooltip text
     */
    public ToolTipControl(String field) {
        this(new String[] {field});
    }

    /**
     * Create a new ToolTipControl.
     * @@param fields the field names to use for the tooltip text. The
     * values of each field will be concatenated to form the tooltip.
     */
    public ToolTipControl(String[] fields) {
        label = fields;
        if ( fields.length > 1 )
            sbuf = new StringBuffer();
    }
    
    /**
     * @@see prefuse.controls.Control#itemEntered(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemEntered(VisualItem item, MouseEvent e) {
        Display d = (Display)e.getSource();
        if ( label.length == 1 ) {
            // optimize the simple case
            if ( item.canGetString(label[0]) )
                d.setToolTipText(item.getString(label[0]));
        } else {
            sbuf.delete(0, sbuf.length());
            for ( int i=0; i<label.length; ++i ) {
                if ( item.canGetString(label[i]) ) {
                    if ( sbuf.length() > 0 )
                        sbuf.append("; ");
                    sbuf.append(item.getString(label[i]));
                }
            }
            d.setToolTipText(sbuf.toString());
        }
    }
    
    /**
     * @@see prefuse.controls.Control#itemExited(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemExited(VisualItem item, MouseEvent e) {
        Display d = (Display)e.getSource();
        d.setToolTipText(null);
    }
    
} // end of class ToolTipControl
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d11 1
a11 1
 *
d16 1
a16 1
    private final String[] label;
d18 1
a18 1

d34 2
a35 3
        if ( fields.length > 1 ) {
			sbuf = new StringBuffer();
		}
d37 1
a37 1

d41 1
a41 2
    @@Override
	public void itemEntered(VisualItem<?> item, MouseEvent e) {
d45 2
a46 3
            if ( item.canGetString(label[0]) ) {
				d.setToolTipText(item.getString(label[0]));
			}
d51 2
a52 3
                    if ( sbuf.length() > 0 ) {
						sbuf.append("; ");
					}
d59 1
a59 1

d63 1
a63 2
    @@Override
	public void itemExited(VisualItem<?> item, MouseEvent e) {
d67 1
a67 1

@


2.0.4.2
log
@Don't show empty tool tips
@
text
@d48 1
a48 2
            	String str = item.getString(label[0]);
                d.setToolTipText(str == null || str.isEmpty() ? null : str);
d60 1
a60 1
            d.setToolTipText(sbuf.length() == 0 ? null : sbuf.toString());
@


2.0.4.3
log
@java 1.5 compatibility
@
text
@d49 1
a49 1
                d.setToolTipText(str == null || str.length() == 0 ? null : str);
@


1.1
log
@file ToolTipControl.java was initially added on branch beta.
@
text
@d1 68
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 66
package prefuse.controls;

import java.awt.event.MouseEvent;

import prefuse.Display;
import prefuse.visual.VisualItem;


/**
 * Enables tooltip display for items based on mouse hover.
 *  
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class ToolTipControl extends ControlAdapter {

    private String[] label;
    private StringBuffer sbuf;
    
    /**
     * Default constructor. Uses "label" as the attribute to use for
     * the tooltip text.
     */
    public ToolTipControl() {
        this("label");
    }
    
    /**
     * Constructor with specified label attribute.
     * @@param labelAttr the attribute name to use for the tooltip text
     */
    public ToolTipControl(String field) {
        this(new String[] {field});
    }
    
    public ToolTipControl(String[] fields) {
        label = fields;
        if ( fields.length > 1 )
            sbuf = new StringBuffer();
    }
    
    public void itemEntered(VisualItem item, MouseEvent e) {
        Display d = (Display)e.getSource();
        if ( label.length == 1 ) {
            // optimize the simple case
            if ( item.canGetString(label[0]) )
                d.setToolTipText(item.getString(label[0]));
        } else {
            sbuf.delete(0, sbuf.length());
            for ( int i=0; i<label.length; ++i ) {
                if ( item.canGetString(label[i]) ) {
                    if ( sbuf.length() > 0 )
                        sbuf.append("; ");
                    sbuf.append(item.getString(label[i]));
                }
            }
            d.setToolTipText(sbuf.toString());
        }
    } //
    
    public void itemExited(VisualItem item, MouseEvent e) {
        Display d = (Display)e.getSource();
        d.setToolTipText(null);
    } //
    
} // end of class ToolTipControl
@


1.1.2.2
log
@Lots of javadoc
@
text
@d10 4
a13 3
 * Control that enables a tooltip display for items based on mouse hover.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d21 10
a30 2
     * Create a new ToolTipControl.
     * @@param field the field name to use for the tooltip text
d35 1
a35 6

    /**
     * Create a new ToolTipControl.
     * @@param fields the field names to use for the tooltip text. The
     * values of each field will be concatenated to form the tooltip.
     */
a41 3
    /**
     * @@see prefuse.controls.Control#itemEntered(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d59 1
a59 1
    }
a60 3
    /**
     * @@see prefuse.controls.Control#itemExited(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d64 1
a64 1
    }
@


