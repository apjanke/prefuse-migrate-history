head	2.2;
access;
symbols
	java_1_5:2.2.0.4
	Root_java_1_5:2.2
	beta:2.2.0.2
	beta-20080113:2.2
	beta-20071021:2.2
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.2
date	2006.04.07.23.34.35;	author jheer;	state Exp;
branches
	2.2.4.1;
next	2.1;

2.1
date	2006.03.13.06.20.29;	author jheer;	state Exp;
branches;
next	2.0;

2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.13.32;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.32;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.19;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.2.4.1
date	2008.01.23.23.55.40;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.2
log
@Added filter to FocusControl
@
text
@package prefuse.controls;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.util.logging.Logger;

import prefuse.Display;
import prefuse.Visualization;
import prefuse.data.expression.Predicate;
import prefuse.data.tuple.TupleSet;
import prefuse.util.StringLib;
import prefuse.util.ui.UILib;
import prefuse.visual.VisualItem;


/**
 * <p>Updates the contents of a TupleSet of focus items in response to mouse
 * actions. For example, clicking a node or double-clicking a node could
 * update its focus status. This Control supports monitoring a specified
 * number of clicks to executing a focus change. By default a click pattern
 * will cause a VisualItem to become the sole member of the focus group.
 * Hold down the control key while clicking to add an item to a group
 * without removing the current members.</p>
 * 
 * <p>Updating a focus group does not necessarily cause
 * the display to change. For this functionality, either register an action
 * with this control, or register a TupleSetListener with the focus group.
 * </p>
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class FocusControl extends ControlAdapter {

    private String group = Visualization.FOCUS_ITEMS;
    protected String activity;
    protected VisualItem curFocus;
    protected int ccount;
    protected int button = Control.LEFT_MOUSE_BUTTON;
    protected Predicate filter = null;
    
    /**
     * Creates a new FocusControl that changes the focus to another item
     * when that item is clicked once.
     */
    public FocusControl() {
        this(1);
    }
    
    /**
     * Creates a new FocusControl that changes the focus to another item
     * when that item is clicked once.
     * @@param focusGroup the name of the focus group to use
     */
    public FocusControl(String focusGroup) {
        this(1);
        group = focusGroup;
    }
    
    /**
     * Creates a new FocusControl that changes the focus when an item is 
     * clicked the specified number of times. A click value of zero indicates
     * that the focus should be changed in response to mouse-over events.
     * @@param clicks the number of clicks needed to switch the focus.
     */
    public FocusControl(int clicks) {
        ccount = clicks;
    }
    
    /**
     * Creates a new FocusControl that changes the focus when an item is 
     * clicked the specified number of times. A click value of zero indicates
     * that the focus should be changed in response to mouse-over events.
     * @@param focusGroup the name of the focus group to use 
     * @@param clicks the number of clicks needed to switch the focus.
     */
    public FocusControl(String focusGroup, int clicks) {
        ccount = clicks;
        group = focusGroup;
    }
    
    /**
     * Creates a new FocusControl that changes the focus when an item is 
     * clicked the specified number of times. A click value of zero indicates
     * that the focus should be changed in response to mouse-over events.
     * @@param clicks the number of clicks needed to switch the focus.
     * @@param act an action run to upon focus change 
     */
    public FocusControl(int clicks, String act) {
        ccount = clicks;
        activity = act;
    }
    
    /**
     * Creates a new FocusControl that changes the focus when an item is 
     * clicked the specified number of times. A click value of zero indicates
     * that the focus should be changed in response to mouse-over events.
     * @@param focusGroup the name of the focus group to use
     * @@param clicks the number of clicks needed to switch the focus.
     * @@param act an action run to upon focus change 
     */
    public FocusControl(String focusGroup, int clicks, String act) {
        ccount = clicks;
        activity = act;
        this.group = focusGroup;
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * Set a filter for processing items by this focus control. Only items for
     * which the predicate returns true (or doesn't throw an exception) will
     * be considered by this control. A null value indicates that no filtering
     * should be applied. That is, all items will be considered.
     * @@param p the filtering predicate to apply
     */
    public void setFilter(Predicate p) {
        this.filter = p;
    }
    
    /**
     * Get the filter for processing items by this focus control. Only items
     * for which the predicate returns true (or doesn't throw an exception)
     * are considered by this control. A null value indicates that no
     * filtering is applied.
     * @@return the filtering predicate
     */
    public Predicate getFilter() {
        return filter;
    }
    
    /**
     * Perform a filtering check on the input item.
     * @@param item the item to check against the filter
     * @@return true if the item should be considered, false otherwise
     */
    protected boolean filterCheck(VisualItem item) {
        if ( filter == null )
            return true;
        
        try {
            return filter.getBoolean(item);
        } catch ( Exception e ) {
            Logger.getLogger(getClass().getName()).warning(
                e.getMessage() + "\n" + StringLib.getStackTrace(e));
            return false;
        }
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see prefuse.controls.Control#itemEntered(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemEntered(VisualItem item, MouseEvent e) {
        if ( !filterCheck(item) ) return;
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        if ( ccount == 0 ) {
            Visualization vis = item.getVisualization();
            TupleSet ts = vis.getFocusGroup(group);
            ts.setTuple(item);
            curFocus = item;
            runActivity(vis);
        }
    }
    
    /**
     * @@see prefuse.controls.Control#itemExited(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemExited(VisualItem item, MouseEvent e) {
        if ( !filterCheck(item) ) return;
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getDefaultCursor());
        if ( ccount == 0 ) {
            curFocus = null;
            Visualization vis = item.getVisualization();
            TupleSet ts = vis.getFocusGroup(group);
            ts.removeTuple(item);
            runActivity(vis);
        }
    }
    
    /**
     * @@see prefuse.controls.Control#itemClicked(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemClicked(VisualItem item, MouseEvent e) {
        if ( !filterCheck(item) ) return;
        if ( UILib.isButtonPressed(e, button) &&
             e.getClickCount() == ccount )
        {
            if ( item != curFocus ) {
                Visualization vis = item.getVisualization();
                TupleSet ts = vis.getFocusGroup(group);
                    
                boolean ctrl = e.isControlDown();
                if ( !ctrl ) {
                    curFocus = item;
                    ts.setTuple(item);
                } else if ( ts.containsTuple(item) ) {
                    ts.removeTuple(item);
                } else {
                    ts.addTuple(item);
                }
                runActivity(vis);
                
            } else if ( e.isControlDown() ) {
                Visualization vis = item.getVisualization();
                TupleSet ts = vis.getFocusGroup(group);
                ts.removeTuple(item);
                curFocus = null;
                runActivity(vis);
            }
        }
    }
    
    private void runActivity(Visualization vis) {
        if ( activity != null ) {
            vis.run(activity);
        }
    }
    
} // end of class FocusControl
@


2.2.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d24 1
a24 1
 *
d36 1
a36 1
    protected VisualItem<?> curFocus;
d40 1
a40 1

d48 1
a48 1

d58 1
a58 1

d60 1
a60 1
     * Creates a new FocusControl that changes the focus when an item is
d68 1
a68 1

d70 1
a70 1
     * Creates a new FocusControl that changes the focus when an item is
d73 1
a73 1
     * @@param focusGroup the name of the focus group to use
d80 1
a80 1

d82 1
a82 1
     * Creates a new FocusControl that changes the focus when an item is
d86 1
a86 1
     * @@param act an action run to upon focus change
d92 1
a92 1

d94 1
a94 1
     * Creates a new FocusControl that changes the focus when an item is
d99 1
a99 1
     * @@param act an action run to upon focus change
d106 1
a106 1

d108 1
a108 1

d119 1
a119 1

d130 1
a130 1

d136 4
a139 5
    protected boolean filterCheck(VisualItem<?> item) {
        if ( filter == null ) {
			return true;
		}

d148 1
a148 1

d150 1
a150 1

d154 2
a155 5
    @@Override
	public void itemEntered(VisualItem<?> item, MouseEvent e) {
        if ( !filterCheck(item) ) {
			return;
		}
d160 1
a160 1
            TupleSet<VisualItem<?>> ts = vis.getFocusGroup(group);
d166 1
a166 1

d170 2
a171 5
    @@Override
	public void itemExited(VisualItem<?> item, MouseEvent e) {
        if ( !filterCheck(item) ) {
			return;
		}
d177 1
a177 1
            TupleSet<VisualItem<?>> ts = vis.getFocusGroup(group);
d182 1
a182 1

d186 2
a187 5
    @@Override
	public void itemClicked(VisualItem<?> item, MouseEvent e) {
        if ( !filterCheck(item) ) {
			return;
		}
d193 2
a194 2
                TupleSet<VisualItem<?>> ts = vis.getFocusGroup(group);

d205 1
a205 1

d208 1
a208 1
                TupleSet<VisualItem<?>> ts = vis.getFocusGroup(group);
d215 1
a215 1

d221 1
a221 1

@


2.1
log
@Fixed bug so that Ctrl-click now removes focus even if it is the last one
@
text
@d5 1
d9 1
d11 1
d39 1
d107 44
d155 1
d171 1
d187 1
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d154 7
@


1.1
log
@file FocusControl.java was initially added on branch beta.
@
text
@d1 164
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 137
package prefuse.controls;

import java.awt.Cursor;
import java.awt.event.MouseEvent;

import prefuse.Display;
import prefuse.Visualization;
import prefuse.data.tuple.TupleSet;
import prefuse.util.ui.UILib;
import prefuse.visual.VisualItem;


/**
 * Sets the current focus (according to the ItemRegistry's default focus
 * set) in response to mouse actions. This does not necessarily cause the
 * display to change. For this functionality, use a 
 * {@@link prefuse.event.FocusListener FocusListener} 
 * to drive display updates when the focus changes.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class FocusControl extends ControlAdapter {

    private String focusGroup = Visualization.FOCUS_ITEMS;
    protected String activity;
    protected VisualItem curFocus;
    protected int ccount;
    protected int button = Control.LEFT_MOUSE_BUTTON;
    
    /**
     * Creates a new FocusControl that changes the focus to another item
     * when that item is clicked once.
     */
    public FocusControl() {
        this(1);
    } //
    
    /**
     * Creates a new FocusControl that changes the focus to another item
     * when that item is clicked once.
     * @@param act an activity run to upon focus change 
     */
    public FocusControl(String act) {
        this(1);
        activity = act;
    } //
    
    /**
     * Creates a new FocusControl that changes the focus when an item is 
     * clicked the specified number of times. A click value of zero indicates
     * that the focus should be changed in response to mouse-over events.
     * @@param clicks the number of clicks needed to switch the focus.
     */
    public FocusControl(int clicks) {
        ccount = clicks;
    } //
    
    /**
     * Creates a new FocusControl that changes the focus when an item is 
     * clicked the specified number of times. A click value of zero indicates
     * that the focus should be changed in response to mouse-over events.
     * @@param clicks the number of clicks needed to switch the focus.
     * @@param act an activity run to upon focus change 
     */
    public FocusControl(int clicks, String act) {
        ccount = clicks;
        activity = act;
    }
    
    /**
     * Creates a new FocusControl that changes the focus when an item is 
     * clicked the specified number of times. A click value of zero indicates
     * that the focus should be changed in response to mouse-over events.
     * @@param clicks the number of clicks needed to switch the focus.
     * @@param act an activity run to upon focus change 
     * @@param focusSetKey the key corresponding to the focus set to use
     */
    public FocusControl(int clicks, String act, String focusGroup) {
        ccount = clicks;
        activity = act;
        this.focusGroup = focusGroup;
    }
    
    public void itemEntered(VisualItem item, MouseEvent e) {
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        if ( ccount == 0 ) {
            Visualization vis = item.getVisualization();
            TupleSet ts = vis.getFocusGroup(focusGroup);
            ts.setTuple(item);
            curFocus = item;
            runActivity(vis);
        }
    }
    
    public void itemExited(VisualItem item, MouseEvent e) {
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getDefaultCursor());
        if ( ccount == 0 ) {
            curFocus = null;
            Visualization vis = item.getVisualization();
            TupleSet ts = vis.getFocusGroup(focusGroup);
            ts.removeTuple(item);
            runActivity(vis);
        }
    }
    
    public void itemClicked(VisualItem item, MouseEvent e) {
        if ( UILib.isButtonPressed(e, button) &&
             e.getClickCount() == ccount )
        {
            if ( item != curFocus ) {
                Visualization vis = item.getVisualization();
                TupleSet ts = vis.getFocusGroup(focusGroup);
		            
                boolean ctrl = e.isControlDown();
                if ( !ctrl ) {
                    curFocus = item;
                    ts.setTuple(item);
		        } else if ( ts.containsTuple(item) ) {
		            ts.removeTuple(item);
		        } else {
		            ts.addTuple(item);
		        }
	            runActivity(vis);
        	}
        }
    } //
    
    private void runActivity(Visualization vis) {
        if ( activity != null ) {
            vis.run(activity);
        }
    } //
    
} // end of class FocusControl
@


1.1.2.2
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@d25 1
a25 1
    private String group = Visualization.FOCUS_ITEMS;
d37 1
a37 1
    }
d42 1
a42 1
     * @@param focusGroup the name of the focus set to use
d44 1
a44 1
    public FocusControl(String focusGroup) {
d46 2
a47 2
        group = focusGroup;
    }
d57 1
a57 13
    }
    
    /**
     * Creates a new FocusControl that changes the focus when an item is 
     * clicked the specified number of times. A click value of zero indicates
     * that the focus should be changed in response to mouse-over events.
     * @@param focusGroup the name of the focus set to use 
     * @@param clicks the number of clicks needed to switch the focus.
     */
    public FocusControl(String focusGroup, int clicks) {
        ccount = clicks;
        group = focusGroup;
    }
a74 1
     * @@param focusGroup the name of the focus set to use
d77 1
d79 1
a79 1
    public FocusControl(String focusGroup, int clicks, String act) {
d82 1
a82 1
        this.group = focusGroup;
d90 1
a90 1
            TupleSet ts = vis.getFocusGroup(group);
d103 1
a103 1
            TupleSet ts = vis.getFocusGroup(group);
d115 1
a115 1
                TupleSet ts = vis.getFocusGroup(group);
@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d128 1
a128 1
                    
d133 7
a139 7
                } else if ( ts.containsTuple(item) ) {
                    ts.removeTuple(item);
                } else {
                    ts.addTuple(item);
                }
                runActivity(vis);
            }
@


1.1.2.4
log
@Lots of javadoc
@
text
@d14 5
a18 12
 * <p>Updates the contents of a TupleSet of focus items in response to mouse
 * actions. For example, clicking a node or double-clicking a node could
 * update its focus status. This Control supports monitoring a specified
 * number of clicks to executing a focus change. By default a click pattern
 * will cause a VisualItem to become the sole member of the focus group.
 * Hold down the control key while clicking to add an item to a group
 * without removing the current members.</p>
 * 
 * <p>Updating a focus group does not necessarily cause
 * the display to change. For this functionality, either register an action
 * with this control, or register a TupleSetListener with the focus group.
 * </p>
d20 2
a21 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d42 1
a42 1
     * @@param focusGroup the name of the focus group to use
d63 1
a63 1
     * @@param focusGroup the name of the focus group to use 
d76 1
a76 1
     * @@param act an action run to upon focus change 
d87 1
a87 1
     * @@param focusGroup the name of the focus group to use
d89 1
a89 1
     * @@param act an action run to upon focus change 
a96 3
    /**
     * @@see prefuse.controls.Control#itemEntered(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
a108 3
    /**
     * @@see prefuse.controls.Control#itemExited(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
a120 3
    /**
     * @@see prefuse.controls.Control#itemClicked(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d141 1
a141 1
    }
d147 1
a147 1
    }
@


