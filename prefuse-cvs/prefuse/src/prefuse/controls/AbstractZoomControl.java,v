head	2.1;
access;
symbols
	java_1_5:2.1.0.4
	Root_java_1_5:2.1
	beta:2.1.0.2
	beta-20080113:2.1
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.1
date	2008.01.13.22.39.16;	author jheer;	state Exp;
branches
	2.1.4.1;
next	2.0;

2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.13.32;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.32;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.1.4.1
date	2008.01.23.23.55.40;	author jogiles;	state Exp;
branches;
next	2.1.4.2;

2.1.4.2
date	2008.02.28.00.40.29;	author amarsden;	state Exp;
branches;
next	;


desc
@@


2.1
log
@Fixed javadoc comments
@
text
@package prefuse.controls;

import java.awt.geom.Point2D;

import prefuse.Display;

/**
 * Abstract base class for zoom controls.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class AbstractZoomControl extends ControlAdapter {

    public static final double DEFAULT_MIN_SCALE = 1E-3;
    public static final double DEFAULT_MAX_SCALE = 75;
    
    /** Indicates a zoom operation completed successfully. */
    protected static final int ZOOM = 0;
    /** Indicates the minimum allowed zoom level has been reached. */
    protected static final int MIN_ZOOM = 1;
    /** Indicates the maximum allowed zoom level has been reached. */
    protected static final int MAX_ZOOM = 2;
    /** Indicates no zooming can be performed. This is often due to a
     *  transformation activity in progress. */
    protected static final int NO_ZOOM = 3;
    
    protected double m_minScale = DEFAULT_MIN_SCALE;
    protected double m_maxScale = DEFAULT_MAX_SCALE;
    protected boolean m_zoomOverItem = true;
    
    /**
     * Zoom the given display at the given point by the zoom factor,
     * in either absolute (item-space) or screen co-ordinates.
     * @@param display the Display to zoom
     * @@param p the point to center the zoom upon
     * @@param zoom the scale factor by which to zoom
     * @@param abs if true, the point p should be assumed to be in absolute
     * coordinates, otherwise it will be treated as scree (pixel) coordinates
     * @@return a return code indicating the status of the zoom operation.
     * One of {@@link #ZOOM}, {@@link #NO_ZOOM}, {@@link #MIN_ZOOM},
     * {@@link #MAX_ZOOM}.
     */
    protected int zoom(Display display, Point2D p, double zoom, boolean abs) {
        if ( display.isTranformInProgress() )
            return NO_ZOOM;
        
        double scale = display.getScale();
        double result = scale * zoom;
        int status = ZOOM;

        if ( result < m_minScale ) {
            zoom = m_minScale/scale;
            status = MIN_ZOOM;
        } else if ( result > m_maxScale ) {
            zoom = m_maxScale/scale;
            status = MAX_ZOOM;
        }       
        
        if ( abs )
            display.zoomAbs(p,zoom);
        else
            display.zoom(p,zoom);
        display.repaint();
        return status;
    }
    
    /**
     * Gets the maximum scale value allowed by this zoom control
     * @@return the maximum scale value 
     */
    public double getMaxScale() {
        return m_maxScale;
    }
    
    /**
     * Sets the maximum scale value allowed by this zoom control
     * @@param maxScale the maximum scale value 
     */
    public void setMaxScale(double maxScale) {
        this.m_maxScale = maxScale;
    }
    
    /**
     * Gets the minimum scale value allowed by this zoom control
     * @@return the minimum scale value 
     */
    public double getMinScale() {
        return m_minScale;
    }
    
    /**
     * Sets the minimum scale value allowed by this zoom control
     * @@param minScale the minimum scale value 
     */
    public void setMinScale(double minScale) {
        this.m_minScale = minScale;
    }

    /**
     * Indicates if the zoom control will work while the mouse is
     * over a VisualItem.
     * @@return true if the control still operates over a VisualItem
     */
    public boolean isZoomOverItem() {
        return m_zoomOverItem;
    }

    /**
     * Determines if the zoom control will work while the mouse is
     * over a VisualItem
     * @@param zoomOverItem true to indicate the control operates
     * over VisualItems, false otherwise
     */
    public void setZoomOverItem(boolean zoomOverItem) {
        this.m_zoomOverItem = zoomOverItem;
    }
    
} // end of class AbstractZoomControl
@


2.1.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d9 1
a9 1
 *
d16 1
a16 1

d26 1
a26 1

d30 1
a30 1

d38 1
a38 1
     * coordinates, otherwise it will be treated as screen (pixel) coordinates
d44 3
a46 4
        if ( display.isTranformInProgress() ) {
			return NO_ZOOM;
		}

d57 6
a62 7
        }

        if ( abs ) {
			display.zoomAbs(p,zoom);
		} else {
			display.zoom(p,zoom);
		}
d66 1
a66 1

d69 1
a69 1
     * @@return the maximum scale value
d74 1
a74 1

d77 1
d82 1
a82 1

d85 1
a85 1
     * @@return the minimum scale value
d90 1
a90 1

d93 1
d117 1
a117 1

@


2.1.4.2
log
@Allow the display to be zoomed in x/y dimensions separately (animation support too)
@
text
@a33 1
     *
d48 1
a48 1
        double scale = display.getScaleX();
d61 1
a61 1
			display.zoomAbs(p,zoom, zoom);
d63 1
a63 1
			display.zoom(p, zoom, zoom);
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d77 1
a77 1
     * @@return the maximum scale value 
d93 1
a93 1
     * @@return the minimum scale value 
@


1.1
log
@file AbstractZoomControl.java was initially added on branch beta.
@
text
@d1 118
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 99
package prefuse.controls;

import java.awt.geom.Point2D;

import prefuse.Display;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class AbstractZoomControl extends ControlAdapter {

    public static final double DEFAULT_MIN_SCALE = 1E-3;
    public static final double DEFAULT_MAX_SCALE = 75;
    
    protected static final int ZOOM = 0;
    protected static final int MIN_ZOOM = 1;
    protected static final int MAX_ZOOM = 2;
    protected static final int NO_ZOOM = 3;
    
    protected double m_minScale = DEFAULT_MIN_SCALE;
    protected double m_maxScale = DEFAULT_MAX_SCALE;
    protected boolean m_zoomOverItem = true;
    
    protected int zoom(Display display, Point2D p, double zoom, boolean abs) {
        if ( display.isTranformInProgress() )
            return NO_ZOOM;
        
        double scale = display.getScale();
        double result = scale * zoom;
        int status = ZOOM;

        if ( result < m_minScale ) {
            zoom = m_minScale/scale;
            status = MIN_ZOOM;
        } else if ( result > m_maxScale ) {
            zoom = m_maxScale/scale;
            status = MAX_ZOOM;
        }       
        
        if ( abs )
            display.zoomAbs(p,zoom);
        else
            display.zoom(p,zoom);
        display.repaint();
        return status;
    } //
    
    /**
     * Gets the maximum scale value allowed by this zoom control
     * @@return the maximum scale value 
     */
    public double getMaxScale() {
        return m_maxScale;
    } //
    
    /**
     * Sets the maximum scale value allowed by this zoom control
     * @@return the maximum scale value 
     */
    public void setMaxScale(double maxScale) {
        this.m_maxScale = maxScale;
    } //
    
    /**
     * Gets the minimum scale value allowed by this zoom control
     * @@return the minimum scale value 
     */
    public double getMinScale() {
        return m_minScale;
    } //
    
    /**
     * Sets the minimum scale value allowed by this zoom control
     * @@return the minimum scale value 
     */
    public void setMinScale(double minScale) {
        this.m_minScale = minScale;
    } //

    /**
     * Indicates if the zoom control will work while the mouse is
     * over a VisualItem.
     * @@return true if the control still operates over a VisualItem
     */
    public boolean isZoomOverItem() {
        return m_zoomOverItem;
    } //

    /**
     * Determines if the zoom control will work while the mouse is
     * over a VisualItem
     * @@param zoomOverItem true to indicate the control operates
     * over VisualItems, false otherwise
     */
    public void setZoomOverItem(boolean zoomOverItem) {
        this.m_zoomOverItem = zoomOverItem;
    } //
    
} // end of class AbstractZoomControl
@


1.1.2.2
log
@Lots of javadoc
@
text
@d8 1
a8 3
 * Abstract base class for zoom controls.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a14 1
    /** Indicates a zoom operation completed successfully. */
a15 1
    /** Indicates the minimum allowed zoom level has been reached. */
a16 1
    /** Indicates the maximum allowed zoom level has been reached. */
a17 2
    /** Indicates no zooming can be performed. This is often due to a
     *  transformation activity in progress. */
a23 12
    /**
     * Zoom the given display at the given point by the zoom factor,
     * in either absolute (item-space) or screen co-ordinates.
     * @@param display the Display to zoom
     * @@param p the point to center the zoom upon
     * @@param zoom the scale factor by which to zoom
     * @@param abs if true, the point p should be assumed to be in absolute
     * coordinates, otherwise it will be treated as scree (pixel) coordinates
     * @@return a return code indicating the status of the zoom operation.
     * One of {@@link #ZOOM}, {@@link #NO_ZOOM}, {@@link #MIN_ZOOM},
     * {@@link #MAX_ZOOM}.
     */
d46 1
a46 1
    }
d54 1
a54 1
    }
d62 1
a62 1
    }
d70 1
a70 1
    }
d78 1
a78 1
    }
d87 1
a87 1
    }
d97 1
a97 1
    }
@


