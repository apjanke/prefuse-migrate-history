head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.32;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.32;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.40;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.controls;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;

import prefuse.Display;
import prefuse.util.ui.UILib;
import prefuse.visual.VisualItem;


/**
 * Zooms the display, changing the scale of the viewable region. By default,
 * zooming is achieved by pressing the right mouse button on the background
 * of the visualization and dragging the mouse up or down. Moving the mouse up
 * zooms out the display around the spot the mouse was originally pressed.
 * Moving the mouse down similarly zooms in the display, making items
 * larger.
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class ZoomControl extends AbstractZoomControl {
    
    private int yLast;
    private Point2D down = new Point2D.Float();
    private int button = RIGHT_MOUSE_BUTTON; 
    
    /**
     * Create a new zoom control.
     */
    public ZoomControl() {
        // do nothing
    }
    
    /**
     * Create a new zoom control.
     * @@param mouseButton the mouse button that should initiate a zoom. One of
     * {@@link Control#LEFT_MOUSE_BUTTON}, {@@link Control#MIDDLE_MOUSE_BUTTON},
     * or {@@link Control#RIGHT_MOUSE_BUTTON}.
     */
    public ZoomControl(int mouseButton) {
        button = mouseButton;
    }
    
    /**
     * @@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
     */
    public void mousePressed(MouseEvent e) {
        if ( UILib.isButtonPressed(e, button) ) {
            Display display = (Display)e.getComponent();
            if (display.isTranformInProgress()) {
                yLast = -1;
                System.err.println("can't move");
                return;
            }
            display.setCursor(
                Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR));
            display.getAbsoluteCoordinate(e.getPoint(), down);
            yLast = e.getY();
        }
    }
    
    /**
     * @@see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)
     */
    public void mouseDragged(MouseEvent e) {
        if ( UILib.isButtonPressed(e, button) ) {
            Display display = (Display)e.getComponent();
            if (display.isTranformInProgress() || yLast == -1) {
                yLast = -1;
                return;
            }
            
            int y = e.getY();
            int dy = y-yLast;
            double zoom = 1 + ((double)dy) / 100;
            
            int status = zoom(display, down, zoom, true);
            int cursor = Cursor.N_RESIZE_CURSOR;
            if ( status == NO_ZOOM )
                cursor = Cursor.WAIT_CURSOR;
            display.setCursor(Cursor.getPredefinedCursor(cursor));
            
            yLast = y;
        }
    }

    /**
     * @@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
     */
    public void mouseReleased(MouseEvent e) {
        if ( UILib.isButtonPressed(e, button) ) {
            e.getComponent().setCursor(Cursor.getDefaultCursor());
        }
    }
    
    /**
     * @@see prefuse.controls.Control#itemPressed(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemPressed(VisualItem item, MouseEvent e) {
        if ( m_zoomOverItem )
            mousePressed(e);
    }

    /**
     * @@see prefuse.controls.Control#itemDragged(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemDragged(VisualItem item, MouseEvent e) {
        if ( m_zoomOverItem )
            mouseDragged(e);
    }
    
    /**
     * @@see prefuse.controls.Control#itemReleased(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemReleased(VisualItem item, MouseEvent e) {
        if ( m_zoomOverItem )
            mouseReleased(e);
    }
    
} // end of class ZoomControl
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d23 1
a23 1

d25 3
a27 3
    private final Point2D down = new Point2D.Float();
    private int button = RIGHT_MOUSE_BUTTON;

d34 1
a34 1

d44 1
a44 1

d48 1
a48 2
    @@Override
	public void mousePressed(MouseEvent e) {
d62 1
a62 1

d66 1
a66 2
    @@Override
	public void mouseDragged(MouseEvent e) {
d73 1
a73 1

d76 2
a77 2
            double zoom = 1 + (double)dy / 100;

d80 2
a81 3
            if ( status == NO_ZOOM ) {
				cursor = Cursor.WAIT_CURSOR;
			}
d83 1
a83 1

d91 1
a91 2
    @@Override
	public void mouseReleased(MouseEvent e) {
d96 1
a96 1

d100 3
a102 5
    @@Override
	public void itemPressed(VisualItem<?> item, MouseEvent e) {
        if ( m_zoomOverItem ) {
			mousePressed(e);
		}
d108 3
a110 5
    @@Override
	public void itemDragged(VisualItem<?> item, MouseEvent e) {
        if ( m_zoomOverItem ) {
			mouseDragged(e);
		}
d112 1
a112 1

d116 3
a118 5
    @@Override
	public void itemReleased(VisualItem<?> item, MouseEvent e) {
        if ( m_zoomOverItem ) {
			mouseReleased(e);
		}
d120 1
a120 1

@


1.1
log
@file ZoomControl.java was initially added on branch beta.
@
text
@d1 121
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 95
package prefuse.controls;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;

import prefuse.Display;
import prefuse.util.ui.UILib;
import prefuse.visual.VisualItem;


/**
 * Zooms the display, changing the scale of the viewable region. Zooming
 * is achieved by pressing the right mouse button on the background of the
 * visualization and dragging the mouse up or down. Moving the mouse up
 * zooms out the display around the spot the mouse was originally pressed.
 * Moving the mouse down similarly zooms in the display, making items
 * larger.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class ZoomControl extends AbstractZoomControl {
    
    private int yLast;
    private Point2D down = new Point2D.Float();
    private int button = RIGHT_MOUSE_BUTTON; 
    
    public ZoomControl() {
        // do nothing
    }
    
    public ZoomControl(int mouseButton) {
        button = mouseButton;
    }
    
    public void mousePressed(MouseEvent e) {
        if ( UILib.isButtonPressed(e, button) ) {
            Display display = (Display)e.getComponent();
            if (display.isTranformInProgress()) {
                yLast = -1;
                System.err.println("can't move");
                return;
            }
            display.setCursor(
                Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR));
            display.getAbsoluteCoordinate(e.getPoint(), down);
            yLast = e.getY();
        }
    } //
    
    public void mouseDragged(MouseEvent e) {
        if ( UILib.isButtonPressed(e, button) ) {
            Display display = (Display)e.getComponent();
            if (display.isTranformInProgress() || yLast == -1) {
                yLast = -1;
                return;
            }
            
            int y = e.getY();
            int dy = y-yLast;
            double zoom = 1 + ((double)dy) / 100;
            
            int status = zoom(display, down, zoom, true);
            int cursor = Cursor.N_RESIZE_CURSOR;
            if ( status == NO_ZOOM )
                cursor = Cursor.WAIT_CURSOR;
            display.setCursor(Cursor.getPredefinedCursor(cursor));
            
            yLast = y;
        }
    }

    public void mouseReleased(MouseEvent e) {
        if ( UILib.isButtonPressed(e, button) ) {
            e.getComponent().setCursor(Cursor.getDefaultCursor());
        }
    }
    
    public void itemPressed(VisualItem item, MouseEvent e) {
        if ( m_zoomOverItem )
            mousePressed(e);
    }

    public void itemDragged(VisualItem item, MouseEvent e) {
        if ( m_zoomOverItem )
            mouseDragged(e);
    }
    
    public void itemReleased(VisualItem item, MouseEvent e) {
        if ( m_zoomOverItem )
            mouseReleased(e);
    }
    
} // end of class ZoomControl
@


1.1.2.2
log
@Lots of javadoc
@
text
@d13 3
a15 3
 * Zooms the display, changing the scale of the viewable region. By default,
 * zooming is achieved by pressing the right mouse button on the background
 * of the visualization and dragging the mouse up or down. Moving the mouse up
d20 2
a21 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a28 3
    /**
     * Create a new zoom control.
     */
a32 6
    /**
     * Create a new zoom control.
     * @@param mouseButton the mouse button that should initiate a zoom. One of
     * {@@link Control#LEFT_MOUSE_BUTTON}, {@@link Control#MIDDLE_MOUSE_BUTTON},
     * or {@@link Control#RIGHT_MOUSE_BUTTON}.
     */
a36 3
    /**
     * @@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
     */
d50 1
a50 1
    }
a51 3
    /**
     * @@see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)
     */
a73 3
    /**
     * @@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
     */
a79 3
    /**
     * @@see prefuse.controls.Control#itemPressed(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
a84 3
    /**
     * @@see prefuse.controls.Control#itemDragged(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
a89 3
    /**
     * @@see prefuse.controls.Control#itemReleased(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
@


