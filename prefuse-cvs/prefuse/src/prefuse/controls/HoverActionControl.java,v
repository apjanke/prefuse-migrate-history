head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.32;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.32;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.02.02.19.01.53;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.40;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.controls;

import java.awt.event.MouseEvent;

import prefuse.visual.VisualItem;

/**
 * Control that executes an action when the mouse passes over an item.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class HoverActionControl extends ControlAdapter {

    private String m_action;
   
    /**
     * Create a new HoverActionControl.
     * @@param action the action to run upon mouse-over. The action is run
     * both upon entering and upon exiting the item.
     */
    public HoverActionControl(String action) {
        m_action = action;
    }
    
    /**
     * @@see prefuse.controls.Control#itemEntered(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemEntered(VisualItem item, MouseEvent e) {
        item.getVisualization().run(m_action);
    }

    /**
     * @@see prefuse.controls.Control#itemExited(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemExited(VisualItem item, MouseEvent e) {
        item.getVisualization().run(m_action);
    }

} // end of class HoverActionControl
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d9 1
a9 1
 *
d14 2
a15 2
    private final String m_action;

d24 1
a24 1

d28 1
a28 2
    @@Override
	public void itemEntered(VisualItem<?> item, MouseEvent e) {
d35 1
a35 2
    @@Override
	public void itemExited(VisualItem<?> item, MouseEvent e) {
@


1.1
log
@file HoverActionControl.java was initially added on branch beta.
@
text
@d1 39
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 26
package prefuse.controls;

import java.awt.event.MouseEvent;

import prefuse.visual.VisualItem;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> - prefuse(AT)jheer.org
 */
public class HoverActionControl extends ControlAdapter {

    private String m_action;
    
    public HoverActionControl(String action) {
        m_action = action;
    }
    
    public void itemEntered(VisualItem item, MouseEvent e) {
        item.getVisualization().run(m_action);
    }

    public void itemExited(VisualItem item, MouseEvent e) {
        item.getVisualization().run(m_action);
    }

} // end of class HoverActionControl
@


1.1.2.2
log
@Lots of javadoc
@
text
@a7 2
 * Control that executes an action when the mouse passes over an item.
 * 
d13 1
a13 6
   
    /**
     * Create a new HoverActionControl.
     * @@param action the action to run upon mouse-over. The action is run
     * both upon entering and upon exiting the item.
     */
a17 3
    /**
     * @@see prefuse.controls.Control#itemEntered(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
a21 3
    /**
     * @@see prefuse.controls.Control#itemExited(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
@


1.1.2.3
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@d10 1
a10 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
@


