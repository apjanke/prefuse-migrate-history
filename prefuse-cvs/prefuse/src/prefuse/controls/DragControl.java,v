head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.32;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.32;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.19;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2006.02.01.19.22.44;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.40;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.controls;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;

import javax.swing.SwingUtilities;

import prefuse.Display;
import prefuse.data.Table;
import prefuse.data.event.EventConstants;
import prefuse.data.event.TableListener;
import prefuse.visual.VisualItem;


/**
 * Changes a node's location when dragged on screen. Other effects
 * include fixing a node's position when the mouse if over it, and
 * changing the mouse cursor to a hand when the mouse passes over an
 * item.
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class DragControl extends ControlAdapter implements TableListener {

    private VisualItem activeItem;
    protected String action;
    protected Point2D down = new Point2D.Double();
    protected Point2D temp = new Point2D.Double();
    protected boolean dragged, wasFixed, resetItem;
    private boolean fixOnMouseOver = true;
    protected boolean repaint = true;
    
    /**
     * Creates a new drag control that issues repaint requests as an item
     * is dragged.
     */
    public DragControl() {
    }
    
    /**
     * Creates a new drag control that optionally issues repaint requests
     * as an item is dragged.
     * @@param repaint indicates whether or not repaint requests are issued
     *  as drag events occur. This can be set to false if other activities
     *  (for example, a continuously running force simulation) are already
     *  issuing repaint events.
     */
    public DragControl(boolean repaint) {
        this.repaint = repaint;
    }
    
    /**
     * Creates a new drag control that optionally issues repaint requests
     * as an item is dragged.
     * @@param repaint indicates whether or not repaint requests are issued
     *  as drag events occur. This can be set to false if other activities
     *  (for example, a continuously running force simulation) are already
     *  issuing repaint events.
     * @@param fixOnMouseOver indicates if object positions should become
     * fixed (made stationary) when the mouse pointer is over an item.
     */
    public DragControl(boolean repaint, boolean fixOnMouseOver) {
        this.repaint = repaint;
        this.fixOnMouseOver = fixOnMouseOver;
    }
    
    /**
     * Creates a new drag control that invokes an action upon drag events.
     * @@param action the action to run when drag events occur.
     */
    public DragControl(String action) {
        this.repaint = false;
        this.action = action;
    }
    
    /**
     * Creates a new drag control that invokes an action upon drag events.
     * @@param action the action to run when drag events occur
     * @@param fixOnMouseOver indicates if object positions should become
     * fixed (made stationary) when the mouse pointer is over an item.
     */
    public DragControl(String action, boolean fixOnMouseOver) {
        this.repaint = false;
        this.fixOnMouseOver = fixOnMouseOver;
        this.action = action;
    }
    
    /**
     * Determines whether or not an item should have it's position fixed
     * when the mouse moves over it.
     * @@param s whether or not item position should become fixed upon
     *  mouse over.
     */
    public void setFixPositionOnMouseOver(boolean s) {
        fixOnMouseOver = s;
    }
    
    /**
     * @@see prefuse.controls.Control#itemEntered(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemEntered(VisualItem item, MouseEvent e) {
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        activeItem = item;
        if ( fixOnMouseOver ) {
            wasFixed = item.isFixed();
            resetItem = true;
            item.setFixed(true);
            item.getTable().addTableListener(this);
        }
    }
    
    /**
     * @@see prefuse.controls.Control#itemExited(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemExited(VisualItem item, MouseEvent e) {
        if ( activeItem == item ) {
            activeItem = null;
            item.getTable().removeTableListener(this);
            if ( resetItem ) item.setFixed(wasFixed);
        }
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getDefaultCursor());
    } //
    
    /**
     * @@see prefuse.controls.Control#itemPressed(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemPressed(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !fixOnMouseOver ) {
            wasFixed = item.isFixed();
            resetItem = true;
            item.setFixed(true);
            item.getTable().addTableListener(this);
        }
        dragged = false;
        Display d = (Display)e.getComponent();
        d.getAbsoluteCoordinate(e.getPoint(), down);
    }
    
    /**
     * @@see prefuse.controls.Control#itemReleased(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemReleased(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( dragged ) {
            activeItem = null;
            item.getTable().removeTableListener(this);
            if ( resetItem ) item.setFixed(wasFixed);
            dragged = false;
        }            
    }
    
    /**
     * @@see prefuse.controls.Control#itemDragged(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemDragged(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        dragged = true;
        Display d = (Display)e.getComponent();
        d.getAbsoluteCoordinate(e.getPoint(), temp);
        double dx = temp.getX()-down.getX();
        double dy = temp.getY()-down.getY();
        double x = item.getX();
        double y = item.getY();

        item.setStartX(x);  item.setStartY(y);
        item.setX(x+dx);    item.setY(y+dy);
        item.setEndX(x+dx); item.setEndY(y+dy);
        
        if ( repaint )
            item.getVisualization().repaint();
        
        down.setLocation(temp);
        if ( action != null )
            d.getVisualization().run(action);
    }

    /**
     * @@see prefuse.data.event.TableListener#tableChanged(prefuse.data.Table, int, int, int, int)
     */
    public void tableChanged(Table t, int start, int end, int col, int type) {
        if ( activeItem == null || type != EventConstants.UPDATE 
                || col != t.getColumnNumber(VisualItem.FIXED) )
            return;
        int row = activeItem.getRow();
        if ( row >= start && row <= end )
            resetItem = false;
    }

} // end of class DragControl
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d26 1
a26 1
    private VisualItem<?> activeItem;
d33 1
a33 1

d40 1
a40 1

d52 1
a52 1

d67 1
a67 1

d76 1
a76 1

d88 1
a88 1

d98 1
a98 1

d102 1
a102 2
    @@Override
	public void itemEntered(VisualItem<?> item, MouseEvent e) {
d113 1
a113 1

d117 1
a117 2
    @@Override
	public void itemExited(VisualItem<?> item, MouseEvent e) {
d121 1
a121 3
            if ( resetItem ) {
				item.setFixed(wasFixed);
			}
d126 1
a126 1

d130 2
a131 5
    @@Override
	public void itemPressed(VisualItem<?> item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) {
			return;
		}
d142 1
a142 1

d146 2
a147 5
    @@Override
	public void itemReleased(VisualItem<?> item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) {
			return;
		}
d151 1
a151 3
            if ( resetItem ) {
				item.setFixed(wasFixed);
			}
d153 1
a153 1
        }
d155 1
a155 1

d159 2
a160 5
    @@Override
	public void itemDragged(VisualItem<?> item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) {
			return;
		}
d172 4
a175 5

        if ( repaint ) {
			item.getVisualization().repaint();
		}

d177 2
a178 3
        if ( action != null ) {
			d.getVisualization().run(action);
		}
d184 4
a187 5
    public void tableChanged(Table<?> t, int start, int end, int col, int type) {
        if ( activeItem == null || type != EventConstants.UPDATE
                || col != t.getColumnNumber(VisualItem.FIXED) ) {
			return;
		}
d189 2
a190 3
        if ( row >= start && row <= end ) {
			resetItem = false;
		}
@


1.1
log
@file DragControl.java was initially added on branch beta.
@
text
@d1 193
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 155
package prefuse.controls;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;

import javax.swing.SwingUtilities;

import prefuse.Display;
import prefuse.activity.Activity;
import prefuse.visual.VisualItem;


/**
 * Changes a node's location when dragged on screen. Other effects
 * include fixing a node's position when the mouse if over it, and
 * changing the mouse cursor to a hand when the mouse passes over an
 * item.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class DragControl extends ControlAdapter {

    private VisualItem activeItem;
    protected Activity update;
    protected Point2D down = new Point2D.Double();
    protected Point2D temp = new Point2D.Double();
    protected boolean dragged;
    protected boolean wasFixed;
    private boolean fixOnMouseOver = true;
    protected boolean repaint = true;
    
    /**
     * Creates a new drag control that issues repaint requests as an item
     * is dragged.
     */
    public DragControl() {
    } //
    
    /**
     * Creates a new drag control that optionally issues repaint requests
     * as an item is dragged.
     * @@param repaint indicates whether or not repaint requests are issued
     *  as drag events occur. This can be set to false if other activities
     *  (for example, a continuously running force simulation) are already
     *  issuing repaint events.
     */
    public DragControl(boolean repaint) {
        this.repaint = repaint;
    } //
    
    /**
     * Creates a new drag control that optionally issues repaint requests
     * as an item is dragged.
     * @@param repaint indicates whether or not repaint requests are issued
     *  as drag events occur. This can be set to false if other activities
     *  (for example, a continuously running force simulation) are already
     *  issuing repaint events.
     * @@param fixOnMouseOver indicates if object positions should become
     * fixed (made stationary) when the mouse pointer is over an item.
     */
    public DragControl(boolean repaint, boolean fixOnMouseOver) {
        this.repaint = repaint;
        this.fixOnMouseOver = fixOnMouseOver;
    } //
    
    public DragControl(Activity update) {
        this.repaint = false;
        this.update = update;
    } //
    
    public DragControl(Activity update, boolean fixOnMouseOver) {
        this.repaint = false;
        this.fixOnMouseOver = fixOnMouseOver;
        this.update = update;
    } //
    
    /**
     * Determines whether or not an item should have it's position fixed
     * when the mouse moves over it.
     * @@param s whether or not item position should become fixed upon
     *  mouse over.
     */
    public void setFixPositionOnMouseOver(boolean s) {
        fixOnMouseOver = s;
    } //
    
    public void itemEntered(VisualItem item, MouseEvent e) {
        //if (!(item instanceof NodeItem)) return;
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        activeItem = item;
        if ( fixOnMouseOver ) {
            wasFixed = item.isFixed();
            item.setFixed(true);
        }
    } //
    
    public void itemExited(VisualItem item, MouseEvent e) {
        //if (!(item instanceof NodeItem)) return;
        if ( activeItem == item ) {
            activeItem = null;
            item.setFixed(wasFixed);
        }
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getDefaultCursor());
    } //
    
    public void itemPressed(VisualItem item, MouseEvent e) {
        //if (!(item instanceof NodeItem)) return;
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !fixOnMouseOver ) {
            wasFixed = item.isFixed();
            item.setFixed(true);
        }
        dragged = false;
        Display d = (Display)e.getComponent();
        d.getAbsoluteCoordinate(e.getPoint(), down);
    } //
    
    public void itemReleased(VisualItem item, MouseEvent e) {
        //if (!(item instanceof NodeItem)) return;
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( dragged ) {
            activeItem = null;
            item.setFixed(wasFixed);
            dragged = false;
        }            
    } //
    
    public void itemDragged(VisualItem item, MouseEvent e) {
        //if (!(item instanceof NodeItem)) return;
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        dragged = true;
        Display d = (Display)e.getComponent();
        d.getAbsoluteCoordinate(e.getPoint(), temp);
        double dx = temp.getX()-down.getX();
        double dy = temp.getY()-down.getY();
        double x = item.getX();
        double y = item.getY();

        item.setStartX(x);  item.setStartY(y);
        item.setX(x+dx);    item.setY(y+dy);
        item.setEndX(x+dx); item.setEndY(y+dy);
        
        if ( repaint )
            item.getVisualization().repaint();
        
        down.setLocation(temp);
        if ( update != null )
            update.run();
    } //
    
} // end of class DragControl
@


1.1.2.2
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@a10 3
import prefuse.data.Table;
import prefuse.data.event.EventConstants;
import prefuse.data.event.TableListener;
d23 1
a23 1
public class DragControl extends ControlAdapter implements TableListener {
d29 2
a30 1
    protected boolean dragged, wasFixed, resetItem;
d39 1
a39 1
    }
d51 1
a51 1
    }
d66 1
a66 1
    }
d71 1
a71 1
    }
d77 1
a77 1
    }
d87 1
a87 1
    }
a95 1
            resetItem = true;
a96 1
            item.getTable().addTableListener(this);
d98 1
a98 1
    }
d104 1
a104 2
            item.getTable().removeTableListener(this);
            if ( resetItem ) item.setFixed(wasFixed);
a114 1
            resetItem = true;
a115 1
            item.getTable().addTableListener(this);
d120 1
a120 1
    }
d127 1
a127 2
            item.getTable().removeTableListener(this);
            if ( resetItem ) item.setFixed(wasFixed);
d130 1
a130 1
    }
d153 2
a154 11
    }

	public void tableChanged(Table t, int start, int end, int col, int type) {
		if ( activeItem == null || type != EventConstants.UPDATE 
				|| col != t.getColumnIndex(VisualItem.FIXED) )
			return;
		int row = activeItem.getRow();
		if ( row >= start && row <= end )
			resetItem = false;
	}

@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d163 8
a170 8
    public void tableChanged(Table t, int start, int end, int col, int type) {
        if ( activeItem == null || type != EventConstants.UPDATE 
                || col != t.getColumnIndex(VisualItem.FIXED) )
            return;
        int row = activeItem.getRow();
        if ( row >= start && row <= end )
            resetItem = false;
    }
@


1.1.2.4
log
@Lots of javadoc
@
text
@d10 1
d23 2
a24 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
d29 1
a29 1
    protected String action;
d70 1
a70 5
    /**
     * Creates a new drag control that invokes an action upon drag events.
     * @@param action the action to run when drag events occur.
     */
    public DragControl(String action) {
d72 1
a72 1
        this.action = action;
d75 1
a75 7
    /**
     * Creates a new drag control that invokes an action upon drag events.
     * @@param action the action to run when drag events occur
     * @@param fixOnMouseOver indicates if object positions should become
     * fixed (made stationary) when the mouse pointer is over an item.
     */
    public DragControl(String action, boolean fixOnMouseOver) {
d78 1
a78 1
        this.action = action;
a90 3
    /**
     * @@see prefuse.controls.Control#itemEntered(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d92 1
a103 3
    /**
     * @@see prefuse.controls.Control#itemExited(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d105 1
a114 3
    /**
     * @@see prefuse.controls.Control#itemPressed(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d116 1
a128 3
    /**
     * @@see prefuse.controls.Control#itemReleased(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d130 1
a139 3
    /**
     * @@see prefuse.controls.Control#itemDragged(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d141 1
d159 2
a160 2
        if ( action != null )
            d.getVisualization().run(action);
a162 3
    /**
     * @@see prefuse.data.event.TableListener#tableChanged(prefuse.data.Table, int, int, int, int)
     */
@


1.1.2.5
log
@Javadoc'd.
@
text
@d186 1
a186 1
                || col != t.getColumnNumber(VisualItem.FIXED) )
@


