head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.32;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.32;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.40;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.controls;

import java.awt.Cursor;
import java.awt.event.MouseEvent;

import prefuse.Display;
import prefuse.util.ui.UILib;
import prefuse.visual.VisualItem;


/**
 * Pans the display, changing the viewable region of the visualization.
 * By default, panning is accomplished by clicking on the background of a
 * visualization with the left mouse button and then dragging.
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class PanControl extends ControlAdapter {

    private boolean m_panOverItem;
    private int m_xDown, m_yDown;
    private int m_button;
    
    /**
     * Create a new PanControl.
     */
    public PanControl() {
        this(LEFT_MOUSE_BUTTON, false);
    }
    
    /**
     * Create a new PanControl.
     * @@param panOverItem if true, the panning control will work even while
     * the mouse is over a visual item.
     */
    public PanControl(boolean panOverItem) {
        this(LEFT_MOUSE_BUTTON, panOverItem);
    }
    
    /**
     * Create a new PanControl.
     * @@param mouseButton the mouse button that should initiate a pan. One of
     * {@@link Control#LEFT_MOUSE_BUTTON}, {@@link Control#MIDDLE_MOUSE_BUTTON},
     * or {@@link Control#RIGHT_MOUSE_BUTTON}.
     */
    public PanControl(int mouseButton) {
        this(mouseButton, false);
    }
    
    /**
     * Create a new PanControl
     * @@param mouseButton the mouse button that should initiate a pan. One of
     * {@@link Control#LEFT_MOUSE_BUTTON}, {@@link Control#MIDDLE_MOUSE_BUTTON},
     * or {@@link Control#RIGHT_MOUSE_BUTTON}.
     * @@param panOverItem if true, the panning control will work even while
     * the mouse is over a visual item.
     */
    public PanControl(int mouseButton, boolean panOverItem) {
        m_button = mouseButton;
        m_panOverItem = panOverItem;
    }
    
    // ------------------------------------------------------------------------
    
    /**
     * @@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
     */
    public void mousePressed(MouseEvent e) {
        if ( UILib.isButtonPressed(e, m_button) ) {
            e.getComponent().setCursor(
                Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
            m_xDown = e.getX();
            m_yDown = e.getY();
        }
    }
    
    /**
     * @@see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)
     */
    public void mouseDragged(MouseEvent e) {
        if ( UILib.isButtonPressed(e, m_button) ) {
            Display display = (Display)e.getComponent();
            int x = e.getX(),   y = e.getY();
            int dx = x-m_xDown, dy = y-m_yDown;
            display.pan(dx,dy);
            m_xDown = x;
            m_yDown = y;
            display.repaint();
        }
    }
    
    /**
     * @@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
     */
    public void mouseReleased(MouseEvent e) {
        if ( UILib.isButtonPressed(e, m_button) ) {
            e.getComponent().setCursor(Cursor.getDefaultCursor());
            m_xDown = -1;
            m_yDown = -1;
        }
    }
    
    /**
     * @@see prefuse.controls.Control#itemPressed(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemPressed(VisualItem item, MouseEvent e) {
        if ( m_panOverItem )
            mousePressed(e);
    }

    /**
     * @@see prefuse.controls.Control#itemDragged(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemDragged(VisualItem item, MouseEvent e) {
        if ( m_panOverItem )
            mouseDragged(e);
    }
    
    /**
     * @@see prefuse.controls.Control#itemReleased(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemReleased(VisualItem item, MouseEvent e) {
        if ( m_panOverItem )
            mouseReleased(e);
    }
    
} // end of class PanControl
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d20 1
a20 1
    private final boolean m_panOverItem;
d22 2
a23 2
    private final int m_button;

d30 1
a30 1

d39 1
a39 1

d49 1
a49 1

d62 1
a62 1

d64 1
a64 1

d68 1
a68 2
    @@Override
	public void mousePressed(MouseEvent e) {
d76 1
a76 1

d80 1
a80 2
    @@Override
	public void mouseDragged(MouseEvent e) {
d91 1
a91 1

d95 1
a95 2
    @@Override
	public void mouseReleased(MouseEvent e) {
d102 1
a102 1

d106 3
a108 5
    @@Override
	public void itemPressed(VisualItem<?> item, MouseEvent e) {
        if ( m_panOverItem ) {
			mousePressed(e);
		}
d114 3
a116 5
    @@Override
	public void itemDragged(VisualItem<?> item, MouseEvent e) {
        if ( m_panOverItem ) {
			mouseDragged(e);
		}
d118 1
a118 1

d122 3
a124 5
    @@Override
	public void itemReleased(VisualItem<?> item, MouseEvent e) {
        if ( m_panOverItem ) {
			mouseReleased(e);
		}
d126 1
a126 1

@


1.1
log
@file PanControl.java was initially added on branch beta.
@
text
@d1 127
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 88
package prefuse.controls;

import java.awt.Cursor;
import java.awt.event.MouseEvent;

import prefuse.Display;
import prefuse.util.ui.UILib;
import prefuse.visual.VisualItem;


/**
 * Pans the display, changing the viewable region of the visualization.
 * Panning is accomplished by clicking on the background of a visualization
 * with the left mouse button and then dragging.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class PanControl extends ControlAdapter {

    private boolean m_panOverItem;
    private int m_xDown, m_yDown;
    private int m_button;
    
    public PanControl() {
        this(LEFT_MOUSE_BUTTON, false);
    }
    
    public PanControl(boolean panOverItem) {
        this(LEFT_MOUSE_BUTTON, panOverItem);
    }
    
    public PanControl(int mouseButton) {
        this(mouseButton, false);
    }
    
    public PanControl(int mouseButton, boolean panOverItem) {
        m_button = mouseButton;
        m_panOverItem = panOverItem;
    }
    
    // ------------------------------------------------------------------------
    
    public void mousePressed(MouseEvent e) {
        if ( UILib.isButtonPressed(e, m_button) ) {
            e.getComponent().setCursor(
                Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
            m_xDown = e.getX();
            m_yDown = e.getY();
        }
    }
    
    public void mouseDragged(MouseEvent e) {
        if ( UILib.isButtonPressed(e, m_button) ) {
            Display display = (Display)e.getComponent();
            int x = e.getX(),   y = e.getY();
            int dx = x-m_xDown, dy = y-m_yDown;
            display.pan(dx,dy);
            m_xDown = x;
            m_yDown = y;
            display.repaint();
        }
    }
    
    public void mouseReleased(MouseEvent e) {
        if ( UILib.isButtonPressed(e, m_button) ) {
            e.getComponent().setCursor(Cursor.getDefaultCursor());
            m_xDown = -1;
            m_yDown = -1;
        }
    }
    
    public void itemPressed(VisualItem item, MouseEvent e) {
        if ( m_panOverItem )
            mousePressed(e);
    }

    public void itemDragged(VisualItem item, MouseEvent e) {
        if ( m_panOverItem )
            mouseDragged(e);
    }
    
    public void itemReleased(VisualItem item, MouseEvent e) {
        if ( m_panOverItem )
            mouseReleased(e);
    }
    
} // end of class PanControl
@


1.1.2.2
log
@Lots of javadoc
@
text
@d13 2
a14 2
 * By default, panning is accomplished by clicking on the background of a
 * visualization with the left mouse button and then dragging.
d16 2
a17 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a24 3
    /**
     * Create a new PanControl.
     */
a28 5
    /**
     * Create a new PanControl.
     * @@param panOverItem if true, the panning control will work even while
     * the mouse is over a visual item.
     */
a32 6
    /**
     * Create a new PanControl.
     * @@param mouseButton the mouse button that should initiate a pan. One of
     * {@@link Control#LEFT_MOUSE_BUTTON}, {@@link Control#MIDDLE_MOUSE_BUTTON},
     * or {@@link Control#RIGHT_MOUSE_BUTTON}.
     */
a36 8
    /**
     * Create a new PanControl
     * @@param mouseButton the mouse button that should initiate a pan. One of
     * {@@link Control#LEFT_MOUSE_BUTTON}, {@@link Control#MIDDLE_MOUSE_BUTTON},
     * or {@@link Control#RIGHT_MOUSE_BUTTON}.
     * @@param panOverItem if true, the panning control will work even while
     * the mouse is over a visual item.
     */
a43 3
    /**
     * @@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
     */
a52 3
    /**
     * @@see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)
     */
a64 3
    /**
     * @@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
     */
a72 3
    /**
     * @@see prefuse.controls.Control#itemPressed(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
a77 3
    /**
     * @@see prefuse.controls.Control#itemDragged(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
a82 3
    /**
     * @@see prefuse.controls.Control#itemReleased(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
@


