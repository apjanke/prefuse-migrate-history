head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.12.18.23.43;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.13.32;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.32;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.27.09.05.19;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.40;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.controls;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.util.Iterator;

import javax.swing.SwingUtilities;

import prefuse.Display;
import prefuse.visual.NodeItem;
import prefuse.visual.VisualItem;


/**
 * Control that changes the location of a whole subtree when dragged on screen.
 * This is similar to the {@@link DragControl DragControl} class, except that it
 * moves the entire visible subtree rooted at an item, rather than just the
 * item itself.
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class SubtreeDragControl extends ControlAdapter {

    private Point2D down = new Point2D.Double();
    private Point2D tmp = new Point2D.Double();
    private boolean wasFixed;
    
    /**
     * Creates a new subtree drag control that issues repaint requests as an
     * item is dragged.
     */
    public SubtreeDragControl() {
    }
    
    /**
     * @@see prefuse.controls.Control#itemEntered(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemEntered(VisualItem item, MouseEvent e) {
        if ( !(item instanceof NodeItem) ) return;
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }
    
    /**
     * @@see prefuse.controls.Control#itemExited(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemExited(VisualItem item, MouseEvent e) {
        if ( !(item instanceof NodeItem) ) return;
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getDefaultCursor());
    }
    
    /**
     * @@see prefuse.controls.Control#itemPressed(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemPressed(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !(item instanceof NodeItem) ) return;
        Display d = (Display)e.getComponent();
        down = d.getAbsoluteCoordinate(e.getPoint(), down);
        wasFixed = item.isFixed();
        item.setFixed(true);
    }
    
    /**
     * @@see prefuse.controls.Control#itemReleased(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemReleased(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !(item instanceof NodeItem) ) return;
        item.setFixed(wasFixed);
    }
    
    /**
     * @@see prefuse.controls.Control#itemDragged(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemDragged(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !(item instanceof NodeItem) ) return;
        Display d = (Display)e.getComponent();
        tmp = d.getAbsoluteCoordinate(e.getPoint(), tmp);
        double dx = tmp.getX()-down.getX();
        double dy = tmp.getY()-down.getY();
        updateLocations((NodeItem)item, dx, dy);
        down.setLocation(tmp);
        item.getVisualization().repaint();
    }
    
    private void updateLocations(NodeItem n, double dx, double dy) {
        double x = n.getX(), y = n.getY();
        n.setStartX(x); n.setStartY(y);
        x += dx; y += dy;
        n.setX(x);    n.setY(y);
        n.setEndX(x); n.setEndY(y);

        Iterator children = n.children();
        while ( children.hasNext() )
            updateLocations((NodeItem)children.next(), dx, dy);
    }
    
} // end of class SubtreeDragControl
@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d6 1
d28 1
a28 1

d35 1
a35 1

d39 2
a40 5
    @@Override
	public void itemEntered(VisualItem<?> item, MouseEvent e) {
        if ( !(item instanceof NodeItem) ) {
			return;
		}
d44 1
a44 1

d48 2
a49 5
    @@Override
	public void itemExited(VisualItem<?> item, MouseEvent e) {
        if ( !(item instanceof NodeItem) ) {
			return;
		}
d53 1
a53 1

d57 3
a59 8
    @@Override
	public void itemPressed(VisualItem<?> item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) {
			return;
		}
        if ( !(item instanceof NodeItem) ) {
			return;
		}
d65 1
a65 1

d69 3
a71 8
    @@Override
	public void itemReleased(VisualItem<?> item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) {
			return;
		}
        if ( !(item instanceof NodeItem) ) {
			return;
		}
d74 1
a74 1

d78 3
a80 8
    @@Override
	public void itemDragged(VisualItem<?> item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) {
			return;
		}
        if ( !(item instanceof NodeItem) ) {
			return;
		}
d85 1
a85 1
        updateLocations((NodeItem<?,?>)item, dx, dy);
d89 2
a90 2

    private void updateLocations(NodeItem<?,?> n, double dx, double dy) {
d97 3
a99 3
        for(NodeItem<?,?> ni : n.children()) {
			updateLocations(ni, dx, dy);
		}
d101 1
a101 1

@


1.1
log
@file SubtreeDragControl.java was initially added on branch beta.
@
text
@d1 102
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 88
package prefuse.controls;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.util.Iterator;

import javax.swing.SwingUtilities;

import prefuse.Display;
import prefuse.visual.NodeItem;
import prefuse.visual.VisualItem;


/**
 * Changes the location of a whole subtree when dragged on screen. This is
 * similar to the {@@link DragControl DragControl} class, except that it
 * moves the entire visible subtree rooted at an item, rather than just the
 * item itself.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class SubtreeDragControl extends ControlAdapter {

    private Point2D down = new Point2D.Double();
    private Point2D tmp = new Point2D.Double();
    private boolean wasFixed;
    
    /**
     * Creates a new subtree drag control that issues repaint requests as an
     * item is dragged.
     */
    public SubtreeDragControl() {
    }
    
    public void itemEntered(VisualItem item, MouseEvent e) {
        if ( !(item instanceof NodeItem) ) return;
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    } //
    
    public void itemExited(VisualItem item, MouseEvent e) {
        if ( !(item instanceof NodeItem) ) return;
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getDefaultCursor());
    } //
    
    public void itemPressed(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !(item instanceof NodeItem) ) return;
        Display d = (Display)e.getComponent();
        down = d.getAbsoluteCoordinate(e.getPoint(), down);
        wasFixed = item.isFixed();
        item.setFixed(true);
    } //
    
    public void itemReleased(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !(item instanceof NodeItem) ) return;
        item.setFixed(wasFixed);
    } //
    
    public void itemDragged(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !(item instanceof NodeItem) ) return;
        Display d = (Display)e.getComponent();
        tmp = d.getAbsoluteCoordinate(e.getPoint(), tmp);
        double dx = tmp.getX()-down.getX();
        double dy = tmp.getY()-down.getY();
        updateLocations((NodeItem)item, dx, dy);
        down.setLocation(tmp);
        item.getVisualization().repaint();
    } //
    
    private void updateLocations(NodeItem n, double dx, double dy) {
        double x = n.getX(), y = n.getY();
        n.setStartX(x); n.setStartY(y);
        x += dx; y += dy;
        n.setX(x);    n.setY(y);
        n.setEndX(x); n.setEndY(y);

        Iterator children = n.getChildren();
        while ( children.hasNext() )
            updateLocations((NodeItem)children.next(), dx, dy);
    } //
    
} // end of class SubtreeDragControl
@


1.1.2.2
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@d83 1
a83 1
        Iterator children = n.children();
@


1.1.2.3
log
@Lots of javadoc
@
text
@d16 2
a17 2
 * Control that changes the location of a whole subtree when dragged on screen.
 * This is similar to the {@@link DragControl DragControl} class, except that it
d21 2
a22 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a36 3
    /**
     * @@see prefuse.controls.Control#itemEntered(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d41 1
a41 1
    }
a42 3
    /**
     * @@see prefuse.controls.Control#itemExited(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d47 1
a47 1
    }
a48 3
    /**
     * @@see prefuse.controls.Control#itemPressed(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d56 1
a56 1
    }
a57 3
    /**
     * @@see prefuse.controls.Control#itemReleased(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d62 1
a62 1
    }
a63 3
    /**
     * @@see prefuse.controls.Control#itemDragged(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
d74 1
a74 1
    }
d86 1
a86 1
    }
@


