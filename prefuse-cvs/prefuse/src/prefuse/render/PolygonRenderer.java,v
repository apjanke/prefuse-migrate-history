head	2.1;
access;
symbols
	java_1_5:2.1.0.4
	Root_java_1_5:2.1
	beta:2.1.0.2
	beta-20080113:2.1
	beta-20071021:2.1
	beta-20060220:2.1
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.1
date	2006.02.18.23.41.54;	author jheer;	state Exp;
branches
	2.1.4.1;
next	2.0;

2.0
date	2006.02.12.18.23.45;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.30.09.13.30;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.30;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.30.09.08.04;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.02.01.19.22.43;	author jheer;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2006.02.09.05.12.45;	author jheer;	state Exp;
branches;
next	;

2.1.4.1
date	2008.01.23.23.55.44;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.1
log
@Added stackSpline method in GraphicsLib
Updated PolygonRenderer, including new getter/setter methods
@
text
@package prefuse.render;

import java.awt.Shape;
import java.awt.geom.GeneralPath;

import prefuse.Constants;
import prefuse.data.Schema;
import prefuse.util.GraphicsLib;
import prefuse.visual.VisualItem;


/**
 * <p>Renderer for drawing a polygon, either as a closed shape, or as a
 * series of potentially unclosed curves. VisualItems must have a data field
 * containing an array of floats that tores the polyon. A {@@link Float#NaN}
 * value can be used to mark the end point of the polygon for float arrays
 * larger than their contained points. By default, this renderer will
 * create closed paths, joining the first and last points in the point
 * array if necessary. The {@@link #setClosePath(boolean)} method can be
 * used to render open paths, such as poly-lines or poly-curves.</p>
 * 
 * <p>A polygon edge type parameter (one of 
 * {@@link prefuse.Constants#POLY_TYPE_LINE},
 * {@@link prefuse.Constants#POLY_TYPE_CURVE}, or
 * {@@link prefuse.Constants#POLY_TYPE_STACK}) determines how the
 * edges of the polygon are drawn. The LINE type result in a standard polygon,
 * with straight lines drawn between each sequential point. The CURVE type
 * causes the edges of the polygon to be interpolated as a cardinal spline,
 * giving a smooth blob-like appearance to the shape. The STACK type is similar
 * to the curve type except that straight line segments (not curves) are used
 * when the slope of the line between two adjacent points is zero or infinity.
 * This is useful for drawing stacks of data with otherwise curved edges.</p>
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class PolygonRenderer extends AbstractShapeRenderer {

    /**
     * Default data field for storing polygon (float array) values.
     */
    public static final String POLYGON = "_polygon";
    /**
     * A Schema describing the polygon specification.
     */
    public static final Schema POLYGON_SCHEMA = new Schema();
    static {
        POLYGON_SCHEMA.addColumn(POLYGON, float[].class);
    }
    
    private int     m_polyType = Constants.POLY_TYPE_LINE;
    private float   m_slack = 0.08f;
    private float   m_epsilon = 0.1f;
    private boolean m_closed = true;
    private String  m_polyfield = POLYGON;
    
    private GeneralPath m_path = new GeneralPath();
    
    /**
     * Create a new PolygonRenderer supporting straight lines.
     */
    public PolygonRenderer() {
        this(Constants.EDGE_TYPE_LINE);
    }
    
    /**
     * Create a new PolygonRenderer.
     * @@param polyType the polygon edge type, one of
     * {@@link prefuse.Constants#POLY_TYPE_LINE},
     * {@@link prefuse.Constants#POLY_TYPE_CURVE}, or
     * {@@link prefuse.Constants#POLY_TYPE_STACK}).
     */
    public PolygonRenderer(int polyType) {
        m_polyType = polyType;
    }

    /**
     * Get the polygon line type.
     * @@return the polygon edge type, one of
     * {@@link prefuse.Constants#POLY_TYPE_LINE},
     * {@@link prefuse.Constants#POLY_TYPE_CURVE}, or
     * {@@link prefuse.Constants#POLY_TYPE_STACK}).
     */
    public int getPolyType() {
        return m_polyType;
    }
    
    /**
     * Set the polygon line type.
     * @@param polyType the polygon edge type, one of
     * {@@link prefuse.Constants#POLY_TYPE_LINE},
     * {@@link prefuse.Constants#POLY_TYPE_CURVE}, or
     * {@@link prefuse.Constants#POLY_TYPE_STACK}).
     */
    public void setPolyType(int polyType) {
        if ( polyType < 0 || polyType >= Constants.POLY_TYPE_COUNT ) {
            throw new IllegalArgumentException("Unknown edge type: "+polyType);
        }
        m_polyType = polyType;
    }
    
    /**
     * Indicates if this renderer uses a closed or open path. If true,
     * the renderer will draw closed polygons, if false, the renderer will
     * draw poly-lines or poly-curves.
     * @@return true if paths are closed, false otherwise.
     */
    public boolean isClosePath() {
        return m_closed;
    }

    /**
     * Sets if this renderer uses a closed or open path. If true,
     * the renderer will draw closed polygons, if false, the renderer will
     * @@param closePath true to close paths, false otherwise.
     */
    public void setClosePath(boolean closePath) {
        m_closed = closePath;
    }

    /**
     * Gets the slack parameter for curved lines. The slack parameter
     * determines how tightly the curves are string between the points
     * of the polygon. A value of zero results in straight lines. Values
     * near 0.1 (0.08 is the default) typically result in visible curvature
     * that still follows the polygon boundary nicely.
     * @@return the curve slack parameter
     */
    public float getCurveSlack() {
        return m_slack;
    }

    /**
     * Sets the slack parameter for curved lines. The slack parameter
     * determines how tightly the curves are string between the points
     * of the polygon. A value of zero results in straight lines. Values
     * near 0.1 (0.08 is the default) typically results in visible curvature
     * that still follows the polygon boundary nicely.
     * @@param slack the curve slack parameter to use
     */
    public void setCurveSlack(float slack) {
        m_slack = slack;
    }

    /**
     * @@see prefuse.render.AbstractShapeRenderer#getRawShape(prefuse.visual.VisualItem)
     */
    protected Shape getRawShape(VisualItem item) {
        float[] poly = (float[])item.get(m_polyfield);
        if ( poly == null ) { return null; }
        
        float x = (float)item.getX();
        float y = (float)item.getY();
        
        // initialize the path
        m_path.reset();
        m_path.moveTo(x+poly[0],y+poly[1]);
        
        if ( m_polyType == Constants.POLY_TYPE_LINE )
        {
            // create a polygon
            for ( int i=2; i<poly.length; i+=2 ) {
                if ( Float.isNaN(poly[i]) ) break;
                m_path.lineTo(x+poly[i],y+poly[i+1]);
            }
        }
        else if ( m_polyType == Constants.POLY_TYPE_CURVE )
        {
            // interpolate the polygon points with a cardinal spline
            return GraphicsLib.cardinalSpline(m_path, poly, 
                    m_slack, m_closed, x, y);
        }
        else if ( m_polyType == Constants.POLY_TYPE_STACK )
        {
            // used curved lines, except for non-sloping segments
            return GraphicsLib.stackSpline(m_path, poly, 
                    m_epsilon, m_slack, m_closed, x, y);
        }
        if ( m_closed ) m_path.closePath();
        return m_path;
    }

} // end of class PolygonRenderer
@


2.1.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d6 1
d15 1
a15 1
 * containing an array of floats that stores the polyon. A {@@link Float#NaN}
d21 5
a25 2
 *
 * <p>A polygon edge type parameter determines how the
a37 9
	public static enum PolygonType {
	    /** Use straight-lines for polygon edges */
	    LINE,
	    /** Use curved-lines for polygon edges */
	    CURVE,
	    /** Use curved-lines for polygon edges, but use straight lines for zero-slope edges */
	    STACK;
	}

d49 2
a50 2

    private PolygonType     m_polyType = PolygonType.LINE;
d52 1
a52 1
    private final float   m_epsilon = 0.1f;
d54 4
a57 4
    private final String  m_polyfield = POLYGON;

    private final GeneralPath m_path = new GeneralPath();

d62 1
a62 1
        this(PolygonType.LINE);
d64 1
a64 1

d67 4
a70 1
     * @@param polyType the polygon edge type
d72 1
a72 1
    public PolygonRenderer(PolygonType polyType) {
d78 4
a81 1
     * @@return the polygon edge type
d83 1
a83 1
    public PolygonType getPolyType() {
d86 1
a86 1

d89 9
a97 3
     * @@param polyType the polygon edge type
     */
    public void setPolyType(PolygonType polyType) {
d100 1
a100 1

d147 1
a147 2
    @@Override
	protected Shape getRawShape(VisualItem<?> item) {
d150 1
a150 1

d153 1
a153 1

d157 2
a158 2

        if ( m_polyType == PolygonType.LINE )
d162 1
a162 3
                if ( Float.isNaN(poly[i]) ) {
					break;
				}
d166 1
a166 1
        else if ( m_polyType == PolygonType.CURVE )
d169 1
a169 1
            return GraphicsLib.cardinalSpline(m_path, poly,
d172 1
a172 1
        else if ( m_polyType == PolygonType.STACK )
d175 1
a175 1
            return GraphicsLib.stackSpline(m_path, poly,
d178 1
a178 3
        if ( m_closed ) {
			m_path.closePath();
		}
@


2.0
log
@Merge beta branch back onto main trunk
@
text
@d13 2
a14 1
 * <p>Renderer for drawing a polygon. VisualItems must have a data field
d17 4
a20 1
 * larger than their contained points.</p>
d31 2
a32 2
 * when the slope of the line between two adjacent points is zero. This is
 * useful for drawing stacks of data with otherwise curved edges.</p>
d50 5
a54 3
    private int    m_polyType = Constants.POLY_TYPE_LINE;
    private float  m_controlFrac = 0.10f;
    private String m_polyfield = POLYGON;
d102 43
d158 2
a159 1
        if ( m_polyType == Constants.POLY_TYPE_LINE ) {
d165 4
a168 2
        } else if ( m_polyType == Constants.POLY_TYPE_CURVE ) {
            // create a closed curve and return it
d170 7
a176 12
                    m_controlFrac, true, x, y);
        } else if ( m_polyType == Constants.POLY_TYPE_STACK ) {
            // TODO generalize this correctly
            int np = poly.length/4;
            // set bottom level curve
            GraphicsLib.cardinalSpline(m_path, poly, 0, np, m_controlFrac,false,x,y);
            // straight line to top curve
            m_path.lineTo(x+poly[np*2], y+poly[np*2+1]);
            // set top level curve
            GraphicsLib.cardinalSpline(m_path, poly, np*2, np, m_controlFrac,false,x,y);
            // straight line to bottom curve
            m_path.lineTo(x+poly[0], y+poly[1]);
d178 1
a178 1
        m_path.closePath();
@


1.1
log
@file PolygonRenderer.java was initially added on branch beta.
@
text
@d1 135
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 101
package prefuse.render;

import java.awt.Shape;
import java.awt.geom.GeneralPath;

import prefuse.Constants;
import prefuse.data.Schema;
import prefuse.util.GeometryLib;
import prefuse.visual.VisualItem;


/**
 * Renders a polygon. Polygon points must be assigned prior to rendering,
 * binding an array of float values (alternating x,y value) to the "polygon"
 * viz attribute. For example, create an array pts of polygon points and then
 * use item.setVizAttribute("polygon", pts). A Float.NaN value can be used to
 * mark the end point of the polygon for float arrays larger than their
 * contained points.
 * 
 * The edge type parameter (one of EDGE_LINE or EDGE_CURVE) determines how the
 * edges of the polygon are drawn. EDGE_LINE results in a standard polygon, with
 * straight lines drawn between each sequential point. EDGE_CURVE causes the
 * edges of the polygon to be interpolated as a cardinal spline, giving a smooth
 * blob-like appearance to the shape.
 *  
 * @@version 1.0
 * @@author <a href="http://jheer.org">jeffrey heer</a> prefuse(AT)jheer.org
 */
public class PolygonRenderer extends ShapeRenderer {

    public static final String POLYGON = "_polygon";
    public static final Schema POLYGON_SCHEMA = new Schema();
    static {
        POLYGON_SCHEMA.addColumn(POLYGON, float[].class);
    }
    
    private int    m_polyType = Constants.POLY_TYPE_LINE;
    private float  m_controlFrac = 0.10f;
    private String m_polyfield = POLYGON;
    
    private GeneralPath m_path = new GeneralPath();
    
    public PolygonRenderer() {
        this(Constants.EDGE_TYPE_LINE);
    } //
    
    public PolygonRenderer(int polyType) {
        m_polyType = polyType;
    } //

    public int getPolyType() {
        return m_polyType;
    } //
    
    public void setPolyType(int polyType) {
        if ( polyType < 0 || polyType >= Constants.POLY_TYPE_COUNT ) {
            throw new IllegalArgumentException("Unknown edge type: "+polyType);
        }
        m_polyType = polyType;
    } //
    
    /**
     * @@see prefuse.render.ShapeRenderer#getRawShape(prefuse.a_old.VisualItem)
     */
    protected Shape getRawShape(VisualItem item) {
        float[] poly = (float[])item.get(m_polyfield);
        if ( poly == null ) { return null; }
        
        float x = (float)item.getX();
        float y = (float)item.getY();
        
        // initialize the path
        m_path.reset();
        m_path.moveTo(x+poly[0],y+poly[1]);
        
        if ( m_polyType == Constants.POLY_TYPE_LINE ) {
            // create a polygon
            for ( int i=2; i<poly.length; i+=2 ) {
                if ( Float.isNaN(poly[i]) ) break;
                m_path.lineTo(x+poly[i],y+poly[i+1]);
            }
        } else if ( m_polyType == Constants.POLY_TYPE_CURVE ) {
            // create a closed curve and return it
            return GeometryLib.cardinalSpline(m_path, poly, 
                    m_controlFrac, true, x, y);
        } else if ( m_polyType == Constants.POLY_TYPE_STACK ) {
            int np = poly.length/4;
            // set bottom level curve
            GeometryLib.cardinalSpline(m_path, poly, 0, np, m_controlFrac,false,x,y);
            // straight line to top curve
            m_path.lineTo(x+poly[np*2], y+poly[np*2+1]);
            // set top level curve
            GeometryLib.cardinalSpline(m_path, poly, np*2, np, m_controlFrac,false,x,y);
            // straight line to bottom curve
            m_path.lineTo(x+poly[0], y+poly[1]);
        }
        m_path.closePath();
        return m_path;
    } //

} // end of class PolygonRenderer
@


1.1.2.2
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@d8 1
a8 1
import prefuse.util.GraphicsLib;
d84 1
a84 1
            return GraphicsLib.cardinalSpline(m_path, poly, 
d89 1
a89 1
            GraphicsLib.cardinalSpline(m_path, poly, 0, np, m_controlFrac,false,x,y);
d93 1
a93 1
            GraphicsLib.cardinalSpline(m_path, poly, np*2, np, m_controlFrac,false,x,y);
@


1.1.2.3
log
@Much more javadoc
@
text
@d13 6
a18 4
 * <p>Renderer for drawing a polygon. VisualItems must have a data field
 * containing an array of floats that tores the polyon. A {@@link Float#NaN}
 * value can be used to mark the end point of the polygon for float arrays
 * larger than their contained points.</p>
d20 8
a27 13
 * <p>A polygon edge type parameter (one of 
 * {@@link prefuse.Constants#POLY_TYPE_LINE},
 * {@@link prefuse.Constants#POLY_TYPE_CURVE}, or
 * {@@link prefuse.Constants#POLY_TYPE_STACK}) determines how the
 * edges of the polygon are drawn. The LINE type result in a standard polygon,
 * with straight lines drawn between each sequential point. The CURVE type
 * causes the edges of the polygon to be interpolated as a cardinal spline,
 * giving a smooth blob-like appearance to the shape. The STACK type is similar
 * to the curve type except that straight line segments (not curves) are used
 * when the slope of the line between two adjacent points is zero. This is
 * useful for drawing stacks of data with otherwise curved edges.</p>
 *
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a30 3
    /**
     * Default data field for storing polygon (float array) values.
     */
a31 3
    /**
     * A Schema describing the polygon specification.
     */
a42 3
    /**
     * Create a new PolygonRenderer supporting straight lines.
     */
d45 1
a45 1
    }
a46 7
    /**
     * Create a new PolygonRenderer.
     * @@param polyType the polygon edge type, one of
     * {@@link prefuse.Constants#POLY_TYPE_LINE},
     * {@@link prefuse.Constants#POLY_TYPE_CURVE}, or
     * {@@link prefuse.Constants#POLY_TYPE_STACK}).
     */
d49 1
a49 1
    }
a50 7
    /**
     * Get the polygon line type.
     * @@return the polygon edge type, one of
     * {@@link prefuse.Constants#POLY_TYPE_LINE},
     * {@@link prefuse.Constants#POLY_TYPE_CURVE}, or
     * {@@link prefuse.Constants#POLY_TYPE_STACK}).
     */
d53 1
a53 1
    }
a54 7
    /**
     * Set the polygon line type.
     * @@param polyType the polygon edge type, one of
     * {@@link prefuse.Constants#POLY_TYPE_LINE},
     * {@@link prefuse.Constants#POLY_TYPE_CURVE}, or
     * {@@link prefuse.Constants#POLY_TYPE_STACK}).
     */
d60 1
a60 1
    }
a86 1
            // TODO generalize this correctly
d99 1
a99 1
    }
@


1.1.2.4
log
@Javadoc'd.
@
text
@d96 1
a96 1
     * @@see prefuse.render.ShapeRenderer#getRawShape(prefuse.visual.VisualItem)
@


1.1.2.5
log
@Various pre-release edits
Added RadialGraphView
Added new applets
Renamed ShapeRenderer to AbstractShapeRenderer
Renamed ShapeItemRenderer to ShapeRenderer
Merged TextItemRenderer and ImageItemRenderer into LabelRenderer
Removed demo launcher (and commented line in build.xml), will reintroduce demo launcher later
@
text
@d32 1
a32 1
public class PolygonRenderer extends AbstractShapeRenderer {
d96 1
a96 1
     * @@see prefuse.render.AbstractShapeRenderer#getRawShape(prefuse.visual.VisualItem)
@


