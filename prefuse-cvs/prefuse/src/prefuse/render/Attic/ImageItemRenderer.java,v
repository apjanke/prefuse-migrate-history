head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2005.12.30.09.13.30;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.13.30;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.23.07.17;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.01.30.09.08.04;	author jheer;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2006.02.01.19.22.43;	author jheer;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2006.02.07.00.42.53;	author jheer;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2006.02.09.05.12.45;	author jheer;	state dead;
branches;
next	;


desc
@@


1.1
log
@file ImageItemRenderer.java was initially added on branch beta.
@
text
@@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 448
package prefuse.render;

import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RectangularShape;
import java.awt.geom.RoundRectangle2D;

import prefuse.Constants;
import prefuse.util.ColorLib;
import prefuse.util.FontLib;
import prefuse.util.text.StringAbbreviator;
import prefuse.visual.VisualItem;


/**
 * Renders an item as an image and a text string.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class ImageItemRenderer extends ShapeRenderer {

	protected ImageFactory m_images = new ImageFactory();
	
	protected String m_labelName = "label";
	protected String m_imageName = "image";
	
	protected int m_arcWidth;
	protected int m_arcHeight;
	
	protected int m_xAlign = Constants.CENTER;
	protected int m_yAlign = Constants.CENTER;
	protected int m_horizBorder = 3;
	protected int m_vertBorder  = 0;
	protected int m_imageMargin = 4;
    
	protected int m_maxTextWidth = -1;
	protected int m_abbrevType = StringAbbreviator.TRUNCATE;
	protected StringAbbreviator m_abbrev = StringAbbreviator.getInstance();
	
    protected double m_imageSize = 1.0;
    protected boolean m_showImages = true;
	
	protected Font m_font = new Font("SansSerif", Font.PLAIN, 10);
    protected RectangularShape m_imageBox  = new Rectangle2D.Float();
	protected Point2D     m_tmpPoint = new Point2D.Double();
    protected AffineTransform m_transform = new AffineTransform();

    /**
     * Rounds the corners of the bounding rectangle in which the text
     * string is rendered.
     * @@param arcWidth the width of the curved corner
     * @@param arcHeight the height of the curved corner
     */
    public void setRoundedCorner(int arcWidth, int arcHeight) {
        if ( (arcWidth == 0 || arcHeight == 0) && 
                !(m_imageBox instanceof Rectangle2D) ) {
            m_imageBox = new Rectangle2D.Float();
        } else {
            if ( !(m_imageBox instanceof RoundRectangle2D) )
                m_imageBox = new RoundRectangle2D.Float();
            ((RoundRectangle2D)m_imageBox)
                .setRoundRect(0,0,10,10,arcWidth,arcHeight);                    
        }
        m_arcWidth = arcWidth;
        m_arcHeight = arcHeight;
    } //

	/**
	 * Get the attribute name of the text to draw.
	 * @@return the text attribute name
	 */
	public String getTextField() {
		return m_labelName;
	} //
	
	/**
	 * Set the attribute name for the text to draw.
	 * @@param name the text attribute name
	 */
	public void setTextField(String name) {
		m_labelName = name;
	} //    
    
	/**
	 * Sets the maximum width that should be allowed of the text label.
	 * A value of -1 specifies no limit (this is the default).
	 * @@param maxWidth the maximum width of the text or -1 for no limit
	 */
	public void setMaxTextWidth(int maxWidth) {
	    m_maxTextWidth = maxWidth;
	} //
	
	/**
	 * Sets the type of abbreviation to be used if a text label is longer
	 * than the maximum text width. The value should be one of the constants
	 * provided by the {@@link prefuse.util.text.StringAbbreviator
	 * StringAbbreviator} class. To enable abbreviation, you must first set
	 * the maximum text width using the {@@link #setMaxTextWidth(int) 
	 * setMaxTextWidth} method.
	 * @@param abbrevType the abbreviation type to use. Should be one of the
	 * constants provided by the 
	 * {@@link prefuse.util.text.StringAbbreviator
	 * StringAbbreviator} class (e.g. StringAbbreviator.TRUNCATE or 
	 * StringAbbreviator.NAME).
	 */
	public void setAbbrevType(int abbrevType) {
	    m_abbrevType = abbrevType;
	} //
	
	/**
	 * Returns the text to draw. Subclasses can override this class to
	 * perform custom text rendering.
	 * @@param item the item to represent as a <code>String</code>
	 * @@return a <code>String</code> to draw
	 */
	protected String getText(VisualItem item) {
        if ( m_labelName == null || !item.canGetString(m_labelName) )
            return null;
        
		String s = item.getString(m_labelName);
		if ( m_maxTextWidth > -1 ) {
		    Font font = item.getFont();
		    if ( font == null ) { font = m_font; }
		    FontMetrics fm = DEFAULT_GRAPHICS.getFontMetrics(font);
		    if ( fm.stringWidth(s) > m_maxTextWidth ) {
		        s = m_abbrev.abbreviate(s, m_abbrevType, fm, m_maxTextWidth);			
		    }
		}
		return s;
	} //    
    
    /**
     * Sets the display-time scaling factor for images. This scaling
     * is applied at rendering time, to scale the image immediately upon
     * loading instead, refer to the {@@link #setMaxImageDimensions(int,int)
     * setMaxImageDimensions} method.
     * @@param size the scaling factor for displaying images
     */
    public void setImageSize(double size) {
        m_imageSize = size;
    } //
    
	/**
	 * Sets maximum image dimensions, used to control scaling of loaded images
     * This scaling is enforced immediately upon loading of the image, to 
     * scale the image at rendering time instead, refer to the 
     * {@@link #setImageSize(double) setImageSize} method.
	 * @@param width the max width of images (-1 for no limit)
	 * @@param height the max height of images (-1 for no limit)
	 */
	public void setMaxImageDimensions(int width, int height) {
		m_images.setMaxImageDimensions(width, height);
	} //
	
	/**
	 * Get the attribute name of the image to draw.
	 * @@return the image attribute name
	 */
	public String getImageField() {
		return m_imageName;
	} //
	
	/**
	 * Set the attribute name for the image to draw.
	 * @@param name the image attribute name
	 */
	public void setImageField(String name) {
		m_imageName = name;
	} //	
	
	/**
	 * Returns a URL for the image to draw. Subclasses can override 
	 * this class to perform custom image selection.
	 * @@param item the item for which to select an image to draw
	 * @@return an <code>Image</code> to draw
	 */
	protected String getImageLocation(VisualItem item) {
		return item.getString(m_imageName);
	} //
	
	protected Image getImage(VisualItem item) {
	    if ( !m_showImages ) return null;
		String imageLoc = getImageLocation(item);
		return ( imageLoc == null ? null : m_images.getImage(imageLoc) );
	} //

	/**
	 * @@see prefuse.render.ShapeRenderer#getRawShape(prefuse.a_old.VisualItem)
	 */
	protected Shape getRawShape(VisualItem item) {
        double size = item.getSize();
        
		// get image dimensions
		Image img = getImage(item);
        double is = size*m_imageSize;
		double ih = (img==null ? 0 : is*img.getHeight(null));
		double iw = (img==null ? 0 : is*img.getWidth(null));
		// get text dimensions
		m_font = item.getFont();
        if ( size != 1 )
          m_font = FontLib.getFont(m_font.getName(), m_font.getStyle(),
                      			size*m_font.getSize());
        
		String s = getText(item);
		
        FontMetrics fm = DEFAULT_GRAPHICS.getFontMetrics(m_font);
		int th = (s==null ? 0 : fm.getHeight());
		int tw = (s==null ? 0 : fm.stringWidth(s)+4);
		
		double w = tw + iw + 
                size*(2*m_horizBorder + (tw>0 && iw>0 ? m_imageMargin : 0));
		double h = Math.max(th, ih) + size*2*m_vertBorder;
		
		getAlignedPoint(m_tmpPoint, item, w, h, m_xAlign, m_yAlign);
		
		if ( m_imageBox instanceof RoundRectangle2D ) {
		    ((RoundRectangle2D)m_imageBox)
            	.setRoundRect(m_tmpPoint.getX(),m_tmpPoint.getY(),w,h,
            	        size*m_arcWidth,size*m_arcHeight);
		} else {
		    m_imageBox.setFrame(m_tmpPoint.getX(),m_tmpPoint.getY(),w,h);
		}
		return m_imageBox;
	} //
	
	/**
	 * Helper method, which calculates the top-left co-ordinate of a node
	 * given the node's alignment.
	 */
	protected static void getAlignedPoint(Point2D p, VisualItem item, 
            double w, double h, int xAlign, int yAlign)
    {
		double x = item.getX(), y = item.getY();
		if ( xAlign == Constants.CENTER ) {
			x = x-(w/2);
		} else if ( xAlign == Constants.RIGHT ) {
			x = x-w;
		}
		if ( yAlign == Constants.CENTER ) {
			y = y-(h/2);
		} else if ( yAlign == Constants.BOTTOM ) {
			y = y-h;
		}
		p.setLocation(x,y);
	} //
	
	/**
	 * @@see prefuse.render.Renderer#render(java.awt.Graphics2D, prefuse.a_old.VisualItem)
	 */
	public void render(Graphics2D g, VisualItem item) {
        RectangularShape shape = (RectangularShape)getShape(item);
        if ( shape == null ) return;
        
        Paint strkColor = ColorLib.getColor(item.getStrokeColor());
        Paint fillColor = ColorLib.getColor(item.getFillColor());
        Paint textColor = ColorLib.getColor(item.getTextColor());
        
        // render the fill
        int type = getRenderType(item);
        if ( type==RENDER_TYPE_FILL || type==RENDER_TYPE_DRAW_AND_FILL ) {
            g.setPaint(fillColor);
            g.fill(shape);
        }

        // render image and text next
        String s = getText(item);
		Image img = getImage(item);
		if ( s == null && img == null )
			return;
						
        double size = item.getSize();
		double x = shape.getMinX() + size*m_horizBorder;
			
        // render image
		if ( img != null ) {
//			Composite comp = g.getComposite();
            // enable alpha blending for image, if needed
			// add image_alpha column?
//			if ( fillColor instanceof Color) {
//				int alpha = ((Color)fillColor).getAlpha();
//				if ( alpha < 255 ) {
//					AlphaComposite alphaComp =  AlphaComposite.getInstance(
//                            AlphaComposite.SRC_ATOP, ((float)alpha)/255);
//					g.setComposite(alphaComp);
//				}
//			}
            
            double is = m_imageSize*size;
            double w = is*img.getWidth(null);
            double h = is*img.getHeight(null);
            double y = shape.getMinY() + (shape.getHeight()-h)/2;
            
            m_transform.setTransform(is,0,0,is,x,y);
            g.drawImage(img, m_transform, null);
            
			x += w + (s!=null && w>0 ? size*m_imageMargin : 0);
//			g.setComposite(comp);
		}
        
        // render text
		if ( s != null ) {
			g.setPaint(textColor);
			g.setFont(m_font);
			FontMetrics fm = DEFAULT_GRAPHICS.getFontMetrics(m_font);
			double y = shape.getY() + 
                (shape.getHeight()-fm.getHeight())/2+fm.getAscent();
			g.drawString(s, (float)x+1, (float)y);
		}
	
        // draw border
		if (type==RENDER_TYPE_DRAW || type==RENDER_TYPE_DRAW_AND_FILL) {
		    Stroke st = g.getStroke();
		    Stroke ist = getStroke(item);
		    if ( ist != null ) g.setStroke(ist);
            g.setPaint(strkColor);
            g.draw(shape);
            g.setStroke(st);
        }
	} //
	
    /**
     * Returns the image factory used by this renderer.
     * @@return the image factory
     */
    public ImageFactory getImageFactory() {
        return m_images;
    } //
    
    /**
     * Sets the image factory used by this renderer.
     * @@param ifact the image factory
     */
    public void setImageFactory(ImageFactory ifact) {
        m_images = ifact;
    } //
    
	/**
	 * Get the horizontal alignment of this node with respect to it's
	 * location co-ordinate.
	 * @@return the horizontal alignment
	 */
	public int getHorizontalAlignment() {
		return m_xAlign;
	} //
	
	/**
	 * Get the vertical alignment of this node with respect to it's
	 * location co-ordinate.
	 * @@return the vertical alignment
	 */
	public int getVerticalAlignment() {
		return m_yAlign;
	} //
	
	/**
	 * Set the horizontal alignment of this node with respect to it's
	 * location co-ordinate.
	 * @@param align the horizontal alignment
	 */	
	public void setHorizontalAlignment(int align) {
		m_xAlign = align;
	} //
	
	/**
	 * Set the vertical alignment of this node with respect to it's
	 * location co-ordinate.
	 * @@param align the vertical alignment
	 */	
	public void setVerticalAlignment(int align) {
		m_yAlign = align;
	} //
	
    /**
     * Returns the amount of padding in pixels between text 
     * and the border of this item along the horizontal dimension.
     * @@return the horizontal padding
     */
    public int getHorizontalPadding() {
        return m_horizBorder;
    } //
    
    /**
     * Sets the amount of padding in pixels between text 
     * and the border of this item along the horizontal dimension.
     * @@param xpad the horizontal padding to set
     */
    public void setHorizontalPadding(int xpad) {
        m_horizBorder = xpad;
    } //
    
    /**
     * Returns the amount of padding in pixels between text 
     * and the border of this item along the vertical dimension.
     * @@return the vertical padding
     */
    public int getVerticalPadding() {
        return m_vertBorder;
    } //
    
    /**
     * Sets the amount of padding in pixels between text 
     * and the border of this item along the vertical dimension.
     * @@param ypad the vertical padding
     */
    public void setVerticalPadding(int ypad) {
        m_vertBorder = ypad;
    } //
    
    /**
     * Returns the amount of spacing in pixels between image and text.
     * @@return the space in pixels between image and text
     */
    public int getImageSpacing() {
        return m_imageMargin;
    } //
    
    /**
     * Sets the amount of padding in pixels between image and text.
     * @@param s the space in pixels between image and text
     */
    public void setImageSpacing(int s) {
        m_imageMargin = s;
    } //
    
    /**
     * @@return Returns the m_showImages.
     */
    public boolean isShowImages() {
        return m_showImages;
    } //
    
    /**
     * @@param images The m_showImages to set.
     */
    public void setShowImages(boolean show) {
        m_showImages = show;
    } //
    
} // end of class TextImageItemRenderer
@


1.1.2.2
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@d187 1
a187 4
		if ( item.canGetString(m_imageName) )
			return item.getString(m_imageName);
		else
			return null;
@


1.1.2.3
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d31 18
a48 18
    protected ImageFactory m_images = new ImageFactory();
    
    protected String m_labelName = "label";
    protected String m_imageName = "image";
    
    protected int m_arcWidth;
    protected int m_arcHeight;
    
    protected int m_xAlign = Constants.CENTER;
    protected int m_yAlign = Constants.CENTER;
    protected int m_horizBorder = 3;
    protected int m_vertBorder  = 0;
    protected int m_imageMargin = 4;
    
    protected int m_maxTextWidth = -1;
    protected int m_abbrevType = StringAbbreviator.TRUNCATE;
    protected StringAbbreviator m_abbrev = StringAbbreviator.getInstance();
    
d51 2
a52 2
    
    protected Font m_font = new Font("SansSerif", Font.PLAIN, 10);
d54 1
a54 1
    protected Point2D     m_tmpPoint = new Point2D.Double();
d77 49
a125 49
    /**
     * Get the attribute name of the text to draw.
     * @@return the text attribute name
     */
    public String getTextField() {
        return m_labelName;
    } //
    
    /**
     * Set the attribute name for the text to draw.
     * @@param name the text attribute name
     */
    public void setTextField(String name) {
        m_labelName = name;
    } //    
    
    /**
     * Sets the maximum width that should be allowed of the text label.
     * A value of -1 specifies no limit (this is the default).
     * @@param maxWidth the maximum width of the text or -1 for no limit
     */
    public void setMaxTextWidth(int maxWidth) {
        m_maxTextWidth = maxWidth;
    } //
    
    /**
     * Sets the type of abbreviation to be used if a text label is longer
     * than the maximum text width. The value should be one of the constants
     * provided by the {@@link prefuse.util.text.StringAbbreviator
     * StringAbbreviator} class. To enable abbreviation, you must first set
     * the maximum text width using the {@@link #setMaxTextWidth(int) 
     * setMaxTextWidth} method.
     * @@param abbrevType the abbreviation type to use. Should be one of the
     * constants provided by the 
     * {@@link prefuse.util.text.StringAbbreviator
     * StringAbbreviator} class (e.g. StringAbbreviator.TRUNCATE or 
     * StringAbbreviator.NAME).
     */
    public void setAbbrevType(int abbrevType) {
        m_abbrevType = abbrevType;
    } //
    
    /**
     * Returns the text to draw. Subclasses can override this class to
     * perform custom text rendering.
     * @@param item the item to represent as a <code>String</code>
     * @@return a <code>String</code> to draw
     */
    protected String getText(VisualItem item) {
d129 11
a139 11
        String s = item.getString(m_labelName);
        if ( m_maxTextWidth > -1 ) {
            Font font = item.getFont();
            if ( font == null ) { font = m_font; }
            FontMetrics fm = DEFAULT_GRAPHICS.getFontMetrics(font);
            if ( fm.stringWidth(s) > m_maxTextWidth ) {
                s = m_abbrev.abbreviate(s, m_abbrevType, fm, m_maxTextWidth);           
            }
        }
        return s;
    } //    
d152 2
a153 2
    /**
     * Sets maximum image dimensions, used to control scaling of loaded images
d157 41
a197 41
     * @@param width the max width of images (-1 for no limit)
     * @@param height the max height of images (-1 for no limit)
     */
    public void setMaxImageDimensions(int width, int height) {
        m_images.setMaxImageDimensions(width, height);
    } //
    
    /**
     * Get the attribute name of the image to draw.
     * @@return the image attribute name
     */
    public String getImageField() {
        return m_imageName;
    } //
    
    /**
     * Set the attribute name for the image to draw.
     * @@param name the image attribute name
     */
    public void setImageField(String name) {
        m_imageName = name;
    } //    
    
    /**
     * Returns a URL for the image to draw. Subclasses can override 
     * this class to perform custom image selection.
     * @@param item the item for which to select an image to draw
     * @@return an <code>Image</code> to draw
     */
    protected String getImageLocation(VisualItem item) {
        if ( item.canGetString(m_imageName) )
            return item.getString(m_imageName);
        else
            return null;
    } //
    
    protected Image getImage(VisualItem item) {
        if ( !m_showImages ) return null;
        String imageLoc = getImageLocation(item);
        return ( imageLoc == null ? null : m_images.getImage(imageLoc) );
    } //
d199 4
a202 4
    /**
     * @@see prefuse.render.ShapeRenderer#getRawShape(prefuse.a_old.VisualItem)
     */
    protected Shape getRawShape(VisualItem item) {
d205 2
a206 2
        // get image dimensions
        Image img = getImage(item);
d208 4
a211 4
        double ih = (img==null ? 0 : is*img.getHeight(null));
        double iw = (img==null ? 0 : is*img.getWidth(null));
        // get text dimensions
        m_font = item.getFont();
d214 1
a214 3
                                size*m_font.getSize());
        
        String s = getText(item);
d216 2
d219 4
a222 4
        int th = (s==null ? 0 : fm.getHeight());
        int tw = (s==null ? 0 : fm.stringWidth(s)+4);
        
        double w = tw + iw + 
d224 19
a242 19
        double h = Math.max(th, ih) + size*2*m_vertBorder;
        
        getAlignedPoint(m_tmpPoint, item, w, h, m_xAlign, m_yAlign);
        
        if ( m_imageBox instanceof RoundRectangle2D ) {
            ((RoundRectangle2D)m_imageBox)
                .setRoundRect(m_tmpPoint.getX(),m_tmpPoint.getY(),w,h,
                        size*m_arcWidth,size*m_arcHeight);
        } else {
            m_imageBox.setFrame(m_tmpPoint.getX(),m_tmpPoint.getY(),w,h);
        }
        return m_imageBox;
    } //
    
    /**
     * Helper method, which calculates the top-left co-ordinate of a node
     * given the node's alignment.
     */
    protected static void getAlignedPoint(Point2D p, VisualItem item, 
d245 18
a262 18
        double x = item.getX(), y = item.getY();
        if ( xAlign == Constants.CENTER ) {
            x = x-(w/2);
        } else if ( xAlign == Constants.RIGHT ) {
            x = x-w;
        }
        if ( yAlign == Constants.CENTER ) {
            y = y-(h/2);
        } else if ( yAlign == Constants.BOTTOM ) {
            y = y-h;
        }
        p.setLocation(x,y);
    } //
    
    /**
     * @@see prefuse.render.Renderer#render(java.awt.Graphics2D, prefuse.a_old.VisualItem)
     */
    public void render(Graphics2D g, VisualItem item) {
d279 4
a282 4
        Image img = getImage(item);
        if ( s == null && img == null )
            return;
                        
d284 2
a285 2
        double x = shape.getMinX() + size*m_horizBorder;
            
d287 2
a288 2
        if ( img != null ) {
//          Composite comp = g.getComposite();
d290 5
a294 5
            // add image_alpha column?
//          if ( fillColor instanceof Color) {
//              int alpha = ((Color)fillColor).getAlpha();
//              if ( alpha < 255 ) {
//                  AlphaComposite alphaComp =  AlphaComposite.getInstance(
d296 3
a298 3
//                  g.setComposite(alphaComp);
//              }
//          }
d308 3
a310 3
            x += w + (s!=null && w>0 ? size*m_imageMargin : 0);
//          g.setComposite(comp);
        }
d313 5
a317 5
        if ( s != null ) {
            g.setPaint(textColor);
            g.setFont(m_font);
            FontMetrics fm = DEFAULT_GRAPHICS.getFontMetrics(m_font);
            double y = shape.getY() + 
d319 3
a321 3
            g.drawString(s, (float)x+1, (float)y);
        }
    
d323 4
a326 4
        if (type==RENDER_TYPE_DRAW || type==RENDER_TYPE_DRAW_AND_FILL) {
            Stroke st = g.getStroke();
            Stroke ist = getStroke(item);
            if ( ist != null ) g.setStroke(ist);
d331 2
a332 2
    } //
    
d349 36
a384 36
    /**
     * Get the horizontal alignment of this node with respect to it's
     * location co-ordinate.
     * @@return the horizontal alignment
     */
    public int getHorizontalAlignment() {
        return m_xAlign;
    } //
    
    /**
     * Get the vertical alignment of this node with respect to it's
     * location co-ordinate.
     * @@return the vertical alignment
     */
    public int getVerticalAlignment() {
        return m_yAlign;
    } //
    
    /**
     * Set the horizontal alignment of this node with respect to it's
     * location co-ordinate.
     * @@param align the horizontal alignment
     */ 
    public void setHorizontalAlignment(int align) {
        m_xAlign = align;
    } //
    
    /**
     * Set the vertical alignment of this node with respect to it's
     * location co-ordinate.
     * @@param align the vertical alignment
     */ 
    public void setVerticalAlignment(int align) {
        m_yAlign = align;
    } //
    
@


1.1.2.4
log
@Much more javadoc
@
text
@d24 1
a24 1
 * Renderer that renders an item using both an image and a text string.
d26 2
a27 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a50 1
    protected boolean m_showText = true;
a56 21
    
    /**
     * Create a new ImageItemRenderer, using "label" as the text data
     * field and "image" as the image item field.
     */
    public ImageItemRenderer() {
        super();
    }
    
    /**
     * Create a new ImageItemRenderer.
     * @@param textField the text data field for looking up labels
     * @@param imageField the image data field for looking up image locations
     */
    public ImageItemRenderer(String textField, String imageField) {
        m_labelName = textField;
        m_imageName = imageField;
    }
    
    // ------------------------------------------------------------------------
    
d75 1
a75 1
    }
d83 1
a83 1
    }
d91 1
a91 1
    }   
d100 1
a100 1
    }
d117 1
a117 1
    }
d139 1
a139 1
    }  
d150 1
a150 1
    }
d162 1
a162 1
    }
d170 1
a170 1
    }
d178 1
a178 1
    }   
d191 1
a191 1
    }
d197 1
a197 1
    }
d216 1
a216 1
        String s = ( m_showText ? getText(item) : null );
d236 1
a236 1
    }
d257 1
a257 1
    }
d278 1
a278 1
        String s = ( m_showText ? getText(item) : null );
d331 1
a331 1
    }
d339 1
a339 1
    }
d347 1
a347 1
    }
d352 1
a352 3
     * @@return the horizontal alignment, one of
     * {@@link prefuse.Constants#LEFT}, {@@link prefuse.Constants#RIGHT}, or
     * {@@link prefuse.Constants#CENTER}.
d356 1
a356 1
    }
d361 1
a361 3
     * @@return the vertical alignment, one of
     * {@@link prefuse.Constants#TOP}, {@@link prefuse.Constants#BOTTOM}, or
     * {@@link prefuse.Constants#CENTER}.
d365 1
a365 1
    }
d370 1
a370 3
     * @@param align the horizontal alignment, one of
     * {@@link prefuse.Constants#LEFT}, {@@link prefuse.Constants#RIGHT}, or
     * {@@link prefuse.Constants#CENTER}.
d374 1
a374 1
    }
d379 1
a379 3
     * @@param align the vertical alignment, one of
     * {@@link prefuse.Constants#TOP}, {@@link prefuse.Constants#BOTTOM}, or
     * {@@link prefuse.Constants#CENTER}.
d383 1
a383 1
    }
d392 1
a392 1
    }
d401 1
a401 1
    }
d410 1
a410 1
    }
d419 1
a419 1
    }
d427 1
a427 1
    }
d435 1
a435 1
    }
d438 1
a438 2
     * Indicates if this renderer will draw images.
     * @@return true if image rendering is enabled, false otherwise
d442 1
a442 1
    }
d445 1
a445 2
     * Sets if this renderer will draw images.
     * @@param show true to enable image rendering, false otherwise
d449 1
a449 17
    }
    
    /**
     * Indicates if this renderer will draw text.
     * @@return true if text rendering is enabled, false otherwise
     */
    public boolean isShowText() {
        return m_showText;
    }
    
    /**
     * Sets if this renderer will draw text.
     * @@param show true to enable text rendering, false otherwise
     */
    public void setShowText(boolean show) {
        m_showText = show;
    }
d451 1
a451 1
} // end of class ImageItemRenderer
@


1.1.2.5
log
@Javadoc'd.
@
text
@d221 1
a221 1
     * @@see prefuse.render.ShapeRenderer#getRawShape(prefuse.visual.VisualItem)
d281 1
a281 1
     * @@see prefuse.render.Renderer#render(java.awt.Graphics2D, prefuse.visual.VisualItem)
@


1.1.2.6
log
@Intermediate commit in run-up to release.
Upgraded Tuple, Node, and Edge to the data package.
Renamed "Function" classes to "Action" classes.
Added Shape to VisualItem Schema.
Added ShapeActions, moved Shape constants to Constants interface.
Added Background image handling to the Display class.
Added social network data file.
@
text
@d19 1
a19 1
import prefuse.util.StringLib;
d45 2
d124 17
d156 1
a156 1
                s = StringLib.abbreviate(s, fm, m_maxTextWidth);           
@


1.1.2.7
log
@Various pre-release edits
Added RadialGraphView
Added new applets
Renamed ShapeRenderer to AbstractShapeRenderer
Renamed ShapeItemRenderer to ShapeRenderer
Merged TextItemRenderer and ImageItemRenderer into LabelRenderer
Removed demo launcher (and commented line in build.xml), will reintroduce demo launcher later
@
text
@@


