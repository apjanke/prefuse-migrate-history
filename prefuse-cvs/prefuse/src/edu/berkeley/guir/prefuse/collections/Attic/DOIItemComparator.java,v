head	1.4;
access;
symbols
	alpha:1.3.0.2
	Root_alpha:1.3
	prefuse-alpha-20051229:1.3
	P20050401_Alpha_PreCHI:1.3;
locks; strict;
comment	@# @;


1.4
date	2006.02.11.06.38.46;	author jheer;	state dead;
branches;
next	1.3;

1.3
date	2004.03.23.19.34.05;	author jheer;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2004.03.23.03.54.55;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.10.12;	author jheer;	state Exp;
branches;
next	;

1.3.4.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches;
next	;


desc
@@


1.4
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.collections;

import java.util.Comparator;

import edu.berkeley.guir.prefuse.AggregateItem;
import edu.berkeley.guir.prefuse.EdgeItem;
import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.NodeItem;

/**
 * Compares items based upon computed degree-of-interest (DOI) values.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class DOIItemComparator implements Comparator {

	/**
	 * @@see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
	 */
	public int compare(Object o1, Object o2) {
		if ( !(o1 instanceof VisualItem && o2 instanceof VisualItem) ) {
			throw new IllegalArgumentException();
		}
		
		VisualItem item1 = (VisualItem)o1;
		VisualItem item2 = (VisualItem)o2;
		
		if ( item1 instanceof NodeItem ) {
			if ( item2 instanceof NodeItem ) {
				double doi1 = ((NodeItem)item1).getDOI();
				double doi2 = ((NodeItem)item2).getDOI();				
				return ( doi1 > doi2 ? 1 : ( doi1 == doi2 ? 0 : -1 ) );				
			} else {
				return 1;
			}
		} else if ( item2 instanceof NodeItem ) {
			return -1;
		} else if ( item1 instanceof EdgeItem ) {
			if ( item2 instanceof EdgeItem ) {
                EdgeItem e1 = (EdgeItem)item1, e2 = (EdgeItem)item2;
				double doi1a = ((NodeItem)e1.getFirstNode()).getDOI();
				double doi2a = ((NodeItem)e2.getFirstNode()).getDOI();
				double doi1b = ((NodeItem)e1.getSecondNode()).getDOI();
				double doi2b = ((NodeItem)e2.getSecondNode()).getDOI();
				double doi1 = Math.max(doi1a, doi1b);
				double doi2 = Math.max(doi2a, doi2b);				
				return ( doi1 > doi2 ? 1 : ( doi1 == doi2 ? 0 : -1 ) );
			} else {
				return 1;
			}
		} else if ( item2 instanceof EdgeItem ) {
			return -1;
		} else if ( item1 instanceof AggregateItem ) {
			if ( item2 instanceof AggregateItem ) {
				double doi1 = ((AggregateItem)item1).getNodeItem().getDOI();
				double doi2 = ((AggregateItem)item2).getNodeItem().getDOI();				
				return ( doi1 > doi2 ? 1 : ( doi1 == doi2 ? 0 : -1 ) );
			} else {
				return 1;
			}
		} else if ( item2 instanceof AggregateItem ) {
			return -1;
		} else {
			return 0;
		}
	} //

} // end of class DefaultItemComparator
@


1.3
log
@More Javadoc updates
@
text
@@


1.3.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.2
log
@Major refactor
@
text
@d11 1
a11 5
 * Basic comparator that treats VisualItems in the following manner:
 *   NodeItem > EdgeItem > AggregateItem
 * All items of the same type are considered equal.
 * 
 * Jun 2, 2003 - jheer - Created class
d14 1
a14 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
@


1.1
log
@Initial import
@
text
@d7 1
a7 1
import edu.berkeley.guir.prefuse.GraphItem;
d11 1
a11 1
 * Basic comparator that treats GraphItems in the following manner:
d26 1
a26 1
		if ( !(o1 instanceof GraphItem && o2 instanceof GraphItem) ) {
d30 2
a31 2
		GraphItem item1 = (GraphItem)o1;
		GraphItem item2 = (GraphItem)o2;
d45 5
a49 4
				double doi1a = ((EdgeItem)item1).getFirstNode().getDOI();
				double doi2a = ((EdgeItem)item2).getFirstNode().getDOI();
				double doi1b = ((EdgeItem)item1).getSecondNode().getDOI();
				double doi2b = ((EdgeItem)item2).getSecondNode().getDOI();
@

