head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2005.01.05.02.35.27;	author jheer;	state dead;
branches;
next	1.3;

1.3
date	2004.03.23.03.54.55;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.16.03.05.16;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.27.21.35.18;	author jheer;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Created new package for FocusSet implementations
@
text
@package edu.berkeley.guir.prefuse.util;

import java.util.Collection;
import java.util.Iterator;

import edu.berkeley.guir.prefuse.event.FocusListener;
import edu.berkeley.guir.prefuse.graph.Entity;

/**
 * An interface for sets of currently "in focus" entities, such
 * as those corresponding to clicked or selected items, or
 * search results. As these various entities may not yet be visualized
 * when they are added to the set, the FocusSet manages collections
 * of abstract graph Entity instances, rather than their visualized
 * VisualItem analogues.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public interface FocusSet {

    /**
     * Adds a listener to monitor changes to this FocusSet.
     * @@param fl the FocusListener to add
     */
    public void addFocusListener(FocusListener fl);
    
    /**
     * Removes a listener currently monitoring this FocusSet.
     * @@param fl the FocusListener to remove
     */
    public void removeFocusListener(FocusListener fl);
    
    /**
     * Adds a new Entity to this FocusSet.
     * @@param focus the Entity to add
     */
    public void add(Entity focus);
    
    /**
     * Adds a Collection of Entity instances to this FocusSet. All members of
     * this Collection should be of type Entity.
     * @@param foci the Collection of Entity instances to add.
     */
    public void add(Collection foci);
    
    /**
     * Removes an Entity from this FocusSet.
     * @@param focus the Entity to remove
     */
    public void remove(Entity focus);
    
    /**
     * Removes a Collection of Entity instances from this FocusSet. All members 
     * of this Collection should already be members of this set.
     * @@param foci the Collection of Entity instances to remove.
     */
    public void remove(Collection foci);
    
    /**
     * Sets an Entity as the single focus in this FocusSet. This causes any
     * previous members of the focus set to be removed.
     * @@param focus the Entity to set
     */
    public void set(Entity focus);
    
    /**
     * Sets a Collection of Entity instances as the foci in this FocusSet. 
     * All members of this Collection should of type Entity. This method
     * causes any previous members of the focus set to be removed.
     * @@param foci the Collection of Entity instances to remove.
     */
    public void set(Collection foci);
    
    /**
     * Clears this FocusSet, removing all current members.
     */
    public void clear();
    
    /**
     * Returns an Iterator over the members of this FocusSet.
     * @@return an Iterator over the members of this FocusSet
     */
    public Iterator iterator();
    
    /**
     * Returns the size of this FocusSet.
     * @@return the number of elements in this FocusSet
     */
    public int size();
    
    /**
     * Indicates if a given Entity is contained within this FocusSet.
     * @@param entity the Entity to check for containment
     * @@return true if this Entity is in the FocusSet, false otherwise
     */
    public boolean contains(Entity entity);
    
} // end of interface FocusSet
@


1.3
log
@Major refactor
@
text
@@


1.2
log
@More Javadoc updates
@
text
@d15 1
a15 1
 * GraphItem analogues.
@


1.1
log
@Major commit of updated architecture
@
text
@d10 6
a15 2
 * 
 * Feb 19, 2004 - jheer - Created class
d22 4
d27 5
d34 4
d39 6
d46 5
d52 6
d59 6
d66 7
d74 4
d80 4
d85 5
d91 6
@

