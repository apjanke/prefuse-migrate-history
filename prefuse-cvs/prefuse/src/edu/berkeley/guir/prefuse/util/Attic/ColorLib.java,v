head	1.5;
access;
symbols
	alpha:1.4.0.2
	Root_alpha:1.4
	prefuse-alpha-20051229:1.4
	P20050401_Alpha_PreCHI:1.4;
locks; strict;
comment	@# @;


1.5
date	2006.02.12.18.23.42;	author jheer;	state dead;
branches;
next	1.4;

1.4
date	2005.03.23.02.41.24;	author jheer;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2004.04.15.01.50.25;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.10.17.39.01;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.23.03.54.55;	author jheer;	state Exp;
branches;
next	;

1.4.4.1
date	2005.12.30.09.13.32;	author jheer;	state dead;
branches;
next	;


desc
@@


1.5
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.util;

import java.awt.Color;
import java.util.HashMap;

/**
 * Maintains a cache of colors and other useful color computation
 * routines.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class ColorLib {

    private static final HashMap colorMap = new HashMap();
    private static int misses = 0;
    private static int lookups = 0;
    
    public static Color getColor(float r, float g, float b, float a) {
        int rgba =
           ((((int)(a*255+0.5)) & 0xFF) << 24) |
           ((((int)(r*255+0.5)) & 0xFF) << 16) | 
           ((((int)(g*255+0.5)) & 0xFF) <<  8) |
           (((int)(b*255+0.5)) & 0xFF);
        return getColor(rgba);
    } //
    
    public static Color getColor(float r, float g, float b) {
        return getColor(r,g,b,1.0f);
    } //
    
    public static Color getColor(int r, int g, int b, int a) {
        int rgba = ((a & 0xFF) << 24) | ((r & 0xFF) << 16) |
                   ((g & 0xFF) << 8)  | ((b & 0xFF) << 0);
        return getColor(rgba);
    } //
    
    public static Color getColor(int r, int g, int b) {
        return getColor(r,g,b,255);
    } //
    
    public static Color getColor(int rgba) {
        Integer key = new Integer(rgba);
        Color c = null;
        if ( (c=(Color)colorMap.get(key)) == null ) {
            c = new Color(rgba,true);
            colorMap.put(key,c);
            misses++;
        }
        lookups++;
        return c;
    } //
    
    public static int getCacheMissCount() {
        return misses;
    } //
    
    public static int getCacheLookupCount() {
        return lookups;
    } //
    
    public static void clearCache() {
        colorMap.clear();
    } //
    
    public static Color getIntermediateColor(Color c1, Color c2, double frac) {
        return getColor(
                (int)Math.round(frac*c2.getRed()   + (1-frac)*c1.getRed()),
                (int)Math.round(frac*c2.getGreen() + (1-frac)*c1.getGreen()),
                (int)Math.round(frac*c2.getBlue()  + (1-frac)*c1.getBlue()),
                (int)Math.round(frac*c2.getAlpha() + (1-frac)*c1.getAlpha()));
    } //
    
} // end of class ColorLib
@


1.4
log
@Utility updates
@
text
@@


1.4.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.3
log
@Added additional color accessors
@
text
@d46 1
a46 1
            c = new Color(rgba);
@


1.2
log
@Fixed bug in float-based color loading
@
text
@d28 4
d38 4
@


1.1
log
@Major refactor
@
text
@d21 4
a24 4
           ((((int)(r*255+0.5)) & 0xFF) << 24) |
           ((((int)(g*255+0.5)) & 0xFF) << 16) | 
           ((((int)(b*255+0.5)) & 0xFF) <<  8) |
           (((int)(a*255+0.5)) & 0xFF);
@

