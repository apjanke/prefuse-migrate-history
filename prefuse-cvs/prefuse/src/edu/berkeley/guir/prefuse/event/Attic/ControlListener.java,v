head	1.5;
access;
symbols
	alpha:1.4.0.2
	Root_alpha:1.4
	prefuse-alpha-20051229:1.4
	P20050401_Alpha_PreCHI:1.4;
locks; strict;
comment	@# @;


1.5
date	2006.02.11.06.38.46;	author jheer;	state dead;
branches;
next	1.4;

1.4
date	2004.03.23.19.34.05;	author jheer;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2004.03.23.03.54.55;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.06.00.48.08;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.09.59;	author jheer;	state Exp;
branches;
next	;

1.4.4.1
date	2005.12.30.09.16.18;	author jheer;	state dead;
branches;
next	;


desc
@@


1.5
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.event;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.util.EventListener;

import edu.berkeley.guir.prefuse.VisualItem;

/**
 * Listener interface for processing user interface events on 
 * a prefuse Display.
 * 
 * @@version 1.0
 * @@author newbergr
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public interface ControlListener extends 
    EventListener, MouseListener, MouseMotionListener, MouseWheelListener, KeyListener
{
	
	//// == Actions performed on VisualItems ===================================

	/**
	 * Invoked when a mouse button is pressed on a VisualItem and then dragged.
	 */
	public void itemDragged(VisualItem item, MouseEvent e);
	
	/**
	 * Invoked when the mouse cursor has been moved onto a VisualItem but
	 *  no buttons have been pushed.
	 */
	public void itemMoved(VisualItem item, MouseEvent e);
	
	/**
	 * Invoked when the mouse wheel is rotated while the mouse is over a
	 *  VisualItem.
	 */
	public void itemWheelMoved(VisualItem item, MouseWheelEvent e);
	
	/**
	 * Invoked when the mouse button has been clicked (pressed and released) on
	 *  a VisualItem.
	 */
	public void itemClicked(VisualItem item, MouseEvent e);
	
	/**
	 * Invoked when a mouse button has been pressed on a VisualItem.
	 */
	public void itemPressed(VisualItem item, MouseEvent e);
	
	/**
	 * Invoked when a mouse button has been released on a VisualItem.
	 */
	public void itemReleased(VisualItem item, MouseEvent e);
	
	/**
	 * Invoked when the mouse enters a VisualItem.
	 */
	public void itemEntered(VisualItem item, MouseEvent e);
	
	/**
	 * Invoked when the mouse exits a VisualItem.
	 */
	public void itemExited(VisualItem item, MouseEvent e);
	
	/**
	 * Invoked when a key has been pressed, while the mouse is over
	 * 	a VisualItem.
	 */
	public void itemKeyPressed(VisualItem item, KeyEvent e);
	
	/**
	 * Invoked when a key has been released, while the mouse is over
	 *  a VisualItem.
	 */
	public void itemKeyReleased(VisualItem item, KeyEvent e);
	
	/**
	 * Invoked when a key has been typed, while the mouse is over
	 *  a VisualItem.
	 */
	public void itemKeyTyped(VisualItem item, KeyEvent e);
	
	
	//// == Actions performed on the Display ==================================
	
	/**
	 * Invoked when the mouse enters the Display.
	 */
	public void mouseEntered(MouseEvent e);
	
	/**
	 * Invoked when the mouse exits the Display.
	 */
	public void mouseExited(MouseEvent e);
	
	/**
	 * Invoked when a mouse button has been pressed on the Display but NOT
	 *  on a VisualItem.
	 */
	public void mousePressed(MouseEvent e);
	
	/**
	 * Invoked when a mouse button has been released on the Display but NOT
	 *  on a VisualItem.
	 */
	public void mouseReleased(MouseEvent e);
	
	/**
	 * Invoked when the mouse button has been clicked (pressed and released) on
	 *  the Display, but NOT on a VisualItem.
	 */
	public void mouseClicked(MouseEvent e);
	
	/**
	 * Invoked when a mouse button is pressed on the Display (but NOT a 
	 *  VisualItem) and then dragged.
	 */
	public void mouseDragged(MouseEvent e);
	
	/**
	 * Invoked when the mouse cursor has been moved on the Display (but NOT a
	 * VisualItem) and no buttons have been pushed.
	 */
	public void mouseMoved(MouseEvent e);
	
	/**
	 * Invoked when the mouse wheel is rotated while the mouse is over the
	 *  Display (but NOT a VisualItem).
	 */
	public void mouseWheelMoved(MouseWheelEvent e);
	
	/**
	 * Invoked when a key has been pressed, while the mouse is NOT 
	 *  over a VisualItem.
	 */
	public void keyPressed(KeyEvent e);
	
	/**
	 * Invoked when a key has been released, while the mouse is NOT
	 *  over a VisualItem.
	 */
	public void keyReleased(KeyEvent e);
	
	/**
	 * Invoked when a key has been typed, while the mouse is NOT
	 *  over a VisualItem.
	 */
	public void keyTyped(KeyEvent e);

} // end of inteface ControlListener
@


1.4
log
@More Javadoc updates
@
text
@@


1.4.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.3
log
@Major refactor
@
text
@d20 1
a20 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
@


1.2
log
@Updated ControlListener to extend appropriate interfaces
@
text
@d12 1
a12 1
import edu.berkeley.guir.prefuse.GraphItem;
d26 1
a26 1
	//// == Actions performed on GraphItems ===================================
d29 1
a29 1
	 * Invoked when a mouse button is pressed on a GraphItem and then dragged.
d31 1
a31 1
	public void itemDragged(GraphItem item, MouseEvent e);
d34 1
a34 1
	 * Invoked when the mouse cursor has been moved onto a GraphItem but
d37 1
a37 1
	public void itemMoved(GraphItem item, MouseEvent e);
d41 1
a41 1
	 *  GraphItem.
d43 1
a43 1
	public void itemWheelMoved(GraphItem item, MouseWheelEvent e);
d47 1
a47 1
	 *  a GraphItem.
d49 1
a49 1
	public void itemClicked(GraphItem item, MouseEvent e);
d52 1
a52 1
	 * Invoked when a mouse button has been pressed on a GraphItem.
d54 1
a54 1
	public void itemPressed(GraphItem item, MouseEvent e);
d57 1
a57 1
	 * Invoked when a mouse button has been released on a GraphItem.
d59 1
a59 1
	public void itemReleased(GraphItem item, MouseEvent e);
d62 1
a62 1
	 * Invoked when the mouse enters a GraphItem.
d64 1
a64 1
	public void itemEntered(GraphItem item, MouseEvent e);
d67 1
a67 1
	 * Invoked when the mouse exits a GraphItem.
d69 1
a69 1
	public void itemExited(GraphItem item, MouseEvent e);
d73 1
a73 1
	 * 	a GraphItem.
d75 1
a75 1
	public void itemKeyPressed(GraphItem item, KeyEvent e);
d79 1
a79 1
	 *  a GraphItem.
d81 1
a81 1
	public void itemKeyReleased(GraphItem item, KeyEvent e);
d85 1
a85 1
	 *  a GraphItem.
d87 1
a87 1
	public void itemKeyTyped(GraphItem item, KeyEvent e);
d104 1
a104 1
	 *  on a GraphItem.
d110 1
a110 1
	 *  on a GraphItem.
d116 1
a116 1
	 *  the Display, but NOT on a GraphItem.
d122 1
a122 1
	 *  GraphItem) and then dragged.
d128 1
a128 1
	 * GraphItem) and no buttons have been pushed.
d134 1
a134 1
	 *  Display (but NOT a GraphItem).
d140 1
a140 1
	 *  over a GraphItem.
d146 1
a146 1
	 *  over a GraphItem.
d152 1
a152 1
	 *  over a GraphItem.
@


1.1
log
@Initial import
@
text
@d4 1
d6 2
d9 1
d22 3
a24 1
public interface ControlListener extends EventListener {
@

