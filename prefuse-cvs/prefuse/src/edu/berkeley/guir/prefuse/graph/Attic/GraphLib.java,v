head	1.13;
access;
symbols
	alpha:1.12.0.2
	Root_alpha:1.12
	prefuse-alpha-20051229:1.12
	P20050401_Alpha_PreCHI:1.10;
locks; strict;
comment	@# @;


1.13
date	2006.02.12.18.23.41;	author jheer;	state dead;
branches;
next	1.12;

1.12
date	2005.08.31.22.51.52;	author jheer;	state Exp;
branches
	1.12.4.1;
next	1.11;

1.11
date	2005.08.26.17.16.13;	author jheer;	state Exp;
branches;
next	1.10;

1.10
date	2004.11.10.01.51.54;	author jheer;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.08.02.53.32;	author jheer;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.25.04.35.38;	author jheer;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.23.03.54.55;	author jheer;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.11.19.11.12;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.07.18.01.47;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.07.03.33.18;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.06.00.48.37;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.27.21.35.46;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.10.11;	author jheer;	state Exp;
branches;
next	;

1.12.4.1
date	2005.12.30.09.16.18;	author jheer;	state dead;
branches;
next	;


desc
@@


1.13
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.graph;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;

import edu.berkeley.guir.prefuse.collections.BreadthFirstGraphIterator;
import edu.berkeley.guir.prefuse.collections.EdgeNodeComparator;

/**
 * Library of routines for creating or performing operations on graphs
 *  and trees.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class GraphLib {

    // ========================================================================
    // == GRAPH SEARCH METHODS ================================================
    
    public static Node[] search(Graph g, String attr, String value) {
        ArrayList nodes = new ArrayList();
        Iterator iter = g.getNodes();
        while ( iter.hasNext() ) {
            Node n = (Node)iter.next();
            String val = n.getAttribute(attr);
            if ( val != null && val.equals(value) ) {
                nodes.add(n);
            }
        }
        return (Node[])nodes.toArray(new Node[nodes.size()]);
    } //
    
    public static Node[] getMostConnectedNodes(Graph g) {
        ArrayList nodes = new ArrayList();
        int size = -1, c;
        Iterator iter = g.getNodes();
        while ( iter.hasNext() ) {
            Node n = (Node)iter.next();
            if ( (c=n.getEdgeCount()) > size ) {
                size = c;
                nodes.clear();
                nodes.add(n);
            } else if ( c == size ) {
                nodes.add(n);
            }
        }
        return (Node[])nodes.toArray(new Node[nodes.size()]);
    } //
    
    // ========================================================================
    // == TREE METHODS ========================================================
    
    /**
     * Returns a Tree object, representing a breadth-first-search tree
     * rooted at the specified node. This is one useful way of imposing
     * a tree structure on a general graph. The only requirement is that
     * the graph nodes are instances of the TreeNode class.
     * @@param r the root of the breadth-first-search.
     * @@return the breadth-first-search tree.
     */
    public static Tree breadthFirstTree(TreeNode r) {
        if ( r == null ) { return null; }
        
        Iterator iter = new BreadthFirstGraphIterator(r);
        while ( iter.hasNext() ) {
            TreeNode n = (TreeNode)iter.next();
            n.removeAllAsChildren();
        }
        
        HashSet    visited = new HashSet();
        LinkedList queue   = new LinkedList();
        queue.add(r);
        visited.add(r);
        
        r.setParentEdge(null);
        
        while ( !queue.isEmpty() ) {
            TreeNode n = (TreeNode)queue.removeFirst();     
            iter = n.getNeighbors();
            while ( iter.hasNext() ) {
                TreeNode c = (TreeNode)iter.next();
                if ( !visited.contains(c) ) {
                    n.setAsChild(c);
                    queue.add(c);
                    visited.add(c);
                }
            }
        }
        return new DefaultTree(r);
    } //
    
    /**
     * Sorts a tree, ordering each sibling group according to the provided
     * comparator
     * @@param tree the Tree to sort
     * @@param comp the comparator that determines the sorting order
     */
    public static void sortTree(Tree tree, Comparator comp) {
        TreeNode root = tree.getRoot();
        sortHelper(root, new EdgeNodeComparator(comp));
    } //

    private static void sortHelper(TreeNode node, EdgeNodeComparator c) {
        ArrayList list = new ArrayList();
        
        // copy each child node into the buffer list
        Iterator iter = node.getChildEdges();
        while ( iter.hasNext() )
            list.add(iter.next());
        
        // set up the comparator, sort the list according to it
        c.setIgnoredNode(node);
        Collections.sort(list, c);
        
        // remove all children from the node
        node.removeAllChildren();
        
        // add the children back in their sorted order
        iter = list.iterator();
        while ( iter.hasNext() ) {
            Edge e = (Edge)iter.next();
            node.addChild(e);
            sortHelper((TreeNode)e.getAdjacentNode(node), c);
        }
    } //
    
    /**
     * Helper method for index hunting.
     */
    public static int nearestIndex(TreeNode n, TreeNode p) {
        int idx = 0;
        for ( int i=0; i<n.getEdgeCount(); i++ ) {
            TreeNode c = (TreeNode)n.getNeighbor(i);
            if ( c == p )
                return idx;
            else if ( c.getParent() == n ) {
                idx++;
            }
        }
        return n.getChildCount();       
    } //
    
    public static int getTreeHeight(Tree t) {
        TreeNode r = t.getRoot();
        return getTreeHeightHelper(r,0);
    } //
    
    private static int getTreeHeightHelper(TreeNode n, int height) {
        int h = height;
        if ( n.getChildCount() > 0 ) {
            Iterator childIter = n.getChildren();
            while ( childIter.hasNext() ) {
                TreeNode c = (TreeNode)childIter.next();
                h = Math.max(h, getTreeHeightHelper(c,height+1));
            }
        }
        return h;
    } //
    
    
    // ========================================================================
    // == GRAPH CREATION ROUTINES =============================================
    
    /**
     * Builds a completely unconnected (edge-free) graph with the given 
     * number of nodes
     * @@param n the number of nodes
     * @@return a graph with n nodes and no edges
     */
    public static Graph getNodes(int n) {
        Graph g = new DefaultGraph();
        for ( int i=0; i < n; i++ ) {
            Node nn = new DefaultTreeNode();
            nn.setAttribute("label",String.valueOf(i));
            g.addNode(nn);
        }
        return g;
    } //
    
    /**
     * Builds a "star" graph with one central hub connected to the given
     * number of satellite nodes.
     * @@param n the number of points of the star
     * @@return a "star" graph with n points, for a total of n+1 nodes
     */
    public static Graph getStar(int n) {
        Graph g = new DefaultGraph();
        Node r = new DefaultTreeNode();
        r.setAttribute("label","0");
        g.addNode(r);
        for ( int i=1; i <= n; i++ ) {
            Node nn = new DefaultTreeNode();
            nn.setAttribute("label",String.valueOf(i));
            g.addNode(nn);
            Edge e = new DefaultEdge(nn, r);
            g.addEdge(e);
        }
        return g;
    } //
    
    /**
     * Returns a clique of given size. A clique is a graph in which every node
     * is a neighbor of every other node.
     * @@param n the number of nodes in the graph
     * @@return a clique of size n
     */
    public static Graph getClique(int n) {
        Graph g = new DefaultGraph();
        Node nodes[] = new Node[n];
        for ( int i = 0; i < n; i++ ) {
            nodes[i] = new DefaultTreeNode();
            nodes[i].setAttribute("label", String.valueOf(i));
            g.addNode(nodes[i]);
        }
        for ( int i = 0; i < n; i++ ) {
            for ( int j = i; j < n; j++ )
                if ( i != j )
                    g.addEdge(new DefaultEdge(nodes[i], nodes[j]));
        }
        return g;
    } //
    
    /**
     * Returns a graph structured as an m-by-n grid.
     * @@param m the number of rows of the grid
     * @@param n the number of columns of the grid
     * @@return an m-by-n grid structured graph
     */
    public static Graph getGrid(int m, int n) {
        Graph g = new DefaultGraph();
        Node[] nodes = new Node[m*n];
        for ( int i = 0; i < m*n; i++ ) {
            nodes[i] = new DefaultTreeNode();
            nodes[i].setAttribute("label", String.valueOf(i));
            g.addNode(nodes[i]);
            if ( i >= n )
                g.addEdge(new DefaultEdge(nodes[i-n], nodes[i]));
            if ( i % n != 0 )
                g.addEdge(new DefaultEdge(nodes[i-1], nodes[i]));
        }
        return g;
    } //
    
} // end of class GraphLib
@


1.12
log
@Fixed removeAllChildren bug in NodeItem, revealed by GraphLib.sortTree
@
text
@@


1.12.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.11
log
@Fixed bug: sortHelper was using an iterator over child nodes rather than child edges.
@
text
@d110 2
d115 2
d119 2
d122 2
@


1.10
log
@Minor updates
@
text
@d110 1
a110 1
        Iterator iter = node.getChildren();
@


1.9
log
@Fixed multicaster bug, other small updates
@
text
@d22 16
d240 1
a240 1

@


1.8
log
@A whole lot of update
@
text
@d124 18
@


1.7
log
@Major refactor
@
text
@d128 16
@


1.6
log
@Major refactoring of abstract graph data structures
@
text
@d4 3
a6 1
import java.util.Collection;
d8 4
a11 1
import java.util.List;
d14 2
a15 1
 * Library of routines for creating or performing operations on graphs.
d22 111
d136 1
a136 1
        r.setAttribute("label","n"+0);
d140 1
a140 1
            nn.setAttribute("label","n"+i);
d148 6
d159 1
a159 1
            nodes[i].setAttribute("label", "n"+i);
d170 6
d181 1
a181 1
            nodes[i].setAttribute("label", "n"+i);
a189 129
    
	public static final int SEARCH_NODES = 0;
	public static final int SEARCH_EDGES = 1;
	public static final int SEARCH_ALL   = 2;

	/**
	 * Performs a simple search, returning all nodes that exactly match the provided attribute. 
	 * @@param g the graph to search over
	 * @@param attrName the attribute name to look up
	 * @@param attrValue the attribute value to match
	 * @@return a <code>List</code> of the matching <code>Node</code> objects
	 */
	public static List searchNodes(Graph g, String attrName, String attrValue) {
		return search(g, attrName, attrValue, SEARCH_NODES);
	} //
	
	public static void searchNodes(Graph g, Collection result, String query) {
		Iterator nodeIter = g.getNodes();
		while ( nodeIter.hasNext() ) {
			Node n = (Node)nodeIter.next();
			Iterator attIter = n.getAttributes().values().iterator();
			while ( attIter.hasNext() ) {
				String value = (String)attIter.next();
				if ( value.indexOf(query) > -1 ) {
					result.add(n);
					break;
				}
			}
		}
	} //

	/**
	 * Performs a simple search, returning all Entities that exactly match the provided attribute. 
	 * @@param g the graph to search over
	 * @@param attrName the attribute name to look up
	 * @@param attrValue the attribute value to match
	 * @@param type determines if nodes, edges, or both are searched. The legal values are
	 *  <code>SEARCH_NODES</code>, <code>SEARCH_EDGES</code>, <code>SEARCH_ALL</code>.
	 * @@return a <code>List</code> of the matching <code>Entity</code> objects
	 */
	public static List search(Graph g, String attrName, String attrValue, int type) {
		ArrayList result = new ArrayList();
		if ( type == SEARCH_NODES || type == SEARCH_ALL ) {
			search(result, g.getNodes(), attrName, attrValue);
		}
		if ( type == SEARCH_EDGES || type == SEARCH_ALL ) {
			search(result, g.getEdges(), attrName, attrValue);
		}
		return result;
	} //
	
	private static void search(Collection result, Iterator iter, String attrName, String attrValue) {
		while ( iter.hasNext() ) {
			Entity e = (Entity)iter.next();
			String val = e.getAttribute(attrName);
			if ( val != null && val.equals(attrValue) )
				result.add(e);
		}
	} //
	
//	/**
//	 * Filters a graph of unwanted entities, creating a new subgraph.
//	 * @@param og the original <code>Graph</code>. It will be not bechanged.
//	 * @@param func a FilterFunction that determines what entities are filtered.
//	 * @@return a new, filtered <code>Graph</code> instance.
//	 */
//	public static Graph getFilteredGraph(final Graph og, FilterFunction func)
//	{
//		Graph g = new DefaultGraph();
//		HashMap nodeMap = new HashMap();
//		Iterator iter = og.getNodes();
//		while ( iter.hasNext() ) {
//			Node u = (Node)iter.next();
//			if ( func.filter(u) ) {
//				Node v = null;
//				try {
//					v = (Node)u.getClass().newInstance();
//				} catch ( Exception e ) {
//					e.printStackTrace();
//				}
//				v.setAttributes(u.getAttributes());
//				nodeMap.put(u,v);
//				g.addNode(v);
//			}
//		}
//		iter = og.getEdges();
//		while ( iter.hasNext() ) {
//			Edge e = (Edge)iter.next();
//			Node v1 = (Node)nodeMap.get(e.getFirstNode());
//			Node v2 = (Node)nodeMap.get(e.getSecondNode());
//			if ( v1 != null && v2 != null && func.filter(e) ) {
//				Edge e2 = new DefaultEdge(v1, v2);
//				e2.setAttributes(e.getAttributes());
//				g.addEdge(e2);
//			}
//		}
//		return g;
//	} //
//	
//	/**
//	 * Filters a graph of unwanted entities.
//	 * @@param g the graph to filter
//	 * @@param func a FilterFunction that determines what entities are filtered.
//	 */
//	public static void filterGraph(Graph g, FilterFunction func) {
//		Iterator iter = g.getNodes();
//		List removeList = new ArrayList();
//		while ( iter.hasNext() ) {
//			Node u = (Node)iter.next();
//			if ( !func.filter(u) ) {
//				removeList.add(u);
//			}
//		}
//		iter = removeList.iterator();
//		while ( iter.hasNext() )
//			g.removeNode((Node)iter.next());
//		removeList.clear();
//		iter = g.getEdges();
//		while ( iter.hasNext() ) {
//			Edge e = (Edge)iter.next();
//			if ( !func.filter(e) ) {
//				removeList.add(e);
//			}
//		}
//		iter = removeList.iterator();
//		while ( iter.hasNext() )
//			g.removeEdge((Edge)iter.next());
//		removeList.clear();
//	} //
@


1.5
log
@fixed bug in getGrid
@
text
@d9 1
a9 1
 * Library of useful operations on graphs.
d17 4
a20 4
        Node n0 = new TreeNode();
        n0.setAttribute("label","n"+0);
        ArrayList al = new ArrayList(n+1);
        al.add(n0);
d22 1
a22 1
            Node nn = new TreeNode();
d24 3
a26 4
            Edge e = new Edge(n0, nn);
            n0.addEdge(e);
            nn.addEdge(e);
            al.add(nn);
d28 1
a28 1
        return new SimpleGraph(al);
d32 1
a33 1
        ArrayList al = new ArrayList(n);
d35 1
a35 1
            nodes[i] = new TreeNode();
d37 1
a37 1
            al.add(nodes[i]);
d40 3
a42 2
            for ( int j = 0; j < n; j++ )
                if ( i != j ) nodes[i].addNeighbor(nodes[j]);
d44 1
a44 1
        return new SimpleGraph(al);
d48 2
a49 1
        ArrayList nodes = new ArrayList();
d51 7
a57 15
            TreeNode node = new TreeNode();
            node.setAttribute("label", "n"+i);
            nodes.add(node);
            if ( i >= n ) {
                TreeNode above = (TreeNode)nodes.get(i-n);
                Edge e = new Edge(above, node);
                node.addEdge(e);
                above.addEdge(e);
            }
            if ( i % n != 0 ) {
                TreeNode bfor = (TreeNode)nodes.get(i-1);
                Edge e = new Edge(bfor, node);
                node.addEdge(e);
                bfor.addEdge(e);
            }
d59 1
a59 1
        return new SimpleGraph(nodes);
d129 1
a129 1
//		SimpleGraph g = new SimpleGraph();
d152 1
a152 1
//				Edge e2 = new Edge(v1, v2);
d165 1
a165 1
//	public static void filterGraph(SimpleGraph g, FilterFunction func) {
@


1.4
log
@Added getGrid method
@
text
@d53 2
a54 2
            if ( i >= m ) {
                TreeNode above = (TreeNode)nodes.get(i-m);
d59 1
a59 1
            if ( i % m != 0 ) {
@


1.3
log
@Updated graph building methods to use TreeNodes by default
@
text
@d47 22
@


1.2
log
@Major commit of updated architecture
@
text
@a10 2
 * May 21, 2003 - jheer - Created class
 * 
d12 1
a12 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
d17 1
a17 1
        Node n0 = new Node();
d22 1
a22 1
            Node nn = new Node();
d36 1
a36 1
            nodes[i] = new Node();
@


1.1
log
@Initial import
@
text
@a4 1
import java.util.HashMap;
d18 31
d108 69
a176 69
	/**
	 * Filters a graph of unwanted entities, creating a new subgraph.
	 * @@param og the original <code>Graph</code>. It will be not bechanged.
	 * @@param func a FilterFunction that determines what entities are filtered.
	 * @@return a new, filtered <code>Graph</code> instance.
	 */
	public static Graph getFilteredGraph(final Graph og, FilterFunction func)
	{
		SimpleGraph g = new SimpleGraph();
		HashMap nodeMap = new HashMap();
		Iterator iter = og.getNodes();
		while ( iter.hasNext() ) {
			Node u = (Node)iter.next();
			if ( func.filter(u) ) {
				Node v = null;
				try {
					v = (Node)u.getClass().newInstance();
				} catch ( Exception e ) {
					e.printStackTrace();
				}
				v.setAttributes(u.getAttributes());
				nodeMap.put(u,v);
				g.addNode(v);
			}
		}
		iter = og.getEdges();
		while ( iter.hasNext() ) {
			Edge e = (Edge)iter.next();
			Node v1 = (Node)nodeMap.get(e.getFirstNode());
			Node v2 = (Node)nodeMap.get(e.getSecondNode());
			if ( v1 != null && v2 != null && func.filter(e) ) {
				Edge e2 = new Edge(v1, v2);
				e2.setAttributes(e.getAttributes());
				g.addEdge(e2);
			}
		}
		return g;
	} //
	
	/**
	 * Filters a graph of unwanted entities.
	 * @@param g the graph to filter
	 * @@param func a FilterFunction that determines what entities are filtered.
	 */
	public static void filterGraph(SimpleGraph g, FilterFunction func) {
		Iterator iter = g.getNodes();
		List removeList = new ArrayList();
		while ( iter.hasNext() ) {
			Node u = (Node)iter.next();
			if ( !func.filter(u) ) {
				removeList.add(u);
			}
		}
		iter = removeList.iterator();
		while ( iter.hasNext() )
			g.removeNode((Node)iter.next());
		removeList.clear();
		iter = g.getEdges();
		while ( iter.hasNext() ) {
			Edge e = (Edge)iter.next();
			if ( !func.filter(e) ) {
				removeList.add(e);
			}
		}
		iter = removeList.iterator();
		while ( iter.hasNext() )
			g.removeEdge((Edge)iter.next());
		removeList.clear();
	} //
@

