head	1.3;
access;
symbols
	alpha:1.2.0.2
	Root_alpha:1.2
	prefuse-alpha-20051229:1.2
	P20050401_Alpha_PreCHI:1.2;
locks; strict;
comment	@# @;


1.3
date	2006.02.12.18.23.41;	author jheer;	state dead;
branches;
next	1.2;

1.2
date	2004.03.11.19.11.12;	author jheer;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2004.01.08.21.10.11;	author jheer;	state Exp;
branches;
next	;

1.2.4.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches;
next	;


desc
@@


1.3
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.graph;

/**
 * Interface representing an edge connecting two nodes in a graph.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public interface Edge extends Entity {

    /**
     * Indicates if this edge is directed or undirected.
     * @@return true if the edge is directed, false if undirected.
     */
    public boolean isDirected();
    
    /**
     * Indicates if this is a tree edge, that is, if this edge helps
     * define part of a tree structure. This holds true if both incident
     * edges are instances of DefaultTreeNode and this edge defines a 
     * parent-child relationship between the two nodes.
     * @@return true if this is a tree-edge, false otherwise.
     */
    public boolean isTreeEdge();
    
    /**
     * Indicates if this edge is incident on a given node
     * @@param n the node to check
     * @@return true if this edge is incident on the node, false otherwise.
     */
    public boolean isIncident(Node n);
    
    /**
     * Returns the first node in the edge (the source node for
     * directed edges).
     * @@return the first (source) node
     */
    public Node getFirstNode();
    
    /**
     * Returns the second node in the edge (the target node for
     * directed edges).
     * @@return the second (target) node
     */
    public Node getSecondNode();
    
    /**
     * Sets the first node in the edge (the source node for
     *  directed edges).
     * @@param n the new first (source) node.
     */
    public void setFirstNode(Node n);
    
    /**
     * Sets the second node in the edge (the target node for
     * directed edges).
     * @@param n the new second (target) node.
     */
    public void setSecondNode(Node n);
    
    /**
     * Returns the node in this <code>DefaultEdge</code> adjacent to the 
     * provided node, or null if the provided node is not in this edge.
     * @@param n a Node that should be in this DefaultEdge
     * @@return the Node adjacent to the provided Node
     */
    public Node getAdjacentNode(Node n);
    
} // end of interface Edge
@


1.2
log
@Major refactoring of abstract graph data structures
@
text
@@


1.2.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.1
log
@Initial import
@
text
@d4 2
a5 4
 * Represents an edge in a graph.
 * 
 * Apr 22, 2003 - jheer - Created class
 * 
d7 1
a7 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
d9 1
a9 1
public class Edge extends AbstractEntity {
d11 59
a69 120
	protected Entity m_node1;
	protected Entity m_node2;
	protected boolean m_directed;
	
	/**
	 * Constructor. Creates a new <i>undirected</i> edge.
	 * @@param n1 the first node in the edge
	 * @@param n2 the second node in the edge
	 */
	public Edge(Entity n1, Entity n2) {
		this(n1,n2,false);
	} //
	
	/**
	 * Constructor. Creates a new edge.
	 * @@param n1 the first (source) node in the edge
	 * @@param n2 the second (target) node in the edge
	 * @@param directed specifies if this is a directed (true) 
	 * or undirected (false) edge
	 */
	public Edge(Entity n1, Entity n2, boolean directed) {
		m_node1 = n1;
		m_node2 = n2;
		m_directed = directed;
	} //
	
	/**
	 * Determines edge equality. Is sensitive to whether or not the edge
	 * is directed. For example the edges (n1,n2) and (n2,n1) will be
	 * considered equal if they are undirected edges and unequal if they
	 * are directed.
	 * @@see java.lang.Object#equals(java.lang.Object)
	 */
	public boolean equals(Object o) {
		if ( o instanceof Edge ) {
			Edge e = (Edge)o;
			if ( m_directed ) {
				return e.m_node1 == m_node1 && e.m_node2 == m_node2;
			} else {
				return (e.m_node1 == m_node1 && e.m_node2 == m_node2) ||
				(e.m_node1 == m_node2 && e.m_node2 == m_node1);		
			}
		}
		return false;
	}
	
	/**
	 * Computes a hash code for the edge. Is sensitive to whether or not the 
	 * edge is directed. For example the edges (n1,n2) and (n2,n1) will hash
	 * to same value if they are undirected edges and will hash differently 
	 * if they are directed.
	 * @@see java.lang.Object#equals(java.lang.Object)
	 */
	public int hashCode() {
		int c1 = ( m_node1 == null ? 0 : m_node1.hashCode() );
		int c2 = ( m_node2 == null ? 0 : m_node2.hashCode() );
		return c1 + ( m_directed ? c2 << 1 : c2 );
	} //
	
	/**
	 * Indicates if this edge is directed or undirected.
	 * @@return true if the edge is directed, false otherwise.
	 */
	public boolean isDirected() {
		return m_directed;
	} //
	
	/**
	 * Indicates if this is a tree edge, that is, if this edge helps
	 * define part of a tree structure. This holds true if both incident
	 * edges are instances of TreeNode and this edge defines a 
	 * parent-child relationship between the two nodes.
	 * @@return true if this is a tree-edge, false otherwise.
	 */
	public boolean isTreeEdge() {
		if ( m_node1 instanceof TreeNode && m_node2 instanceof TreeNode ) {
			TreeNode n1 = (TreeNode)m_node1;
			TreeNode n2 = (TreeNode)m_node2;
			if ( n1.getChildIndex(n2) > -1 || 
				 ( !m_directed && n2.getChildIndex(n1) > -1 ) )
				 return true;
		}
		return false;
	} //
	
	/**
	 * Returns the first node in the edge (the source node for
	 * directed edges).
	 * @@return the first (source) node
	 */
	public Entity getFirstNode() {
		return m_node1;
	} //
	
	/**
	 * Returns the second node in the edge (the target node for
	 * directed edges).
	 * @@return the second (target) node
	 */
	public Entity getSecondNode() {
		return m_node2;
	} //
	
	/**
	 * Returns the node in this <code>Edge</code> adjacent to the 
	 * provided node, or null if the provided node is not in this edge.
	 * @@param e an Entity that should be in this Edge
	 * @@return the Entity adjacent to the provided Entity
	 */
	public Entity getAdjacentNode(Entity e) {
		if ( e == m_node1 ) {
			return m_node2;
		} else if ( e == m_node2 ) {
			return m_node1;
		} else {
			return null;
		}
	} //
	
} // end of class Edge
@

