head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2004.03.24.01.57.26;	author jheer;	state dead;
branches;
next	1.3;

1.3
date	2004.03.23.19.34.05;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.11.19.11.12;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.10.11;	author jheer;	state Exp;
branches;
next	;


desc
@@


1.4
log
@New filters added plus more
@
text
@package edu.berkeley.guir.prefuse.graph;

import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * Abstract class from which graph entities (nodes and edges) can descend.
 * Provides support for handling entity attributes.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public abstract class AbstractEntity implements Entity {	

	protected Map m_attributes;	

	/**
	 * Get an attribute associated with this entity.
	 * @@param name the name of the attribute
	 * @@return the attribute value (possibly null)
	 */
	public String getAttribute(String name) {
		if ( m_attributes == null ) {
			return null;
		} else {
			return (String)m_attributes.get(name);
		}
	} //

	/**
	 * Get all attributes associated with this entity.
	 * @@return a Map of all this entity's attributes.
	 */
	public Map getAttributes() {
		if ( m_attributes == null ) {
			return Collections.EMPTY_MAP;
		} else {
			return m_attributes;
		}
	} //

	/**
	 * Get an attribute associated with this entity.
	 * @@param name the name of the attribute
	 * @@param value the value of the attribute
	 */
	public void setAttribute(String name, String value) {
		if ( m_attributes == null ) {
		    m_attributes = new HashMap(3,0.9f);
		}
		m_attributes.put(name, value);
	} //

	/**
	 * Sets the attribute map for this Entity, using the same reference passed
     * in as an argument (i.e. a copy is not made). The map should contain 
     * only <code>String</code> values, otherwise an exception will be thrown.
	 * @@param attrMap the attribute map
	 * @@throws IllegalArgumentException is the input map
	 * contains non-<code>String</code> values.
	 */
	public void setAttributes(Map attrMap) {
		Iterator iter = attrMap.keySet().iterator();
		while ( iter.hasNext() ) {
			Object key = iter.next();
			Object val = attrMap.get(key);
			if ( !(key instanceof String && val instanceof String) )
				throw new IllegalArgumentException(
					"Non-string value contained in attribute map");
		}
		m_attributes = attrMap;
	} //
		
	/**
	 * Remove all attributes associated with this entity.
	 */	
	public void clearAttributes() {
		if ( m_attributes != null ) {
			m_attributes.clear();
		}
	} //
	
	/**
	 * Returns a String representation of the Entity.
	 * @@see java.lang.Object#toString()
	 */
	public String toString() {
		return "Entity["+getAttributeString()+"]";
	} //
    
    protected String getAttributeString() {
        StringBuffer sbuf = new StringBuffer();
        Iterator iter = m_attributes.keySet().iterator();
        while ( iter.hasNext() ) {
            String key = (String)iter.next();
            String val = (String)m_attributes.get(key);
            sbuf.append(key).append('=').append(val);
            if ( iter.hasNext() )
                sbuf.append(',');
        }
        return sbuf.toString();
    } //

} // end of abstract class AbstractEntity
@


1.3
log
@More Javadoc updates
@
text
@@


1.2
log
@Major refactoring of abstract graph data structures
@
text
@a11 2
 * Apr 24, 2003 - jheer - Created class
 * 
d13 1
a13 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
d51 1
a51 1
		    m_attributes = new HashMap(3);
@


1.1
log
@Initial import
@
text
@d4 1
d53 1
a53 5
			try {
				m_attributes = (Map)MAP_TYPE.newInstance();
			} catch ( Exception e ) {
				e.printStackTrace();
			}
d59 3
a61 3
	 * Sets the attribute map for this Entity. The map
	 * should contain only <code>String</code> values,
	 * otherwise an exception will be thrown.
d92 1
a92 12
		StringBuffer sbuf = new StringBuffer();
		sbuf.append("Entity[");
		Iterator iter = m_attributes.keySet().iterator();
		while ( iter.hasNext() ) {
			String key = (String)iter.next();
			String val = (String)m_attributes.get(key);
			sbuf.append(key).append('=').append(val);
			if ( iter.hasNext() )
				sbuf.append(',');
		}
		sbuf.append("]");
		return sbuf.toString();
d94 13
@

