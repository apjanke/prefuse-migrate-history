head	1.5;
access;
symbols
	alpha:1.4.0.2
	Root_alpha:1.4
	prefuse-alpha-20051229:1.4
	P20050401_Alpha_PreCHI:1.4;
locks; strict;
comment	@# @;


1.5
date	2006.02.12.18.23.41;	author jheer;	state dead;
branches;
next	1.4;

1.4
date	2004.11.08.02.53.28;	author jheer;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2004.03.11.19.11.11;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.27.21.35.46;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.10.12;	author jheer;	state Exp;
branches;
next	;

1.4.4.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches;
next	;


desc
@@


1.5
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.graph.event;

import java.util.EventListener;

import edu.berkeley.guir.prefuse.event.EventMulticaster;
import edu.berkeley.guir.prefuse.graph.Edge;
import edu.berkeley.guir.prefuse.graph.Graph;
import edu.berkeley.guir.prefuse.graph.Node;

/**
 * Manages listeners for graph modification events.
 * 
 * @@author newbergr
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class GraphEventMulticaster extends EventMulticaster 
    implements GraphEventListener
{
    /**
     * @@see edu.berkeley.guir.prefuse.graph.event.GraphEventListener#nodeAdded(edu.berkeley.guir.prefuse.graph.Graph, edu.berkeley.guir.prefuse.graph.Node)
     */
	public void nodeAdded(Graph g, Node n) {
		((GraphEventListener) a).nodeAdded(g,n);
		((GraphEventListener) b).nodeAdded(g,n);
	} //

    /**
     * @@see edu.berkeley.guir.prefuse.graph.event.GraphEventListener#nodeRemoved(edu.berkeley.guir.prefuse.graph.Graph, edu.berkeley.guir.prefuse.graph.Node)
     */
	public void nodeRemoved(Graph g, Node n) {
		((GraphEventListener) a).nodeRemoved(g,n);
		((GraphEventListener) b).nodeRemoved(g,n);
	} //

    /**
     * @@see edu.berkeley.guir.prefuse.graph.event.GraphEventListener#nodeReplaced(edu.berkeley.guir.prefuse.graph.Graph, edu.berkeley.guir.prefuse.graph.Node, edu.berkeley.guir.prefuse.graph.Node)
     */
	public void nodeReplaced(Graph g, Node o, Node n) {
		((GraphEventListener) a).nodeReplaced(g,o,n);
		((GraphEventListener) b).nodeReplaced(g,o,n);		
	} //

    /**
     * @@see edu.berkeley.guir.prefuse.graph.event.GraphEventListener#edgeAdded(edu.berkeley.guir.prefuse.graph.Graph, edu.berkeley.guir.prefuse.graph.Edge)
     */
	public void edgeAdded(Graph g, Edge e) {
		((GraphEventListener) a).edgeAdded(g,e);
		((GraphEventListener) b).edgeAdded(g,e);
	} //

    /**
     * @@see edu.berkeley.guir.prefuse.graph.event.GraphEventListener#edgeRemoved(edu.berkeley.guir.prefuse.graph.Graph, edu.berkeley.guir.prefuse.graph.Edge)
     */
	public void edgeRemoved(Graph g, Edge e) {
		((GraphEventListener) a).edgeRemoved(g,e);
		((GraphEventListener) b).edgeRemoved(g,e);
	} //

    /**
     * @@see edu.berkeley.guir.prefuse.graph.event.GraphEventListener#edgeReplaced(edu.berkeley.guir.prefuse.graph.Graph, edu.berkeley.guir.prefuse.graph.Edge, edu.berkeley.guir.prefuse.graph.Edge)
     */
	public void edgeReplaced(Graph g, Edge o, Edge n) {
		((GraphEventListener) a).edgeReplaced(g,o,n);
		((GraphEventListener) b).edgeReplaced(g,o,n);		
	} //

	public static GraphEventListener add(GraphEventListener a, GraphEventListener b) {
		return (GraphEventListener) addInternal(a, b);
	} //

	public static GraphEventListener remove(GraphEventListener a, GraphEventListener b) {
		return (GraphEventListener) removeInternal(a, b);
	} //

	/** 
	 * Returns the resulting multicast listener from adding listener-a
	 * and listener-b together.  
	 * If listener-a is null, it returns listener-b;  
	 * If listener-b is null, it returns listener-a
	 * If neither are null, then it creates and returns
	 * a new AWTEventMulticaster instance which chains a with b.
	 * @@param a event listener-a
	 * @@param b event listener-b
	 */
	protected static EventListener addInternal(
		EventListener a,
		EventListener b) {
		if (a == null)
			return b;
		if (b == null)
			return a;
		return new GraphEventMulticaster(a, b);
	} //

	protected EventListener remove(EventListener oldl) {
		if (oldl == a)
			return b;
		if (oldl == b)
			return a;
		EventListener a2 = removeInternal(a, oldl);
		EventListener b2 = removeInternal(b, oldl);
		if (a2 == a && b2 == b) {
			return this; // it's not here
		}
		return addInternal(a2, b2);
	} //
	
	protected GraphEventMulticaster(EventListener a, EventListener b) {
		super(a,b);
	} //

} // end of class PrefuseEventMulticaster
@


1.4
log
@Fixed multicaster bug, other small updates
@
text
@@


1.4.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.3
log
@Major refactoring of abstract graph data structures
@
text
@d95 13
@


1.2
log
@Major commit of updated architecture
@
text
@d7 1
d14 1
a14 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
d19 46
a64 29

	public void nodeAdded(Node n) {
		((GraphEventListener) a).nodeAdded(n);
		((GraphEventListener) b).nodeAdded(n);
	} //

	public void nodeRemoved(Node n) {
		((GraphEventListener) a).nodeRemoved(n);
		((GraphEventListener) b).nodeRemoved(n);
	} //

	public void nodeReplaced(Node o, Node n) {
		((GraphEventListener) a).nodeReplaced(o,n);
		((GraphEventListener) b).nodeReplaced(o,n);		
	} //

	public void edgeAdded(Edge e) {
		((GraphEventListener) a).edgeAdded(e);
		((GraphEventListener) b).edgeAdded(e);
	} //

	public void edgeRemoved(Edge e) {
		((GraphEventListener) a).edgeRemoved(e);
		((GraphEventListener) b).edgeRemoved(e);
	} //

	public void edgeReplaced(Edge o, Edge n) {
		((GraphEventListener) a).edgeReplaced(o,n);
		((GraphEventListener) b).edgeReplaced(o,n);		
@


1.1
log
@Initial import
@
text
@d5 1
d10 1
a10 1
 * Manages a list of listeners for prefuse registry events.
d15 3
a17 3
public class GraphEventMulticaster implements GraphEventListener {

	protected final EventListener a, b;
a76 23
	/** 
	 * Returns the resulting multicast listener after removing the
	 * old listener from listener-l.
	 * If listener-l equals the old listener OR listener-l is null, 
	 * returns null.
	 * Else if listener-l is an instance of AWTEventMulticaster, 
	 * then it removes the old listener from it.
	 * Else, returns listener l.
	 * @@param l the listener being removed from
	 * @@param oldl the listener being removed
	 */
	protected static EventListener removeInternal(
		EventListener l,
		EventListener oldl) {
		if (l == oldl || l == null) {
			return null;
		} else if (l instanceof GraphEventMulticaster) {
			return ((GraphEventMulticaster) l).remove(oldl);
		} else {
			return l; // it's not here
		}
	} //

d78 1
a78 2
		this.a = a;
		this.b = b;
a80 54
	protected EventListener remove(EventListener oldl) {
		if (oldl == a)
			return b;
		if (oldl == b)
			return a;
		EventListener a2 = removeInternal(a, oldl);
		EventListener b2 = removeInternal(b, oldl);
		if (a2 == a && b2 == b) {
			return this; // it's not here
		}
		return addInternal(a2, b2);
	} //

	private static int getListenerCount(EventListener l) {
		if (l instanceof GraphEventMulticaster) {
			GraphEventMulticaster mc = (GraphEventMulticaster) l;
			return getListenerCount(mc.a) + getListenerCount(mc.b);
		}
		// Delete nulls. 
		else {
			return (l == null) ? 0 : 1;
		}
	} //

	private static int populateListenerArray(
		EventListener[] a,
		EventListener l,
		int index) {
		if (l instanceof GraphEventMulticaster) {
			GraphEventMulticaster mc = (GraphEventMulticaster) l;
			int lhs = populateListenerArray(a, mc.a, index);
			return populateListenerArray(a, mc.b, lhs);
		} else if (l != null) {
			a[index] = l;
			return index + 1;
		}
		// Delete nulls. 
		else {
			return index;
		}
	} //

	public static EventListener[] getListeners(
		EventListener l,
		Class listenerType) {
		int n = getListenerCount(l);
		EventListener[] result =
			(EventListener[]) java.lang.reflect.Array.newInstance(
				listenerType,
				n);
		populateListenerArray(result, l, 0);
		return result;
	} //
	
@

