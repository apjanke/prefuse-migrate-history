head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2004.03.01.20.02.23;	author jheer;	state dead;
branches;
next	1.2;

1.2
date	2004.02.27.21.35.17;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.09.59;	author jheer;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Minor updates
@
text
@package edu.berkeley.guir.prefuse.pipeline;

import java.awt.geom.Point2D;
import java.util.Iterator;

import edu.berkeley.guir.prefuse.AggregateItem;
import edu.berkeley.guir.prefuse.ItemRegistry;
import edu.berkeley.guir.prefuse.NodeItem;
import edu.berkeley.guir.prefuse.action.AbstractAction;
import edu.berkeley.guir.prefuse.graph.Tree;
import edu.berkeley.guir.prefuse.graph.TreeNode;

/**
 * Filter that adds aggregate items for elided subtrees.
 * 
 * Apr 30, 2003 - jheer - Created class
 * 
 * @@version 1.0
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
 */
public class TreeAggregateFilter extends AbstractAction {

	/**
	 * @@see edu.berkeley.guir.prefuse.filter.AbstractPipelineComponent#process()
	 */
	public void run(ItemRegistry registry, double frac) {
		Tree t = (Tree)registry.getGraph();
		
		double sx, sy, ex, ey, stheta, etheta;
		
		Iterator nodeIter = registry.getNodeItems();
		while ( nodeIter.hasNext() ) {
			NodeItem nitem  = (NodeItem)nodeIter.next();
			TreeNode node   = (TreeNode)registry.getEntity(nitem);
            if ( nitem.getNumChildren() == 0 && node.getNumChildren() > 0 ) {				
				AggregateItem aggr = registry.getAggregateItem(node, true);
				Point2D       eloc = nitem.getEndLocation();
				Point2D       sloc = nitem.getStartLocation();

				aggr.setLocation   (sloc);
				aggr.updateLocation(eloc);
				aggr.setLocation   (eloc);
				
				setOrientation(aggr);
				
				aggr.setAggregateSize(node.getNumDescendants());
			}
		}
	} //
    
    protected void setOrientation(AggregateItem item) {
        Point2D eloc = item.getEndLocation();
        Point2D sloc = item.getStartLocation();
        Point2D anchor = null;
        
        double ax, ay, sx, sy, ex, ey, etheta, stheta;
        ax = anchor.getX(); ay = anchor.getY();
        sx = sloc.getX()-ax; sy = sloc.getY()-ay;
        ex = eloc.getX()-ax; ey = eloc.getY()-ay;
        
        etheta = Math.atan2(ey, ex);
        stheta = ( sx == 0 && sy == 0 ? etheta : Math.atan2(sy, sx) );
        
        item.setStartOrientation(stheta);
        item.setOrientation(etheta);
        item.setEndOrientation(etheta);
    } //

} // end of class TreeAggregateFilter
@


1.2
log
@Major commit of updated architecture
@
text
@@


1.1
log
@Initial import
@
text
@d7 1
d9 1
d21 1
a21 3
public class TreeAggregateFilter extends AbstractPipelineComponent
	implements Filter
{
d24 1
a24 1
	 * @@see edu.berkeley.guir.prefuse.pipeline.AbstractPipelineComponent#process()
d26 2
a27 2
	public void process() {
		Tree t = (Tree)m_graph;
d29 1
a29 9
		int minDOI = getIntegerAttribute(FisheyeTreeFilter.ATTR_MIN_DOI);
		if ( minDOI == Integer.MIN_VALUE ) {
			throw new IllegalStateException("Minimum DOI is not set!");
		}
		
		Point2D anchor = (Point2D)getAttribute(RadialTreeLayout.ATTR_ANCHOR);
		if ( anchor == null ) {
			throw new IllegalStateException("Anchor point not set!");
		}
d31 1
a31 4
		double ax, ay, sx, sy, ex, ey, stheta, etheta;
		ax = anchor.getX(); ay = anchor.getY();
		
		Iterator nodeIter = m_registry.getNodeItems();
d34 3
a36 3
			TreeNode node   = (TreeNode)m_registry.getEntity(nitem);
			if ( node.getNumChildren() > 0 && (int)nitem.getDOI() == minDOI ) {				
				AggregateItem aggr = m_registry.getAggregateItem(node, true);
d39 4
d44 1
a44 16
				sx = sloc.getX(); sy = sloc.getY();
				ex = eloc.getX(); ey = eloc.getY();
				
				aggr.setLocation   (sx, sy);
				aggr.updateLocation(ex, ey);
				aggr.setLocation   (ex, ey);
				
				sx -= ax; sy -= ay;
				ex -= ax; ey -= ay;
				
				etheta = Math.atan2(ey, ex);
				stheta = ( sx == 0 && sy == 0 ? etheta : Math.atan2(sy, sx) );
								
				aggr.setStartOrientation(stheta);
				aggr.setOrientation(etheta);
				aggr.setEndOrientation(etheta);
a46 3
				
				/// XXX DEBUG
				//System.out.println("nitem (x,y)="+eloc.getX()+","+eloc.getY());
d50 18
@

