head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2004.03.24.01.57.26;	author jheer;	state dead;
branches;
next	1.3;

1.3
date	2004.03.16.03.05.16;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.11.19.11.12;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.27.21.35.18;	author jheer;	state Exp;
branches;
next	;


desc
@@


1.4
log
@New filters added plus more
@
text
@package edu.berkeley.guir.prefuse.action;

import edu.berkeley.guir.prefuse.ItemRegistry;
import edu.berkeley.guir.prefuse.NodeItem;
import edu.berkeley.guir.prefuse.graph.DefaultTree;

/**
 * Abstract class providing convenience methods for tree layout algorithms.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public abstract class TreeLayout extends Layout {

    protected NodeItem m_root;
    
    public NodeItem getLayoutRoot() {
        return m_root;
    } //
    
    public void setLayoutRoot(NodeItem root) {
        m_root = root;
    } //
    
    public NodeItem getLayoutRoot(ItemRegistry registry) {
        if ( m_root != null )
            return m_root;
        DefaultTree t = (DefaultTree)registry.getGraph();
        return registry.getNodeItem(t.getRoot());
    } //

} // end of abstract class TreeLayout
@


1.3
log
@More Javadoc updates
@
text
@@


1.2
log
@Major refactoring of abstract graph data structures
@
text
@d8 1
a8 2
 * 
 * Feb 21, 2004 - jheer - Created class
@


1.1
log
@Major commit of updated architecture
@
text
@d5 1
a5 1
import edu.berkeley.guir.prefuse.graph.Tree;
d29 1
a29 1
        Tree t = (Tree)registry.getGraph();
@

