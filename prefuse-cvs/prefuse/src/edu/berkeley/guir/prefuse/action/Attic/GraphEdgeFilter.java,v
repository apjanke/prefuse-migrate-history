head	1.7;
access;
symbols;
locks; strict;
comment	@# @;


1.7
date	2004.03.24.01.57.26;	author jheer;	state dead;
branches;
next	1.6;

1.6
date	2004.03.13.02.17.12;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.11.19.11.12;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.08.21.31.49;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.08.20.05.52;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.06.00.51.03;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.27.21.35.18;	author jheer;	state Exp;
branches;
next	;


desc
@@


1.7
log
@New filters added plus more
@
text
@package edu.berkeley.guir.prefuse.action;

import java.util.Iterator;

import edu.berkeley.guir.prefuse.EdgeItem;
import edu.berkeley.guir.prefuse.ItemRegistry;
import edu.berkeley.guir.prefuse.NodeItem;
import edu.berkeley.guir.prefuse.graph.Edge;
import edu.berkeley.guir.prefuse.graph.Node;

/**
 * The GraphEdgeFilter allows all edges adjacent to visualized 
 * nodes to be visualized. By default, garbage collection on
 * edge items is performed.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class GraphEdgeFilter extends Filter {

    private boolean m_edgesVisible;
    
    /**
     * Filters graph edges, connecting filtered graph nodes into a
     * graph structure. Filtered edges are visible by default.
     */
    public GraphEdgeFilter() {
        this(true);
    } //
    
    /**
     * Filters graph edges, connecting filtered graph nodes into a
     * graph structure. DefaultEdge visibility can be controlled.
     * @@param edgesVisible determines whether or not the filtered
     *  edges are visible in the display.
     */
    public GraphEdgeFilter(boolean edgesVisible) {
        super(ItemRegistry.DEFAULT_EDGE_CLASS, true);
        m_edgesVisible = edgesVisible;
    } //
    
	/**
	 * @@see edu.berkeley.guir.prefuse.action.Action#run(edu.berkeley.guir.prefuse.ItemRegistry, double)
	 */
	public void run(ItemRegistry registry, double frac) {
		Iterator nodeIter = registry.getNodeItems();
		while ( nodeIter.hasNext() ) {
			NodeItem nitem  = (NodeItem)nodeIter.next();
			Node node = (Node)nitem.getEntity();
			Iterator edgeIter = node.getEdges();
			while ( edgeIter.hasNext() ) {
				Edge edge = (Edge)edgeIter.next();
                Node n = edge.getAdjacentNode(node);
                if ( registry.isVisible(n) ) {
                    EdgeItem eitem = registry.getEdgeItem(edge, true);
                    nitem.addEdge(eitem);
                    if ( !m_edgesVisible ) eitem.setVisible(false);
                }
			}
		}
        
		// optional garbage collection
        super.run(registry, frac);
	} //

} // end of class GraphEdgeFilter
@


1.6
log
@Removed unnecessary try/catch block
@
text
@@


1.5
log
@Major refactoring of abstract graph data structures
@
text
@d56 1
a56 5
                    try {
                        nitem.addEdge(eitem);
                    } catch ( IllegalStateException e ) { 
                        // already a neighbor
                    }
@


1.4
log
@Moved garbage collection into abstract Filter
@
text
@d33 1
a33 1
     * graph structure. Edge visibility can be controlled.
d53 1
a53 3
                Node n = (Node)edge.getFirstNode();
                if ( n == node )
                    n = (Node)edge.getSecondNode();
@


1.3
log
@Javadoc update and fixes
@
text
@d13 2
a14 1
 * nodes to be visualized.
d19 1
a19 1
public class GraphEdgeFilter extends AbstractAction {
d38 1
d67 3
@


1.2
log
@Updated edge filters to support invisible edge creation
@
text
@d41 1
a41 1
	 * @@see edu.berkeley.guir.prefuse.filter.AbstractPipelineComponent#process()
@


1.1
log
@Major commit of updated architecture
@
text
@a14 2
 * Apr 25, 2003 - jheer - Created class
 * 
d16 1
a16 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
d20 20
d58 4
a61 1
                    } catch ( IllegalStateException e ) {}
@

