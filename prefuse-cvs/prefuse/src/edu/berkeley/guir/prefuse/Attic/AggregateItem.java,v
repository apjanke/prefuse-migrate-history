head	1.6;
access;
symbols
	alpha:1.5.0.2
	Root_alpha:1.5
	prefuse-alpha-20051229:1.5
	P20050401_Alpha_PreCHI:1.4;
locks; strict;
comment	@# @;


1.6
date	2006.02.11.06.38.44;	author jheer;	state dead;
branches;
next	1.5;

1.5
date	2005.09.24.17.35.39;	author jheer;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2004.03.23.03.54.56;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.15.03.33.29;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.03.08.11.05;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.09.59;	author jheer;	state Exp;
branches;
next	;

1.5.4.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches;
next	;


desc
@@


1.6
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse;

import java.util.List;

import edu.berkeley.guir.prefuse.graph.Entity;
import edu.berkeley.guir.prefuse.graph.Node;

/**
 * Visual representation of an aggregate of nodes and edges in a graph.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class AggregateItem extends NodeItem {

	private double m_orientation = 0;
	private double m_startOrientation = 0;
	private double m_endOrientation = 0;

	private int m_aggrSize;
	private NodeItem m_nitem;

	/**
	 * Initialize this AggregateItem, binding it to the given
	 * ItemRegistry and Entity.
	 * @@param registry the ItemRegistry monitoring this VisualItem
	 * @@param entity the Entity represented by this VisualItem
	 */
	public void init(ItemRegistry registry, String itemClass, Entity entity) {
		if (entity != null && !(entity instanceof Node)) {
			throw new IllegalArgumentException("AggregateItem can only represent an Entity of type Node.");
		}
		super.init(registry, itemClass, entity);
		
		VisualItem item = m_registry.getNodeItem((Node)entity);
		if ( item != null ) {
			setDOI(item.getDOI());
			setStartLocation(item.getStartLocation());
			setLocation(item.getLocation());
			setEndLocation(item.getEndLocation());
			setStartSize(item.getStartSize());
			setSize(item.getSize());
			setEndSize(item.getEndSize());
			setFont(item.getFont());
		}
	} //

	/**
	 * Clear the state of this AggregateItem.
	 */
	public void clear() {
		super.clear();
		m_aggrSize = 0;
		m_orientation = 0;
		m_startOrientation = 0;
		m_endOrientation = 0;
		m_location.setLocation(0, 0);
		m_startLocation.setLocation(0, 0);
		m_endLocation.setLocation(0, 0);
	} //

    /**
     * Get the entities associated with this aggregate.
     * @@return a List of Entity instances "contained" in this aggregate
     */
	public List getEntities() {
		return m_registry.getEntities(this);
	} //
	
    /**
     * Returns the Entity "contained" in this aggregate at the given index.
     * @@param idx the index of the Entity to return
     * @@return the requested Entity
     */
	public Entity getEntity(int idx) {
		return (Entity)m_registry.getEntities(this).get(idx);
	} //

	public NodeItem getNodeItem() {
		return m_nitem;
	} //

	public void setNodeItem(NodeItem item) {
		m_nitem = item;
	} //

    /**
     * Returns the number of elements represented by this aggregate.
     * @@return the number of elements represented by this aggregate.
     */
	public int getAggregateSize() {
		return m_aggrSize;
	} //

    /**
     * Sets the number of elements represented by this aggregate.
     * @@param size the size to set.
     */
	public void setAggregateSize(int size) {
		m_aggrSize = size;
	} //

	/**
     * Returns the orientation of this aggregate, in radians
	 * @@return the angle of orientation, in radians
	 */
	public double getOrientation() {
		return m_orientation;
	} //

	/**
	 * Sets the orientation of this aggregate, in radians
	 * @@param orientation the orientation to set
	 */
	public void setOrientation(double orientation) {
		m_orientation = orientation;
	} //

	/**
	 * @@return double
	 */
	public double getEndOrientation() {
		return m_endOrientation;
	} //

	/**
	 * @@return double
	 */
	public double getStartOrientation() {
		return m_startOrientation;
	} //

	/**
	 * Sets the end orientation.
	 * @@param endOrientation The ending orientation to set
	 */
	public void setEndOrientation(double endOrientation) {
		this.m_endOrientation = endOrientation;
	} //

	/**
	 * Sets the starting orientation.
	 * @@param startOrientation The starting orientation to set
	 */
	public void setStartOrientation(double startOrientation) {
		this.m_startOrientation = startOrientation;
	} //

} // end of class AggregateItem
@


1.5
log
@Removed unreachable code.
@
text
@@


1.5.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.4
log
@Major refactor
@
text
@a4 1
import edu.berkeley.guir.prefuse.graph.Edge;
d35 1
a35 6
		VisualItem item = null;
		if ( entity instanceof Node ) {
			item = m_registry.getNodeItem((Node)entity);
		} else if ( entity instanceof Edge ) {
			item = m_registry.getEdgeItem((Edge)entity);
		}
@


1.3
log
@Updated Javadoc
@
text
@d27 2
a28 2
	 * @@param registry the ItemRegistry monitoring this GraphItem
	 * @@param entity the Entity represented by this GraphItem
d36 1
a36 1
		GraphItem item = null;
@


1.2
log
@Added javadoc documentation
@
text
@d68 4
d76 5
d93 4
d101 4
d110 2
a111 1
	 * @@return double
d118 2
a119 2
	 * Sets the m_orientation.
	 * @@param m_orientation The m_orientation to set
d121 2
a122 2
	public void setOrientation(double m_orientation) {
		this.m_orientation = m_orientation;
d140 2
a141 2
	 * Sets the m_endOrientation.
	 * @@param m_endOrientation The m_endOrientation to set
d143 2
a144 2
	public void setEndOrientation(double m_endOrientation) {
		this.m_endOrientation = m_endOrientation;
d148 2
a149 2
	 * Sets the m_startOrientation.
	 * @@param m_startOrientation The m_startOrientation to set
d151 2
a152 2
	public void setStartOrientation(double m_startOrientation) {
		this.m_startOrientation = m_startOrientation;
@


1.1
log
@Initial import
@
text
@d10 1
a10 3
 * Represents an aggregate of nodes and edges to visualize.
 * 
 * Apr 22, 2003 - jheer - Created class
d13 1
a13 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
@

