head	1.6;
access;
symbols
	alpha:1.5.0.2
	Root_alpha:1.5
	prefuse-alpha-20051229:1.5
	P20050401_Alpha_PreCHI:1.5;
locks; strict;
comment	@# @;


1.6
date	2006.02.11.06.38.44;	author jheer;	state dead;
branches;
next	1.5;

1.5
date	2004.03.23.03.54.56;	author jheer;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2004.03.15.03.33.29;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.03.08.11.05;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.27.21.35.18;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.09.59;	author jheer;	state Exp;
branches;
next	;

1.5.4.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches;
next	;


desc
@@


1.6
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * Factory class for {@@link VisualItem VisualItem} instances. This allows object
 * initialization to be consolidated in a single location and allocated objects
 * to be re-used by maintaining a pool of item references.
 * 
 * This class works closely with the {@@link ItemRegistry ItemRegistry}, but is
 * implemented separately to provide encapsulation and simplify design.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class ItemFactory {
	
	private static final Class LIST_TYPE = LinkedList.class;
	private static final Class MAP_TYPE  = HashMap.class;
	
	private class FactoryEntry {
		FactoryEntry(String itemClass, Class classType, int maxSize) {
			try {
				maxItems = maxSize;
				name     = itemClass;
				type     = classType;
				itemList = (List)LIST_TYPE.newInstance();
			} catch ( Exception e) {
				e.printStackTrace();
			}
		} //
		int     maxItems;
		Class   type;
		String  name;
		List    itemList;
	} // end of inner class ItemEntry
	
	private Map m_entryMap;
	
	/**
	 * Constructor. Creates a new ItemFactory instance.
	 */
	public ItemFactory() {
		try {
			m_entryMap = (Map)MAP_TYPE.newInstance();
		} catch ( Exception e ) {
			e.printStackTrace();
		}
	} //
	
    /**
     * Add a new item class for which to maintain an item pool.
     * @@param itemClass the label for the item class
     * @@param classType the Java Class of the items
     * @@param maxItems the maximum size of the item pool
     */
	public void addItemClass(String itemClass, Class classType, int maxItems) {
		FactoryEntry fentry = new FactoryEntry(itemClass, classType, maxItems);
		m_entryMap.put(itemClass, fentry);
	} //
	
	// ========================================================================
	// == FACTORY METHODS =====================================================
	
    /**
     * Get an item from an item pool. Create a new item if the pool is empty.
     */
	public VisualItem getItem(String itemClass) {
		FactoryEntry fentry = (FactoryEntry)m_entryMap.get(itemClass);
		if ( fentry != null ) {
			VisualItem item = null;
			if ( fentry.itemList.isEmpty() ) {
				try {
					item = (VisualItem)fentry.type.newInstance();
				} catch ( Exception e ) {
					e.printStackTrace();
				}
			} else {
				item = (VisualItem)fentry.itemList.remove(0);
			}
			return item;
		} else {
			throw new IllegalArgumentException("The input string must be a"
						+ " recognized item class!");
		}
	} //
	
	/**
	 * Reclaim an item into an item pool. Used to avoid object initialization
	 * costs. If maximum pool sizes are reached, this item will not be
	 * reclaimed. In this case it should have NO remaining references, allowing
	 * it to be garbage collected.
	 * @@param item the VisualItem to reclaim
	 */
	public void reclaim(VisualItem item) {
		String itemClass    = item.getItemClass();
		FactoryEntry fentry = (FactoryEntry)m_entryMap.get(itemClass);
		
		// clear any references within the item
		item.clear();
		
		// Determine which "bin" the item belongs in, then add it
		// if the maximum has not yet been reached.
		if ( fentry.itemList.size() <= fentry.maxItems ) {
			fentry.itemList.add(item);
		}
	} //

} // end of class ItemFactory
@


1.5
log
@Major refactor
@
text
@@


1.5.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.4
log
@Updated Javadoc
@
text
@d9 1
a9 1
 * Factory class for {@@link GraphItem GraphItem} instances. This allows object
d71 1
a71 1
	public GraphItem getItem(String itemClass) {
d74 1
a74 1
			GraphItem item = null;
d77 1
a77 1
					item = (GraphItem)fentry.type.newInstance();
d82 1
a82 1
				item = (GraphItem)fentry.itemList.remove(0);
d96 1
a96 1
	 * @@param item the GraphItem to reclaim
d98 1
a98 1
	public void reclaim(GraphItem item) {
@


1.3
log
@Added javadoc documentation
@
text
@d9 1
a9 1
 * Factory class for GraphItem instances. This allows object
d13 1
a13 1
 * This class works closely with the ItemRegistry, but is
@


1.2
log
@Major commit of updated architecture
@
text
@d11 1
a11 1
 * to be re-used.
a15 3
 * Apr 24, 2003 - jheer - Created class
 * Jul 16, 2003 - jheer - Generalized to handle arbitrary item classes
 * 
d17 1
a17 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
d54 6
d68 3
@


1.1
log
@Initial import
@
text
@d13 1
a13 1
 * This class works in close conjunction with the ItemRegistry, but is
@

