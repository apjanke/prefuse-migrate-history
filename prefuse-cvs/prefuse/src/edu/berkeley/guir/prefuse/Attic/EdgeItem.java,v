head	1.8;
access;
symbols
	alpha:1.7.0.2
	Root_alpha:1.7
	prefuse-alpha-20051229:1.7
	P20050401_Alpha_PreCHI:1.7;
locks; strict;
comment	@# @;


1.8
date	2006.02.11.06.38.44;	author jheer;	state dead;
branches;
next	1.7;

1.7
date	2004.03.24.01.57.26;	author jheer;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2004.03.23.19.34.05;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.23.03.54.56;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.11.19.11.13;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.03.08.11.05;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.26.01.36.33;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.09.59;	author jheer;	state Exp;
branches;
next	;

1.7.4.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches;
next	;


desc
@@


1.8
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse;

import edu.berkeley.guir.prefuse.graph.Edge;
import edu.berkeley.guir.prefuse.graph.Entity;
import edu.berkeley.guir.prefuse.graph.Node;

/**
 * Visual representation of an edge in a graph.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class EdgeItem extends VisualItem implements Edge {

	protected NodeItem m_node1;
	protected NodeItem m_node2;

	/**
	 * Initialize this EdgeItem, binding it to the
     *  given ItemRegistry and Entity.
	 * @@param registry the ItemRegistry monitoring this VisualItem
	 * @@param entity the Entity represented by this VisualItem
	 */
	public void init(ItemRegistry registry, String itemClass, Entity entity) {
		if ( entity != null && !(entity instanceof Edge) ) {
			throw new IllegalArgumentException("EdgeItem can only represent an Entity of type Edge.");
		}
		super.init(registry, itemClass, entity);
		
		Edge edge = (Edge)entity;
		Node n1 = edge.getFirstNode();
		Node n2 = edge.getSecondNode();
		
		NodeItem item1 = getItem(n1);
		setFirstNode(item1);
		NodeItem item2 = getItem(n2);
		setSecondNode(item2);
	} //
	
	protected NodeItem getItem(Node n) {
		return m_registry.getNodeItem(n);
	} //
    
    private void nodeItemCheck(Node n) {
        if ( !(n instanceof NodeItem) )
            throw new IllegalArgumentException(
                "Node must be an instance of NodeItem");
    } //

    /**
     * Indicates whether or not this edge is a directed edge.
     * @@return true if this edge is directed, false otherwise
     */
	public boolean isDirected() {
        return ((Edge)m_entity).isDirected();
	} //
    
    /**
     * Indicates whether or not this edge is a tree edge.
     * @@return true if this edge is a tree edge, false otherwise
     */
    public boolean isTreeEdge() {
        NodeItem n1 = (NodeItem)m_node1;
        NodeItem n2 = (NodeItem)m_node2;
        return (n1.getParent() == n2 || n2.getParent()== n1);
    } //
	
    /**
     * Given a node item incident on this edge, returns the other node item
     * incident on this edge.
     * @@param n a NodeItem incident on this edge
     * @@return the other NodeItem incident on this edge
     * @@throws IllegalArgumentException if the provided NodeItem is either
     *  not a NodeItem or is not incident on this edge.
     */
    public Node getAdjacentNode(Node n) {
        nodeItemCheck(n);
        if ( m_node1 == n )
            return m_node2;
        else if ( m_node2 == n )
            return m_node1;
        else
            throw new IllegalArgumentException(
               "The given node is not incident on this Edge.");
    } //
    
	/**
	 * Return the VisualItem representing the first (source) node in the edge.
	 * @@return the first (source) VisualItem
	 */
	public Node getFirstNode() {
		return m_node1;
	} //
	
	/**
	 * Set the VisualItem representing the first (source) node in the edge.
	 * @@param item the first (source) VisualItem
	 */
	public void setFirstNode(Node item) {
        nodeItemCheck(item);
        m_node1 = (NodeItem)item;
	} //
	
	/**
	 * Return the VisualItem representing the second (target) node in the edge.
	 * @@return the second (target) VisualItem
	 */
	public Node getSecondNode() {
		return m_node2;
	} //
	
	/**
	 * Set the NodeItem representing the second (target) node in the edge.
	 * @@param item the second (target) NodeItem
	 */
	public void setSecondNode(Node item) {
        nodeItemCheck(item);
		m_node2 = (NodeItem)item;
	} //

    /**
     * @@see edu.berkeley.guir.prefuse.graph.Edge#isIncident(edu.berkeley.guir.prefuse.graph.Node)
     */
    public boolean isIncident(Node n) {
        return (n == m_node1 || n == m_node2);
    } //

} // end of class EdgeItem
@


1.7
log
@New filters added plus more
@
text
@@


1.7.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.6
log
@More Javadoc updates
@
text
@d55 1
a55 1
		return ((Edge)m_entity).isDirected();
d63 3
a65 1
        return ((Edge)m_entity).isTreeEdge();
@


1.5
log
@Major refactor
@
text
@d69 1
a69 1
     * @@param nitem a NodeItem incident on this edge
d71 2
a72 2
     * @@throws IllegalArgumentException if the provided NodeItem is not
     *  incident on this edge.
@


1.4
log
@Major refactoring of abstract graph data structures
@
text
@d13 1
a13 1
public class EdgeItem extends GraphItem {
d21 2
a22 2
	 * @@param registry the ItemRegistry monitoring this GraphItem
	 * @@param entity the Entity represented by this GraphItem
d43 6
d74 3
a76 2
    public NodeItem getAdjacentNode(NodeItem nitem) {
        if ( m_node1 == nitem )
d78 1
a78 1
        else if ( m_node2 == nitem )
d81 2
a82 1
            throw new IllegalArgumentException("Input NodeItem is incident on this Edge.");
d86 2
a87 2
	 * Return the GraphItem representing the first (source) node in the edge.
	 * @@return the first (source) GraphItem
d89 1
a89 1
	public NodeItem getFirstNode() {
d94 2
a95 2
	 * Set the GraphItem representing the first (source) node in the edge.
	 * @@param item the first (source) GraphItem
d97 3
a99 2
	public void setFirstNode(NodeItem item) {
		m_node1 = item;
d103 2
a104 2
	 * Return the GraphItem representing the second (target) node in the edge.
	 * @@return the second (target) GraphItem
d106 1
a106 1
	public NodeItem getSecondNode() {
d114 3
a116 2
	public void setSecondNode(NodeItem item) {
		m_node2 = item;
d119 7
@


1.3
log
@Added javadoc documentation
@
text
@d31 2
a32 2
		Entity n1 = edge.getFirstNode();
		Entity n2 = edge.getSecondNode();
d40 2
a41 6
	protected NodeItem getItem(Entity n) {
		NodeItem item = null;
		if ( n instanceof Node ) {
			item = m_registry.getNodeItem((Node)n);
		}
		return item;
d51 8
d68 1
a68 1
    public NodeItem getOtherNode(NodeItem nitem) {
@


1.2
log
@Small tweaks
@
text
@d8 1
a8 3
 * Represents an edge in the graph to visualize.
 * 
 * Apr 22, 2003 - jheer - Created class
d11 1
a11 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
d19 2
a20 2
	 * Initialize this EdgeItem, binding it to the given
	 * ItemRegistry and Entity.
d48 4
d56 8
@


1.1
log
@Initial import
@
text
@d54 9
@

