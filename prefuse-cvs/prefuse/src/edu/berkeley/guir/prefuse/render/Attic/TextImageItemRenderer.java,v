head	1.12;
access;
symbols
	alpha:1.11.0.2
	Root_alpha:1.11
	prefuse-alpha-20051229:1.11
	P20050401_Alpha_PreCHI:1.10;
locks; strict;
comment	@# @;


1.12
date	2006.02.12.18.23.42;	author jheer;	state dead;
branches;
next	1.11;

1.11
date	2005.09.24.17.45.39;	author jheer;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	2005.03.23.02.41.11;	author jheer;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.11.18.52.02;	author jheer;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.16.06.02.38;	author jheer;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.15.00.35.17;	author jheer;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.25.04.35.38;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.23.03.54.55;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.16.03.05.17;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.08.20.05.51;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.27.21.35.18;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.09.59;	author jheer;	state Exp;
branches;
next	;

1.11.4.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches;
next	;


desc
@@


1.12
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.render;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RectangularShape;
import java.awt.geom.RoundRectangle2D;

import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.util.FontLib;
import edu.berkeley.guir.prefuse.util.StringAbbreviator;

/**
 * Renders an item as an image and a text string.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class TextImageItemRenderer extends ShapeRenderer {

	public static final int ALIGNMENT_LEFT   = 0;
	public static final int ALIGNMENT_RIGHT  = 1;
	public static final int ALIGNMENT_CENTER = 2;
	public static final int ALIGNMENT_BOTTOM = 1;
	public static final int ALIGNMENT_TOP    = 0;
	
	protected ImageFactory m_images = new ImageFactory();
	
	protected String m_labelName = "label";
	protected String m_imageName = "image";
	
	protected int m_arcWidth;
	protected int m_arcHeight;
	
	protected int m_xAlign = ALIGNMENT_CENTER;
	protected int m_yAlign = ALIGNMENT_CENTER;
	protected int m_horizBorder = 3;
	protected int m_vertBorder  = 0;
	protected int m_imageMargin = 4;
    
	protected int m_maxTextWidth = -1;
	protected int m_abbrevType = StringAbbreviator.TRUNCATE;
	protected StringAbbreviator m_abbrev = StringAbbreviator.getInstance();
	
    protected double m_imageSize = 1.0;
    protected boolean m_showImages = true;
	
	protected Font m_font = new Font("SansSerif", Font.PLAIN, 10);
    protected RectangularShape m_imageBox  = new Rectangle2D.Float();
	protected Point2D     m_tmpPoint = new Point2D.Double();
    protected AffineTransform m_transform = new AffineTransform();

    /**
     * Rounds the corners of the bounding rectangle in which the text
     * string is rendered.
     * @@param arcWidth the width of the curved corner
     * @@param arcHeight the height of the curved corner
     */
    public void setRoundedCorner(int arcWidth, int arcHeight) {
        if ( (arcWidth == 0 || arcHeight == 0) && 
                !(m_imageBox instanceof Rectangle2D) ) {
            m_imageBox = new Rectangle2D.Float();
        } else {
            if ( !(m_imageBox instanceof RoundRectangle2D) )
                m_imageBox = new RoundRectangle2D.Float();
            ((RoundRectangle2D)m_imageBox)
                .setRoundRect(0,0,10,10,arcWidth,arcHeight);                    
        }
        m_arcWidth = arcWidth;
        m_arcHeight = arcHeight;
    } //

	/**
	 * Get the attribute name of the text to draw.
	 * @@return the text attribute name
	 */
	public String getTextAttributeName() {
		return m_labelName;
	} //
	
	/**
	 * Set the attribute name for the text to draw.
	 * @@param name the text attribute name
	 */
	public void setTextAttributeName(String name) {
		m_labelName = name;
	} //    
    
	/**
	 * Sets the maximum width that should be allowed of the text label.
	 * A value of -1 specifies no limit (this is the default).
	 * @@param maxWidth the maximum width of the text or -1 for no limit
	 */
	public void setMaxTextWidth(int maxWidth) {
	    m_maxTextWidth = maxWidth;
	} //
	
	/**
	 * Sets the type of abbreviation to be used if a text label is longer
	 * than the maximum text width. The value should be one of the constants
	 * provided by the {@@link edu.berkeley.guir.prefuse.util.StringAbbreviator
	 * StringAbbreviator} class. To enable abbreviation, you must first set
	 * the maximum text width using the {@@link #setMaxTextWidth(int) 
	 * setMaxTextWidth} method.
	 * @@param abbrevType the abbreviation type to use. Should be one of the
	 * constants provided by the 
	 * {@@link edu.berkeley.guir.prefuse.util.StringAbbreviator
	 * StringAbbreviator} class (e.g. StringAbbreviator.TRUNCATE or 
	 * StringAbbreviator.NAME).
	 */
	public void setAbbrevType(int abbrevType) {
	    m_abbrevType = abbrevType;
	} //
	
	/**
	 * Returns the text to draw. Subclasses can override this class to
	 * perform custom text rendering.
	 * @@param item the item to represent as a <code>String</code>
	 * @@return a <code>String</code> to draw
	 */
	protected String getText(VisualItem item) {
		String s =  (String)item.getAttribute(m_labelName);
		if ( m_maxTextWidth > -1 ) {
		    Font font = item.getFont();
		    if ( font == null ) { font = m_font; }
		    FontMetrics fm = DEFAULT_GRAPHICS.getFontMetrics(font);
		    if ( fm.stringWidth(s) > m_maxTextWidth ) {
		        s = m_abbrev.abbreviate(s, m_abbrevType, fm, m_maxTextWidth);			
		    }
		}
		return s;
	} //    
    
    /**
     * Sets the display-time scaling factor for images. This scaling
     * is applied at rendering time, to scale the image immediately upon
     * loading instead, refer to the {@@link #setMaxImageDimensions(int,int)
     * setMaxImageDimensions} method.
     * @@param size the scaling factor for displaying images
     */
    public void setImageSize(double size) {
        m_imageSize = size;
    } //
    
	/**
	 * Sets maximum image dimensions, used to control scaling of loaded images
     * This scaling is enforced immediately upon loading of the image, to 
     * scale the image at rendering time instead, refer to the 
     * {@@link #setImageSize(double) setImageSize} method.
	 * @@param width the max width of images (-1 for no limit)
	 * @@param height the max height of images (-1 for no limit)
	 */
	public void setMaxImageDimensions(int width, int height) {
		m_images.setMaxImageDimensions(width, height);
	} //
	
	/**
	 * Get the attribute name of the image to draw.
	 * @@return the image attribute name
	 */
	public String getImageAttributeName() {
		return m_imageName;
	} //
	
	/**
	 * Set the attribute name for the image to draw.
	 * @@param name the image attribute name
	 */
	public void setImageAttributeName(String name) {
		m_imageName = name;
	} //	
	
	/**
	 * Returns a URL for the image to draw. Subclasses can override 
	 * this class to perform custom image selection.
	 * @@param item the item for which to select an image to draw
	 * @@return an <code>Image</code> to draw
	 */
	protected String getImageLocation(VisualItem item) {
		return item.getAttribute(m_imageName);
	} //
	
	protected Image getImage(VisualItem item) {
	    if ( !m_showImages ) return null;
		String imageLoc = getImageLocation(item);
		return ( imageLoc == null ? null : m_images.getImage(imageLoc) );
	} //

	/**
	 * @@see edu.berkeley.guir.prefuse.render.ShapeRenderer#getRawShape(edu.berkeley.guir.prefuse.VisualItem)
	 */
	protected Shape getRawShape(VisualItem item) {
        double size = item.getSize();
        
		// get image dimensions
		Image img = getImage(item);
        double is = size*m_imageSize;
		double ih = (img==null ? 0 : is*img.getHeight(null));
		double iw = (img==null ? 0 : is*img.getWidth(null));
		// get text dimensions
		m_font = item.getFont();
        if ( size != 1 )
          m_font = FontLib.getFont(m_font.getName(), m_font.getStyle(),
                      			size*m_font.getSize());
        
		String s = getText(item);
		if ( s == null ) { s = ""; }
		
        FontMetrics fm = DEFAULT_GRAPHICS.getFontMetrics(m_font);
		int th = fm.getHeight();
		int tw = fm.stringWidth(s)+4;
		
		double w = tw + iw + 
                size*(2*m_horizBorder + (tw>0 && iw>0 ? m_imageMargin : 0));
		double h = Math.max(th, ih) + size*2*m_vertBorder;
		
		getAlignedPoint(m_tmpPoint, item, w, h, m_xAlign, m_yAlign);
		
		if ( m_imageBox instanceof RoundRectangle2D ) {
		    ((RoundRectangle2D)m_imageBox)
            	.setRoundRect(m_tmpPoint.getX(),m_tmpPoint.getY(),w,h,
            	        size*m_arcWidth,size*m_arcHeight);
		} else {
		    m_imageBox.setFrame(m_tmpPoint.getX(),m_tmpPoint.getY(),w,h);
		}
		return m_imageBox;
	} //
	
	/**
	 * Helper method, which calculates the top-left co-ordinate of a node
	 * given the node's alignment.
	 */
	protected static void getAlignedPoint(Point2D p, VisualItem item, 
            double w, double h, int xAlign, int yAlign)
    {
		double x = item.getX(), y = item.getY();
		if ( xAlign == ALIGNMENT_CENTER ) {
			x = x-(w/2);
		} else if ( xAlign == ALIGNMENT_RIGHT ) {
			x = x-w;
		}
		if ( yAlign == ALIGNMENT_CENTER ) {
			y = y-(h/2);
		} else if ( yAlign == ALIGNMENT_BOTTOM ) {
			y = y-h;
		}
		p.setLocation(x,y);
	} //
	
	/**
	 * @@see edu.berkeley.guir.prefuse.render.Renderer#render(java.awt.Graphics2D, edu.berkeley.guir.prefuse.VisualItem)
	 */
	public void render(Graphics2D g, VisualItem item) {
        Shape shape = getShape(item);
        if ( shape == null ) return;
        
        Paint itemColor = item.getColor();
        Paint fillColor = item.getFillColor();
        
        // render the fill
        int type = getRenderType(item);
        if ( type==RENDER_TYPE_FILL || type==RENDER_TYPE_DRAW_AND_FILL ) {
            g.setPaint(fillColor);
            g.fill(shape);
        }

        // render image and text next
        String s = getText(item);
		Image img = getImage(item);
		if ( s == null && img == null )
			return;
						
		Rectangle2D r = shape.getBounds2D();
        double size = item.getSize();
		double x = r.getMinX() + size*m_horizBorder;
			
        // render image
		if ( img != null ) {
			Composite comp = g.getComposite();
               // enable alpha blending for image, if needed
			if ( fillColor instanceof Color) {
				int alpha = ((Color)fillColor).getAlpha();
				if ( alpha < 255 ) {
					AlphaComposite alphaComp = 
						AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, 
							((float)alpha)/255);
					g.setComposite(alphaComp);
				}
			}
            
            double is = m_imageSize*size;
            double w = is*img.getWidth(null);
            double h = is*img.getHeight(null);
            double y = r.getMinY() + (r.getHeight()-h)/2;
            
            m_transform.setTransform(is,0,0,is,x,y);
            g.drawImage(img, m_transform, null);
            
			x += w + (s!=null && w>0 ? size*m_imageMargin : 0);
			g.setComposite(comp);
		}
        
        // render text
		if ( s != null ) {
			g.setPaint(itemColor);
			g.setFont(m_font);
			FontMetrics fm = DEFAULT_GRAPHICS.getFontMetrics(m_font);
			double y = r.getY() + (r.getHeight()-fm.getHeight())/2+fm.getAscent();
			g.drawString(s, (float)x+1, (float)y);
		}
	
        // now draw border
		if (type==RENDER_TYPE_DRAW || type==RENDER_TYPE_DRAW_AND_FILL) {
		    Stroke st = g.getStroke();
		    Stroke ist = getStroke(item);
		    if ( ist != null ) g.setStroke(ist);
            g.setPaint(itemColor);
            g.draw(shape);
            g.setStroke(st);
        }
	} //
	
    /**
     * Returns the image factory used by this renderer.
     * @@return the image factory
     */
    public ImageFactory getImageFactory() {
        return m_images;
    } //
    
    /**
     * Sets the image factory used by this renderer.
     * @@param ifact the image factory
     */
    public void setImageFactory(ImageFactory ifact) {
        m_images = ifact;
    } //
    
	/**
	 * Get the horizontal alignment of this node with respect to it's
	 * location co-ordinate.
	 * @@return the horizontal alignment
	 */
	public int getHorizontalAlignment() {
		return m_xAlign;
	} //
	
	/**
	 * Get the vertical alignment of this node with respect to it's
	 * location co-ordinate.
	 * @@return the vertical alignment
	 */
	public int getVerticalAlignment() {
		return m_yAlign;
	} //
	
	/**
	 * Set the horizontal alignment of this node with respect to it's
	 * location co-ordinate.
	 * @@param align the horizontal alignment
	 */	
	public void setHorizontalAlignment(int align) {
		m_xAlign = align;
	} //
	
	/**
	 * Set the vertical alignment of this node with respect to it's
	 * location co-ordinate.
	 * @@param align the vertical alignment
	 */	
	public void setVerticalAlignment(int align) {
		m_yAlign = align;
	} //
	
    /**
     * Returns the amount of padding in pixels between text 
     * and the border of this item along the horizontal dimension.
     * @@return the horizontal padding
     */
    public int getHorizontalPadding() {
        return m_horizBorder;
    } //
    
    /**
     * Sets the amount of padding in pixels between text 
     * and the border of this item along the horizontal dimension.
     * @@param xpad the horizontal padding to set
     */
    public void setHorizontalPadding(int xpad) {
        m_horizBorder = xpad;
    } //
    
    /**
     * Returns the amount of padding in pixels between text 
     * and the border of this item along the vertical dimension.
     * @@return the vertical padding
     */
    public int getVerticalPadding() {
        return m_vertBorder;
    } //
    
    /**
     * Sets the amount of padding in pixels between text 
     * and the border of this item along the vertical dimension.
     * @@param ypad the vertical padding
     */
    public void setVerticalPadding(int ypad) {
        m_vertBorder = ypad;
    } //
    
    /**
     * Returns the amount of spacing in pixels between image and text.
     * @@return the space in pixels between image and text
     */
    public int getImageSpacing() {
        return m_imageMargin;
    } //
    
    /**
     * Sets the amount of padding in pixels between image and text.
     * @@param s the space in pixels between image and text
     */
    public void setImageSpacing(int s) {
        m_imageMargin = s;
    } //
    
    /**
     * @@return Returns the m_showImages.
     */
    public boolean isShowImages() {
        return m_showImages;
    } //
    
    /**
     * @@param images The m_showImages to set.
     */
    public void setShowImages(boolean show) {
        m_showImages = show;
    } //
    
} // end of class TextImageItemRenderer
@


1.11
log
@Tweaked rendered item width calculation.
@
text
@@


1.11.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.10
log
@Renderer updates, added PolygonRenderer
@
text
@d221 1
a221 1
		int tw = fm.stringWidth(s)+2;
@


1.9
log
@Added string abbreviation
@
text
@d42 3
d56 1
d79 2
d194 1
a209 1
		
d214 1
a214 1
                      (int)Math.round(size*m_font.getSize()));
d221 1
a221 1
		int tw = fm.stringWidth(s);
d228 8
a235 1
		m_imageBox.setFrame(m_tmpPoint.getX(),m_tmpPoint.getY(),w,h);
d259 1
a259 1

d308 2
a309 2

			x += w + (s!=null ? size*m_imageMargin : 0);
d319 1
a319 1
			g.drawString(s, (float)x, (float)y);
d437 14
@


1.8
log
@Renderer updates
@
text
@d21 1
d48 4
a75 23
    
    /**
     * Sets the display-time scaling factor for images. This scaling
     * is applied at rendering time, to scale the image immediately upon
     * loading instead, refer to the {@@link #setMaxImageDimensions(int,int)
     * setMaxImageDimensions} method.
     * @@param size the scaling factor for displaying images
     */
    public void setImageSize(double size) {
        m_imageSize = size;
    } //
    
	/**
	 * Sets maximum image dimensions, used to control scaling of loaded images
     * This scaling is enforced immediately upon loading of the image, to 
     * scale the image at rendering time instead, refer to the 
     * {@@link #setImageSize(double) setImageSize} method.
	 * @@param width the max width of images (-1 for no limit)
	 * @@param height the max height of images (-1 for no limit)
	 */
	public void setMaxImageDimensions(int width, int height) {
		m_images.setMaxImageDimensions(width, height);
	} //
d91 26
d118 1
a118 1

d126 33
a158 1
		return (String)item.getAttribute(m_labelName);
@


1.7
log
@Application-driven updates
@
text
@d280 16
@


1.6
log
@A whole lot of update
@
text
@d13 1
d16 2
d46 2
d49 4
a52 3
	protected Font m_font = new Font("SansSerif", Font.PLAIN, 10);	
	protected Rectangle2D m_imageBox  = new Rectangle2D.Float();
	protected Point2D     m_tmpPoint = new Point2D.Float();
d54 29
d85 3
d160 3
a162 2
		double ih = (img==null ? 0 : size*img.getHeight(null));
		double iw = (img==null ? 0 : size*img.getWidth(null));
d182 1
a182 1
		m_imageBox.setRect(m_tmpPoint.getX(),m_tmpPoint.getY(),w,h);
d218 1
a218 1
        int type = getRenderType();
d231 2
a232 2
           double size = item.getSize();
		double x = r.getX() + size*m_horizBorder;
d248 4
a251 3
            double w = size*img.getWidth(null);
            double h = size*img.getHeight(null);
            double y = r.getY() + (r.getHeight()-h)/2;
d253 3
a255 6
            int ix = (int)Math.round(x), iy = (int)Math.round(y);
            if ( size == 1 )
                g.drawImage(img, ix, iy, null);
            else
                g.drawImage(img, ix, iy, (int)Math.round(w), 
                        (int)Math.round(h), null);
d259 1
@


1.5
log
@Major refactor
@
text
@a10 1
import java.awt.Rectangle;
d12 1
a14 1
import java.awt.image.BufferedImage;
a31 3

	protected Graphics2D m_g;
	protected BufferedImage m_buff;
a47 6
	public TextImageItemRenderer() {
		// TODO: this is hacky. Is there a better way to achieve this?
		m_buff = new BufferedImage(1,1,BufferedImage.TYPE_INT_ARGB);
		m_g = (Graphics2D)m_buff.getGraphics();
	} //

a117 2
		if ( m_g == null ) { return null; }
		
d134 1
a134 1
        FontMetrics fm = m_g.getFontMetrics(m_font);
d172 12
a183 20
		Paint fillColor = item.getFillColor();
		Paint itemColor = item.getColor();
		Shape shape = getShape(item);
		if (shape != null) {
			switch (getRenderType()) {
				case RENDER_TYPE_DRAW :
					g.setPaint(itemColor);
					g.draw(shape);
					break;
				case RENDER_TYPE_FILL :
					g.setPaint(fillColor);
					g.fill(shape);
					break;
				case RENDER_TYPE_DRAW_AND_FILL :
					g.setPaint(fillColor);
					g.fill(shape);
					g.setPaint(itemColor);
					g.draw(shape);
					break;
			}
d185 5
a189 4
			String s = getText(item);
			Image img = getImage(item);
			if ( s == null && img == null )
				return;
d191 3
a193 3
			Rectangle r = shape.getBounds();
            double size = item.getSize();
			double x = size*(r.x + m_horizBorder);
d195 11
a205 10
			if ( img != null ) {
				Composite comp = g.getComposite();
				if ( itemColor != null && fillColor instanceof Color) {
					int alpha = ((Color)fillColor).getAlpha();
					if ( alpha < 255 ) {
						AlphaComposite alphaComp = 
							AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, 
								((float)alpha)/255);
						g.setComposite(alphaComp);
					}
a206 20
                
                double w = size*img.getWidth(null);
                double h = size*img.getHeight(null);
                double y = r.y + (r.height-h)/2;
                
                int ix = (int)Math.round(x), iy = (int)Math.round(y);
                if ( size == 1 )
                    g.drawImage(img, ix, iy, null);
                else
                    g.drawImage(img, ix, iy, (int)Math.round(w), 
                            (int)Math.round(h), null);
				x += w + (s!=null ? size*m_imageMargin : 0);
				g.setComposite(comp);
			}
			if ( s != null ) {
				g.setPaint(itemColor);
				g.setFont(m_font);
				FontMetrics fm = m_g.getFontMetrics(m_font);
				int y = r.y + (r.height-fm.getHeight())/2+fm.getAscent();
				g.drawString(s, Math.round(x), y);
d208 21
d230 10
d278 52
@


1.4
log
@More Javadoc updates
@
text
@d17 2
a18 1
import edu.berkeley.guir.prefuse.GraphItem;
d89 1
a89 1
	protected String getText(GraphItem item) {
d115 1
a115 1
	protected String getImageLocation(GraphItem item) {
d119 1
a119 1
	protected Image getImage(GraphItem item) {
d125 1
a125 1
	 * @@see edu.berkeley.guir.prefuse.render.ShapeRenderer#getRawShape(edu.berkeley.guir.prefuse.GraphItem)
d127 1
a127 1
	protected Shape getRawShape(GraphItem item) {
d130 2
d134 2
a135 2
		int ih = ( img == null ? 0 : img.getHeight(null) );
		int iw = ( img == null ? 0 : img.getWidth(null) );
d138 5
a142 2
		Font font = item.getFont();
		if ( font == null ) { font = m_font; }
d145 2
a146 1
		FontMetrics fm = m_g.getFontMetrics(font);
d150 3
a152 2
		int w = 2*m_horizBorder + tw + iw + (tw>0 && iw>0 ? m_imageMargin : 0);
		int h = 2*m_vertBorder + Math.max(th, ih);
d163 3
a165 1
	protected static void getAlignedPoint(Point2D p, GraphItem item, int w, int h, int xAlign, int yAlign) {
d181 1
a181 1
	 * @@see edu.berkeley.guir.prefuse.render.Renderer#render(java.awt.Graphics2D, edu.berkeley.guir.prefuse.GraphItem)
d183 1
a183 1
	public void render(Graphics2D g, GraphItem item) {
d211 2
a212 1
			int x = r.x + m_horizBorder;
a214 1
				int y = r.y+(r.height-img.getHeight(null))/2;
d216 2
a217 2
				if ( itemColor != null && itemColor instanceof Color) {
					int alpha = ((Color)itemColor).getAlpha();
d225 12
a236 2
				g.drawImage(img, x, y, null);
				x += img.getWidth(null) + (s!=null ? m_imageMargin : 0);
d241 4
a244 7
				Font font = item.getFont();
				if ( font == null ) { font = m_font; }
				g.setFont(font);
				
				FontMetrics fm = m_g.getFontMetrics(font);
				int y = r.y+(r.height-fm.getHeight())/2+fm.getAscent();
				g.drawString(s, x, y);
@


1.3
log
@Javadoc update and fixes
@
text
@a12 1
import java.awt.geom.AffineTransform;
d20 1
a20 3
 * Renders an item as a text string.
 * 
 * Apr 28, 2003 - jheer - Created class
d23 1
a23 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
a66 7
	 * @@see edu.berkeley.guir.prefuse.render.ShapeRenderer#getRenderType()
	 */
	protected int getRenderType() {
		return RENDER_TYPE_DRAW_AND_FILL; 
	} //

	/**
a170 7
	 * @@see edu.berkeley.guir.prefuse.render.ShapeRenderer#getGraphicsSpaceTransform(edu.berkeley.guir.prefuse.GraphItem)
	 */
	protected AffineTransform getGraphicsSpaceTransform(GraphItem item) {
		return null;
	} //

	/**
@


1.2
log
@Major commit of updated architecture
@
text
@d134 1
a134 1
	 * @@see edu.berkeley.guir.prefuse.render.Renderer#getRawShape(edu.berkeley.guir.prefuse.GraphItem)
d181 1
a181 1
	 * @@see edu.berkeley.guir.prefuse.render.Renderer#getGraphicsSpaceTransform(edu.berkeley.guir.prefuse.GraphItem)
@


1.1
log
@Initial import
@
text
@d10 1
d191 2
a192 2
		Color fillColor = item.getFillColor();
		Color itemColor = item.getColor();
d197 1
a197 1
					g.setColor(itemColor);
d201 1
a201 1
					g.setColor(fillColor);
d205 1
a205 1
					g.setColor(fillColor);
d207 1
a207 1
					g.setColor(itemColor);
d223 2
a224 2
				if ( itemColor != null ) {
					int alpha = itemColor.getAlpha();
d228 1
a228 1
								((float)itemColor.getAlpha())/255);
d237 1
a237 1
				g.setColor(itemColor);
@

