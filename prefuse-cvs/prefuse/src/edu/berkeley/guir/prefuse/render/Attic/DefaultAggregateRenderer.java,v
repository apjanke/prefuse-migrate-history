head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2004.04.10.20.53.00;	author jheer;	state dead;
branches;
next	1.5;

1.5
date	2004.03.25.04.35.38;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.23.03.54.55;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.16.03.05.17;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.27.21.35.18;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.09.59;	author jheer;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Removed vestigial code
@
text
@package edu.berkeley.guir.prefuse.render;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.PixelGrabber;

import edu.berkeley.guir.prefuse.AggregateItem;
import edu.berkeley.guir.prefuse.VisualItem;

/**
 * Renders AggregateItems as images retrieved from the ImageFactory.
 * 
 * @@author alann
 */
public class DefaultAggregateRenderer implements Renderer {
	private static final double HALF_PI = Math.PI / 2;

	private ImageFactory m_imageFactory = new ImageFactory();
	private AffineTransform at         = new AffineTransform();
	private Point2D         m_tmpPoint = new Point2D.Float();
	private Rectangle2D     m_tmpRect  = new Rectangle2D.Float();
	private int[]           m_pixel    = new int[1];

	/**
	 * override render() to draw an image.
	 */
	public void render(Graphics2D g, VisualItem item) {
		AggregateItem aItem = (AggregateItem) item;
		Image image = m_imageFactory.getImage(aItem);
		if ( image != null )
			g.drawImage(image, getTransform(aItem, image), null);
	} //

	protected AffineTransform getTransform(AggregateItem aItem, Image image) {
		at.setToTranslation(aItem.getX(), aItem.getY());
		at.rotate(aItem.getOrientation() - HALF_PI);
		//at.translate(0, -DefaultNodeRenderer.m_radius);
		at.translate(-image.getWidth(null) / 2, 0);
		return at;
	} //

	/**
	 * Perhaps more efficient than 'createInverse' call on an AffineTransform; does not perform 'new'.
	 */
	protected AffineTransform getInverseTransform(AggregateItem aItem, Image image) {
		at.setToTranslation(image.getWidth(null) / 2, 0);
		//at.translate(0, DefaultNodeRenderer.m_radius);
		at.rotate(HALF_PI - aItem.getOrientation());
		at.translate(-aItem.getX(), -aItem.getY());
		return at;
	} //

    /**
     * @@see edu.berkeley.guir.prefuse.render.Renderer#locatePoint(java.awt.geom.Point2D, edu.berkeley.guir.prefuse.VisualItem)
     */
	public boolean locatePoint(Point2D p, VisualItem item) {
		AggregateItem aItem = (AggregateItem) item;
		Image image = m_imageFactory.getImage(aItem);
		if ( image == null ) { return false; }
		getInverseTransform(aItem, image).transform(p, m_tmpPoint);

		int x = (int) m_tmpPoint.getX();
		int y = (int) m_tmpPoint.getY();
		if (x > 0 && x < image.getWidth(null) && y > 0 && y < image.getHeight(null)) 
		{
			PixelGrabber pg = new PixelGrabber(image, x, y, 1, 1, m_pixel, 0, 1);
			try {
				pg.grabPixels();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			if ((m_pixel[0] >> 24) != 0)
				return true;
		}
		return false;
	} //
	
    /**
     * @@see edu.berkeley.guir.prefuse.render.Renderer#getBoundsRef(edu.berkeley.guir.prefuse.VisualItem)
     */
	public Rectangle2D getBoundsRef(VisualItem item) {
		AggregateItem aItem = (AggregateItem) item;
		Image image = m_imageFactory.getImage(aItem);
		if ( image == null ) { return new Rectangle(-1,-1,0,0);	}
		m_tmpRect.setRect(0,0,image.getWidth(null),image.getHeight(null));
		AffineTransform at = getTransform(aItem, image);
		return at.createTransformedShape(m_tmpRect).getBounds();
	} //

} // end of class DefaultAggregateRenderer
@


1.5
log
@A whole lot of update
@
text
@@


1.4
log
@Major refactor
@
text
@d85 1
a85 1
	public Rectangle getBoundsRef(VisualItem item) {
@


1.3
log
@More Javadoc updates
@
text
@d12 1
a12 1
import edu.berkeley.guir.prefuse.GraphItem;
d31 1
a31 1
	public void render(Graphics2D g, GraphItem item) {
d58 1
a58 1
     * @@see edu.berkeley.guir.prefuse.render.Renderer#locatePoint(java.awt.geom.Point2D, edu.berkeley.guir.prefuse.GraphItem)
d60 1
a60 1
	public boolean locatePoint(Point2D p, GraphItem item) {
d83 1
a83 1
     * @@see edu.berkeley.guir.prefuse.render.Renderer#getBoundsRef(edu.berkeley.guir.prefuse.GraphItem)
d85 1
a85 1
	public Rectangle getBoundsRef(GraphItem item) {
@


1.2
log
@Major commit of updated architecture
@
text
@a0 3
/*
 * Created on Apr 30, 2003
 */
d29 1
a29 1
	 * override render() to draw an image instead of the shape.
d57 3
d82 3
@


1.1
log
@Initial import
@
text
@d44 1
a44 1
		at.translate(0, -DefaultNodeRenderer.m_radius);
d54 1
a54 1
		at.translate(0, DefaultNodeRenderer.m_radius);
d82 1
a82 1
	public Rectangle getBounds(GraphItem item) {
@

