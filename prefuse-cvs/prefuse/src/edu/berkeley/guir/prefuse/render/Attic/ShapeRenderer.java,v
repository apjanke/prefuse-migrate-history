head	1.9;
access;
symbols
	alpha:1.8.0.2
	Root_alpha:1.8
	prefuse-alpha-20051229:1.8
	P20050401_Alpha_PreCHI:1.8;
locks; strict;
comment	@# @;


1.9
date	2006.02.12.18.23.42;	author jheer;	state dead;
branches;
next	1.8;

1.8
date	2004.04.15.00.35.17;	author jheer;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2004.03.25.04.35.38;	author jheer;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.23.19.34.05;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.23.03.54.55;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.16.03.05.17;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.27.21.35.18;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.13.18.42.28;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.09.59;	author jheer;	state Exp;
branches;
next	;

1.8.4.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches;
next	;


desc
@@


1.9
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.render;

import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;

import edu.berkeley.guir.prefuse.VisualItem;

/**
 * <p>An abstract implementation of the Renderer interface supporting the
 * drawing of basic shapes. Subclasses should override the
 * {@@link #getRawShape(edu.berkeley.guir.prefuse.VisualItem) getRawShape}
 * which return the shape to draw. Optionally, subclasses can also override the
 * {@@link #getTransform(edu.berkeley.guir.prefuse.VisualItem)
 * getTransform} to apply a desired <code>AffineTransform</code>
 * to the shape.</p>
 * 
 * <p><b>NOTE:</b> For more efficient rendering, subclasses should use a
 * single shape instance in memory, and update its parameters on each call
 * to getRawShape, rather than allocating a new Shape object each time.
 * Otherwise, a new object will be allocated every time something needs to
 * be drawn. This can significantly reduce performance, especially when
 * there are many things to draw.
 * </p>
 * 
 * @@version 1.0
 * @@author Alan Newberger
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public abstract class ShapeRenderer implements Renderer {
	public static final int RENDER_TYPE_NONE = 0;
	public static final int RENDER_TYPE_DRAW = 1;
	public static final int RENDER_TYPE_FILL = 2;
	public static final int RENDER_TYPE_DRAW_AND_FILL = 3;

    private int m_renderType = RENDER_TYPE_DRAW_AND_FILL;
    protected AffineTransform m_transform = new AffineTransform();
    
	/**
	 * @@see edu.berkeley.guir.prefuse.render.Renderer#render(java.awt.Graphics2D, edu.berkeley.guir.prefuse.VisualItem)
	 */
	public void render(Graphics2D g, VisualItem item) {
		Shape shape = getShape(item);
		if (shape != null)
			drawShape(g, item, shape);
	} //
	
	/**
	 * Draws the specified shape into the provided Graphics context, using
	 * color values determined from the specified VisualItem. Can be used
	 * by subclasses in custom rendering routines. 
	 */
	protected void drawShape(Graphics2D g, VisualItem item, Shape shape) {
	    // set up colors
        Paint itemColor = item.getColor();
        Paint fillColor = item.getFillColor();
        
        // render the shape
        Stroke s = g.getStroke();
        Stroke is = getStroke(item);
        if ( is != null ) g.setStroke(is);
		switch (getRenderType(item)) {
			case RENDER_TYPE_DRAW :
				g.setPaint(itemColor);
				g.draw(shape);
				break;
			case RENDER_TYPE_FILL :
				g.setPaint(fillColor);
				g.fill(shape);
				break;
			case RENDER_TYPE_DRAW_AND_FILL :
				g.setPaint(fillColor);
				g.fill(shape);
				g.setPaint(itemColor);
				g.draw(shape);
				break;
		}
        g.setStroke(s);
	} //

	/**
	 * Returns the shape describing the boundary of an item. Shape should be in
	 * image space.
	 * @@param item the item for which to get the Shape
	 */
	public Shape getShape(VisualItem item) {
		AffineTransform at = getTransform(item);
		Shape rawShape = getRawShape(item);
		return (at == null? rawShape : at.createTransformedShape(rawShape));
	} //

	/**
	 * Return a non-transformed shape for the visual representation of the
	 * item. Subclasses must implement this method.
	 * @@param item the VisualItem being drawn
	 * @@return the "raw", untransformed shape.
	 */
	protected abstract Shape getRawShape(VisualItem item);

    /**
     * Returns the Stroke used to draw the shapes. By default, this method
     * returns null to indicate the default stroke. Subclasses can override
     * this method to control custom stroke assignment.
     * @@param item the VisualItem being drawn
     * @@return the Stroke to use for drawing the item
     */
    protected BasicStroke getStroke(VisualItem item) {
        return null;
    } //
    
	/**
	 * Return the graphics space transform applied to this item's shape, if any.
     * Subclasses can implement this method, otherwise it will return null 
     * to indicate no transformation is needed.
	 * @@param item the VisualItem
	 * @@return the graphics space transform, or null if none
	 */
	protected AffineTransform getTransform(VisualItem item) {
        return null;
    } //

	/**
	 * Returns a value indicating if a shape is drawn by its outline, by a 
     * fill, or both. The default is to draw both.
	 * @@return the rendering type
	 */
	public int getRenderType(VisualItem item) {
		return m_renderType;
	} //
    
    /**
     * Sets a value indicating if a shape is drawn by its outline, by a fill, 
     * or both. The default is to draw both.
     * @@param type the new rendering type. Should be one of
     *  RENDER_TYPE_NONE, RENDER_TYPE_DRAW, RENDER_TYPE_FILL, or
     *  RENDER_TYPE_DRAW_AND_FILL.
     */
    public void setRenderType(int type) {
        if ( type < RENDER_TYPE_NONE || type > RENDER_TYPE_DRAW_AND_FILL ) {
            throw new IllegalArgumentException("Unrecognized render type.");
        }
        m_renderType = type;
    } //
    
	/**
	 * @@see edu.berkeley.guir.prefuse.render.Renderer#locatePoint(java.awt.geom.Point2D, edu.berkeley.guir.prefuse.VisualItem)
	 */
	public boolean locatePoint(Point2D p, VisualItem item) {
		Shape s = getShape(item);
		return (s != null ? s.contains(p) : false);
	} //

	/**
	 * @@see edu.berkeley.guir.prefuse.render.Renderer#getBoundsRef(edu.berkeley.guir.prefuse.VisualItem)
	 */
	public Rectangle2D getBoundsRef(VisualItem item) {
		Shape s = getShape(item);
        if ( s == null ) {
            return new Rectangle(-1,-1,0,0);
        } else {
            Rectangle2D r = s.getBounds2D();
            BasicStroke st = (BasicStroke)getStroke(item);
            if ( st != null ) {
                double w = st.getLineWidth();
                double w2 = w/2.0;
                r.setFrame(r.getX()-w2,r.getY()-w2,
                    r.getWidth()+w,r.getHeight()+w);
            }
            return r;
        }
	} //

} // end of interface Renderer
@


1.8
log
@Application-driven updates
@
text
@@


1.8.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.7
log
@A whole lot of update
@
text
@d68 1
a68 1
		switch (getRenderType()) {
d133 1
a133 1
	public int getRenderType() {
@


1.6
log
@More Javadoc updates
@
text
@a3 1
import java.awt.Color;
d11 1
a61 1
        if ( itemColor == null ) itemColor = Color.BLACK;
a62 1
        if ( fillColor == null ) fillColor = Color.LIGHT_GRAY;
d162 1
a162 1
	public Rectangle getBoundsRef(VisualItem item) {
d167 1
a167 1
            Rectangle r = s.getBounds();
d170 4
a173 5
                double lw = st.getLineWidth();
                int w = (int)Math.round(st.getLineWidth());
                int w2 = (int)Math.round(st.getLineWidth()/2);
                r.x -= w2; r.y -= w2;
                r.width += w; r.height += w;
@


1.5
log
@Major refactor
@
text
@d16 1
a16 1
 * An abstract implementation of the Renderer interface supporting the
d18 1
a18 1
 * {@@link getRawShape(edu.berkeley.guir.prefuse.VisualItem) getRawShape}
d20 5
a24 3
 * {@@link getGraphicsSpaceTransform(edu.berkeley.guir.prefuse.VisualItem)
 * getGraphicsSpaceTransform} to apply a desired <code>AffineTransform</code>
 * to the shape. For more efficient rendering, subclasses should use a
d27 4
@


1.4
log
@More Javadoc updates
@
text
@d3 1
d9 1
d13 1
a13 1
import edu.berkeley.guir.prefuse.GraphItem;
d18 1
a18 1
 * {@@link getRawShape(edu.berkeley.guir.prefuse.GraphItem) getRawShape}
d20 1
a20 1
 * {@@link getGraphicsSpaceTransform(edu.berkeley.guir.prefuse.GraphItem)
d37 1
d40 1
a40 1
	 * @@see edu.berkeley.guir.prefuse.render.Renderer#render(java.awt.Graphics2D, edu.berkeley.guir.prefuse.GraphItem)
d42 1
a42 1
	public void render(Graphics2D g, GraphItem item) {
d50 1
a50 1
	 * color values determined from the specified GraphItem. Can be used
d53 3
a55 2
	protected void drawShape(Graphics2D g, GraphItem item, Shape shape) {
	    Paint itemColor = item.getColor();
d58 6
a63 1
        if ( fillColor == null ) fillColor = Color.BLACK;
d79 2
a80 1
		}		
d88 2
a89 3
	public Shape getShape(GraphItem item) {
        // TODO? implement a clean way of caching transformed Shapes
		AffineTransform at = getGraphicsSpaceTransform(item);
d91 1
a91 5
		if (at == null) {
			return rawShape;
		} else {
			return at.createTransformedShape(rawShape);
		}
d97 1
a97 1
	 * @@param item the GraphItem
d100 1
a100 1
	protected abstract Shape getRawShape(GraphItem item);
d102 11
d114 4
a117 4
	 * Return the graphics space transform for this item, if any. Subclasses
	 * can implement this method, otherwise it will return null to indicate
     * no transformation is needed.
	 * @@param item the GraphItem
d120 2
a121 2
	protected AffineTransform getGraphicsSpaceTransform(GraphItem item) {
        return null;   
d148 1
a148 1
	 * @@see edu.berkeley.guir.prefuse.render.Renderer#locatePoint(java.awt.geom.Point2D, edu.berkeley.guir.prefuse.GraphItem)
d150 1
a150 1
	public boolean locatePoint(Point2D p, GraphItem item) {
d156 1
a156 1
	 * @@see edu.berkeley.guir.prefuse.render.Renderer#getBoundsRef(edu.berkeley.guir.prefuse.GraphItem)
d158 1
a158 1
	public Rectangle getBoundsRef(GraphItem item) {
d160 14
a173 1
		return (s != null ? s.getBounds() : new Rectangle(-1, -1, 0, 0));
@


1.3
log
@Major commit of updated architecture
@
text
@d14 9
a22 3
 * Interface for GraphItem renderers. Default implementation is suitable for shape drawing.
 * 
 * Apr 22, 2003 - jheer - Created class
d26 1
a26 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
d34 2
d75 1
a75 2
	 * image space. 
	 * TODO? implement a clean way of caching transformed Shapes
d79 1
d99 2
a100 2
	 * must implement this method, but it may return null if no transformation
	 * is needed.
d104 3
a106 1
	protected abstract AffineTransform getGraphicsSpaceTransform(GraphItem item);
d109 2
a110 2
	 * Override to control whether a shape is drawn by its outline, by a fill, or both.
	 * Default is to draw both.
d113 18
a130 4
	protected int getRenderType() {
		return RENDER_TYPE_DRAW_AND_FILL;
	}

@


1.2
log
@Renderer tweaking
@
text
@d5 1
d43 1
a43 1
        Color itemColor = item.getColor();
d45 1
a45 1
        Color fillColor = item.getFillColor();
d49 1
a49 1
				g.setColor(itemColor);
d53 1
a53 1
				g.setColor(fillColor);
d57 1
a57 1
				g.setColor(fillColor);
d59 1
a59 1
				g.setColor(itemColor);
d116 1
a116 1
	 * @@see edu.berkeley.guir.prefuse.render.Renderer#getBounds(edu.berkeley.guir.prefuse.GraphItem)
d118 1
a118 1
	public Rectangle getBounds(GraphItem item) {
@


1.1
log
@Initial import
@
text
@d3 1
d42 4
d48 1
a48 1
				g.setColor(item.getColor());
d52 1
a52 1
				g.setColor(item.getFillColor());
d56 1
a56 1
				g.setColor(item.getFillColor());
d58 1
a58 1
				g.setColor(item.getColor());
@

