head	1.5;
access;
symbols
	alpha:1.4.0.2
	Root_alpha:1.4
	prefuse-alpha-20051229:1.4
	P20050401_Alpha_PreCHI:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.02.12.18.23.42;	author jheer;	state dead;
branches;
next	1.4;

1.4
date	2005.09.24.17.45.11;	author jheer;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2005.06.07.05.10.59;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.01.01.25.16;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.23.02.41.11;	author jheer;	state Exp;
branches;
next	;

1.4.4.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches;
next	;


desc
@@


1.5
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.render;

import java.awt.Shape;
import java.awt.geom.GeneralPath;

import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.util.GeometryLib;

/**
 * Renders a polygon. Polygon points must be assigned prior to rendering,
 * binding an array of float values (alternating x,y value) to the "polygon"
 * viz attribute. For example, create an array pts of polygon points and then
 * use item.setVizAttribute("polygon", pts). A Float.NaN value can be used to
 * mark the end point of the polygon for float arrays larger than their
 * contained points.
 * 
 * The edge type parameter (one of EDGE_LINE or EDGE_CURVE) determines how the
 * edges of the polygon are drawn. EDGE_LINE results in a standard polygon, with
 * straight lines drawn between each sequential point. EDGE_CURVE causes the
 * edges of the polygon to be interpolated as a cardinal spline, giving a smooth
 * blob-like appearance to the shape.
 *  
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class PolygonRenderer extends ShapeRenderer {

    public static final int EDGE_LINE  = 0;
    public static final int EDGE_CURVE = 1;
    
    private int   m_edgeType = EDGE_LINE;
    private float m_controlFrac = 0.10f;
    
    private GeneralPath m_path = new GeneralPath();
    
    public PolygonRenderer() {
        this(EDGE_LINE);
    } //
    
    public PolygonRenderer(int edgeType) {
        m_edgeType = edgeType;
    } //

    public int getEdgeType() {
        return m_edgeType;
    } //
    
    public void setEdgeType(int edgeType) {
        if ( edgeType != EDGE_LINE && edgeType != EDGE_CURVE ) {
            throw new IllegalArgumentException("Unknown edge type.");
        }
        m_edgeType = edgeType;
    } //
    
    /**
     * @@see edu.berkeley.guir.prefuse.render.ShapeRenderer#getRawShape(edu.berkeley.guir.prefuse.VisualItem)
     */
    protected Shape getRawShape(VisualItem item) {
        float[] poly = (float[])item.getVizAttribute("polygon");
        if ( poly == null ) { return null; }
        
        float x = (float)item.getX();
        float y = (float)item.getY();
        
        if ( m_edgeType == EDGE_LINE ) {
            m_path.reset();
            m_path.moveTo(x+poly[0],y+poly[1]);
            for ( int i=2; i<poly.length; i+=2 ) {
                if ( Float.isNaN(poly[i]) ) break;
                m_path.lineTo(x+poly[i],y+poly[i+1]);
            }
            m_path.closePath();
            return m_path;
        } else if ( m_edgeType == EDGE_CURVE ) {
            m_path.reset();
            return GeometryLib.cardinalSpline(m_path, poly, 
                    m_controlFrac, true, x, y);
        }
        return null;
    } //

} // end of class PolygonRenderer
@


1.4
log
@Updated PolygonRenderer to use new GeometryLib routine.
@
text
@@


1.4.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.3
log
@Simplified implementation to use cardinal spline
@
text
@a3 1
import java.awt.geom.AffineTransform;
d13 9
a21 1
 * use item.setVizAttribute("polygon", pts).
d31 4
a34 2
    private int     edgeType = EDGE_LINE;
    private float   controlFrac = 0.10f;
d41 1
a41 1
        this.edgeType = edgeType;
d45 1
a45 1
        return edgeType;
d49 4
a52 1
        this.edgeType = edgeType;
d60 2
d65 3
a67 3
        if ( edgeType == EDGE_LINE ) {
            GeneralPath path = new GeneralPath();
            path.moveTo(x+poly[0],y+poly[1]);
d69 2
a70 12
                path.lineTo(x+poly[i],y+poly[i+1]);
            }
            path.closePath();
            return path;
        } else if ( edgeType == EDGE_CURVE ) {
            GeneralPath path = GeometryLib.cardinalSpline(poly,.25f,true);
            if ( x != 0 || y != 0 ) {
                Shape s = path.createTransformedShape(
                        AffineTransform.getTranslateInstance(x,y));
                return s;
            } else {
                return path;
d72 6
@


1.2
log
@Made quad curve closure of polygon use corrected amplitude
@
text
@d4 1
d8 1
d22 1
a22 2
    public static final int EDGE_QUAD  = 1;
    public static final int EDGE_CUBIC = 2;
a50 2
        GeneralPath path = new GeneralPath();
        path.moveTo(x+poly[0],y+poly[1]);
d52 2
d57 8
a64 7
        } else {
            // first calculate the centroid of the polygon
            float cx = 0f, cy = 0f;
            float[] centroid = (float[])item.getVizAttribute("centroid");
            if ( centroid != null && centroid.length == 2 ) {
                cx = centroid[0];
                cy = centroid[1];
d66 1
a66 91
	            for ( int k=0; k<poly.length; k+=2 ) {
	                cx += poly[k];
	                cy += poly[k+1];
	            }
	            cx = cx/((float)(poly.length/2)) + x;
	            cy = cy/((float)(poly.length/2)) + y;
            }
            
            if ( edgeType == EDGE_CUBIC ) {
	            // now go around computing control points
	            int i;
	            float frac = controlFrac;
	            float amp;
	            for ( i=2; i<poly.length; i+=2 ) {
	                float x1 = x+poly[i-2], y1 = y+poly[i-1];
	                float x2 = x+poly[i],   y2 = y+poly[i+1];
	                amp = frac*(float)Math.sqrt(Math.pow(x2-x1,2)+Math.pow(y2-y1,2));
	                
	                float vx = x1-cx, vy = y1-cy;
	                float norm = (float)Math.sqrt(vx*vx+vy*vy);
	                float p1x = x1 - amp*vy/norm;
	                float p1y = y1 + amp*vx/norm;
	                
	                vx = x2-cx; vy = y2-cy;
	                norm = (float)Math.sqrt(vx*vx+vy*vy);
	                float p2x = x2 + amp*vy/norm;
	                float p2y = y2 - amp*vx/norm;
	                
	                path.curveTo(p1x,p1y,p2x,p2y,x2,y2);
	            }
	            
	            float x1 = x+poly[i-2], y1 = y+poly[i-1];
	            float x2 = x+poly[0],   y2 = y+poly[1];
	            amp = frac*(float)Math.sqrt(Math.pow(x2-x1,2)+Math.pow(y2-y1,2));
	            
	            float vx = x1-cx, vy = y1-cy;
	            float norm = (float)Math.sqrt(vx*vx+vy*vy);
	            float p1x = x1 - amp*vy/norm;
	            float p1y = y1 + amp*vx/norm;
	            
	            vx = x2-cx; vy = y2-cy;
	            norm = (float)Math.sqrt(vx*vx+vy*vy);
	            float p2x = x2 + amp*vy/norm;
	            float p2y = y2 - amp*vx/norm;
	            
	            path.curveTo(p1x,p1y,p2x,p2y,x2,y2);
            } else if ( edgeType == EDGE_QUAD ) {
	            // now go around computing control points
	            float frac = controlFrac;
	            int i;
	            float amp;
	            for ( i=2; i<poly.length; i+=2 ) {
	                float x1 = x+poly[i-2], y1 = y+poly[i-1];
	                float x2 = x+poly[i],   y2 = y+poly[i+1];
	                amp = frac*(float)Math.sqrt(Math.pow(x2-x1,2)+Math.pow(y2-y1,2));
	                
	                float mx = x + x1 + (x2-x1)/2f;
	                float my = y + y1 + (y2-y1)/2f;
	                
	                float vx = mx-cx, vy = my-cy;
	                float norm = (float)Math.sqrt(vx*vx+vy*vy);
	                float px = mx + amp*vx/norm;
	                float py = my + amp*vy/norm;
	                path.quadTo(px,py,x2,y2);
	                
//	                float mx = x + poly[i-2] + (poly[i]-poly[i-2])/2f;
//	                float my = y + poly[i-1] + (poly[i+1]-poly[i-1])/2f;
//	                float px = mx + frac*(mx-cx);
//	                float py = my + frac*(my-cy);
//	                path.quadTo(px,py,x+poly[i],y+poly[i+1]);
	            }
	            
	            float x1 = x+poly[i-2], y1 = y+poly[i-1];
	            float x2 = x+poly[0],   y2 = y+poly[1];
	            amp = frac*(float)Math.sqrt(Math.pow(x2-x1,2)+Math.pow(y2-y1,2));
	            
	            float mx = x + x1 + (x2-x1)/2f;
                float my = y + y1 + (y2-y1)/2f;
                
                float vx = mx-cx, vy = my-cy;
                float norm = (float)Math.sqrt(vx*vx+vy*vy);
                float px = mx + amp*vx/norm;
                float py = my + amp*vy/norm;
                path.quadTo(px,py,x2,y2);
	            
	            // close off the loop
//	            float mx = x + poly[i-2] + (poly[0]-poly[i-2])/2f;
//	            float my = y + poly[i-1] + (poly[1]-poly[i-1])/2f;
//	            float px = mx + frac*(mx-cx);
//	            float py = my + frac*(my-cy);
//	            path.quadTo(px,py,x+poly[0],y+poly[1]);
d69 1
a69 2
        path.closePath();
        return path;
@


1.1
log
@Renderer updates, added PolygonRenderer
@
text
@d24 1
a24 1
    private float   controlFrac = 0.15f;
d80 1
a80 1
	                amp = frac*(float)Math.abs(Math.sqrt(Math.pow(x2-x1,2)+Math.pow(y2-y1,2)));
d97 1
a97 1
	            amp = frac*(float)Math.abs(Math.sqrt(Math.pow(x2-x1,2)+Math.pow(y2-y1,2)));
d112 1
a112 1
	            float frac = 0.1f;
d114 1
d116 18
a133 5
	                float mx = x + poly[i-2] + (poly[i]-poly[i-2])/2f;
	                float my = y + poly[i-1] + (poly[i+1]-poly[i-1])/2f;
	                float px = mx + frac*(mx-cx);
	                float py = my + frac*(my-cy);
	                path.quadTo(px,py,x+poly[i],y+poly[i+1]);
d135 14
d150 5
a154 5
	            float mx = x + poly[i-2] + (poly[0]-poly[i-2])/2f;
	            float my = y + poly[i-1] + (poly[1]-poly[i-1])/2f;
	            float px = mx + frac*(mx-cx);
	            float py = my + frac*(my-cy);
	            path.quadTo(px,py,x+poly[0],y+poly[1]);
@

