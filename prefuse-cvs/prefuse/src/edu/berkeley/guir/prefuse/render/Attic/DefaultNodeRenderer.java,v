head	1.8;
access;
symbols
	alpha:1.7.0.2
	Root_alpha:1.7
	prefuse-alpha-20051229:1.7
	P20050401_Alpha_PreCHI:1.7;
locks; strict;
comment	@# @;


1.8
date	2006.02.12.18.23.42;	author jheer;	state dead;
branches;
next	1.7;

1.7
date	2004.11.08.02.53.31;	author jheer;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2004.03.23.19.34.05;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.23.03.54.55;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.16.03.05.17;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.27.21.35.18;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.13.18.42.28;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.09.59;	author jheer;	state Exp;
branches;
next	;

1.7.4.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches;
next	;


desc
@@


1.8
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.render;

import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import edu.berkeley.guir.prefuse.VisualItem;

/**
 * A default implementation of a node renderer that draws itself as a circle.
 * 
 * @@author alann
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class DefaultNodeRenderer extends ShapeRenderer {

	private int m_radius = 5;
	private Ellipse2D m_circle =
		new Ellipse2D.Double(0, 0, 2 * m_radius, 2 * m_radius);

    /**
     * Creates a new DefaultNodeRenderer with default base
     * radius (5 pixels).
     */
    public DefaultNodeRenderer() {
    } //
    
    /**
     * Creates a new DefaultNodeRenderer with given base radius.
     * @@param r the base radius for node circles
     */
    public DefaultNodeRenderer(int r) {
       setRadius(r);
    } //
    
    /**
     * Sets the radius of the circle drawn to represent a node.
     * @@param r the radius value to set
     */
    public void setRadius(int r) {
        m_radius = r;
        m_circle.setFrameFromCenter(0,0,r,r);
    } //
    
    /**
     * Gets the radius of the circle drawn to represent a node.
     * @@return the radius value
     */
    public int getRadius() {
        return m_radius;
    } //
    
	/**
	 * @@see edu.berkeley.guir.prefuse.render.ShapeRenderer#getRawShape(edu.berkeley.guir.prefuse.VisualItem)
	 */
	protected Shape getRawShape(VisualItem item) {
        double r = m_radius * item.getSize();
        double x = item.getX(), y = item.getY();
        if ( Double.isNaN(x) ) x = 0.0;
        if ( Double.isNaN(y) ) y = 0.0;
        m_circle.setFrameFromCenter(x,y,x+r,y+r);
		return m_circle;
	} //

} // end of class DefaultNodeRenderer
@


1.7
log
@Fixed multicaster bug, other small updates
@
text
@@


1.7.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.6
log
@More Javadoc updates
@
text
@d57 2
@


1.5
log
@Major refactor
@
text
@d45 1
a45 1
     * @@param r the radius value
@


1.4
log
@More Javadoc updates
@
text
@d5 1
a5 1
import edu.berkeley.guir.prefuse.GraphItem;
d17 1
a17 1
		new Ellipse2D.Float(0, 0, 2 * m_radius, 2 * m_radius);
d52 1
a52 1
	 * @@see edu.berkeley.guir.prefuse.render.ShapeRenderer#getRawShape(edu.berkeley.guir.prefuse.GraphItem)
d54 4
a57 3
	protected Shape getRawShape(GraphItem item) {
        double r = m_radius*item.getSize();
        m_circle.setFrame(item.getX()-r,item.getY()-r,2*r,2*r);
@


1.3
log
@Major commit of updated architecture
@
text
@a0 3
/*
 * Created on Apr 25, 2003
 */
a3 1
import java.awt.geom.AffineTransform;
d8 1
a8 1
 * A default implementation of a node that draws itself as a circle.
d11 1
a13 2
	protected static Object POSITION_KEY = new Object();
	protected static Object POSITION_TRANSFORM_KEY = new Object();
a14 2
	// m_radius is class-level, used by aggregate renderer 
	// right now to determine an offset
d19 19
d43 8
d55 2
a56 2
        m_circle.setFrame(item.getX()-m_radius,item.getY()-m_radius,
                2*m_radius,2*m_radius);
a59 14
	/**
	 * @@see edu.berkeley.guir.prefuse.render.ShapeRenderer#getRenderType()
	 */
	protected int getRenderType() {
		return RENDER_TYPE_DRAW_AND_FILL;
	} //

    /**
     * @@see edu.berkeley.guir.prefuse.render.ShapeRenderer#getGraphicsSpaceTransform(edu.berkeley.guir.prefuse.GraphItem)
     */
    protected AffineTransform getGraphicsSpaceTransform(GraphItem item) {
        return null;
    } //

@


1.2
log
@Renderer tweaking
@
text
@a9 1
import edu.berkeley.guir.prefuse.NodeItem;
d22 1
a22 1
	static int m_radius = 5;
d26 5
d35 2
d47 6
a52 9
	/**
	 * @@see edu.berkeley.guir.prefuse.render.ShapeRenderer#getGraphicsSpaceTransform(edu.berkeley.guir.prefuse.GraphItem)
	 */
	protected AffineTransform getGraphicsSpaceTransform(GraphItem item) {
		NodeItem nItem = (NodeItem) item;
		AffineTransform at = new AffineTransform();
		at.translate(nItem.getX() - m_radius, nItem.getY() - m_radius);
		return at;
	} //
@


1.1
log
@Initial import
@
text
@d38 1
a38 1
		return RENDER_TYPE_FILL;
@

