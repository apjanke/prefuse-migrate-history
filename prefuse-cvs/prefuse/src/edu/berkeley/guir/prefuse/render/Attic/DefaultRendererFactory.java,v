head	1.9;
access;
symbols
	alpha:1.8.0.2
	Root_alpha:1.8
	prefuse-alpha-20051229:1.8
	P20050401_Alpha_PreCHI:1.8;
locks; strict;
comment	@# @;


1.9
date	2006.02.12.18.23.42;	author jheer;	state dead;
branches;
next	1.8;

1.8
date	2005.03.23.02.41.12;	author jheer;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2005.01.11.02.42.56;	author jheer;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.10.20.53.00;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.05.22.52.30;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.23.03.54.55;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.16.03.05.17;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.08.20.05.51;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.08.21.09.59;	author jheer;	state Exp;
branches;
next	;

1.8.4.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches;
next	;


desc
@@


1.9
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.render;

import java.util.HashMap;
import java.util.Map;

import edu.berkeley.guir.prefuse.ItemRegistry;
import edu.berkeley.guir.prefuse.VisualItem;

/**
 * Default factory from which to retrieve VisualItem renderers. Assumes only one
 * type of renderer each for NodeItems, EdgeItems, and AggregateItems.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class DefaultRendererFactory implements RendererFactory {

    private Map itemClassMap;

	/**
	 * Default constructor. Assumes default renderers for each VisualItem type.
	 */
	public DefaultRendererFactory() {
		this(new DefaultNodeRenderer(),
		     new DefaultEdgeRenderer(),
		     null);
	} //
	
	/**
	 * Constructor.
	 * @@param nodeRenderer the Renderer to use for NodeItems
	 */
	public DefaultRendererFactory(Renderer nodeRenderer)
	{
	    this(nodeRenderer, null, null);
	} //
	
	/**
	 * Constructor.
	 * @@param nodeRenderer the Renderer to use for NodeItems
	 * @@param edgeRenderer the Renderer to use for EdgeItems
	 */
	public DefaultRendererFactory(Renderer nodeRenderer, 
								  Renderer edgeRenderer)
	{
	    this(nodeRenderer, edgeRenderer, null);
	} //
	
	/**
	 * Constructor.
	 * @@param nodeRenderer the Renderer to use for NodeItems
	 * @@param edgeRenderer the Renderer to use for EdgeItems
	 * @@param aggrRenderer the Renderer to use for AggregateItems
	 */
	public DefaultRendererFactory(Renderer nodeRenderer, 
								  Renderer edgeRenderer, 
								  Renderer aggrRenderer)
	{
	    itemClassMap = new HashMap();
	    if ( nodeRenderer != null ) {
	        itemClassMap.put(ItemRegistry.DEFAULT_NODE_CLASS, nodeRenderer);
	    }
	    if ( edgeRenderer != null ) {
	        itemClassMap.put(ItemRegistry.DEFAULT_EDGE_CLASS, edgeRenderer);
	    }
	    if ( aggrRenderer != null ) {
	        itemClassMap.put(ItemRegistry.DEFAULT_AGGR_CLASS, aggrRenderer);
	    }
	} //

	/**
	 * @@see edu.berkeley.guir.prefuse.render.RendererFactory#getRenderer(edu.berkeley.guir.prefuse.VisualItem)
	 */
	public Renderer getRenderer(VisualItem item) {
	    return (Renderer)itemClassMap.get(item.getItemClass());
	} //
	
	public Renderer getRenderer(String itemClass) {
	    return (Renderer)itemClassMap.get(itemClass);
	} //
	
	public void addRenderer(String itemClass, Renderer renderer) {
	    itemClassMap.put(itemClass, renderer);
	} //
	
	public Renderer removeRenderer(String itemClass) {
	    return (Renderer)itemClassMap.remove(itemClass);
	} //
	
	/**
     * Returns the Renderer for AggregateItems
	 * @@return the Renderer for AggregateItems
	 */
	public Renderer getAggregateRenderer() {
		return (Renderer)itemClassMap.get(ItemRegistry.DEFAULT_AGGR_CLASS);
	} //

	/**
     * Returns the Renderer for EdgeItems
	 * @@return the Renderer for EdgeItems
	 */
	public Renderer getEdgeRenderer() {
	    return (Renderer)itemClassMap.get(ItemRegistry.DEFAULT_EDGE_CLASS);
	} //

	/**
     * Returns the Renderer for NodeItems
	 * @@return the Renderer for NodeItems
	 */
	public Renderer getNodeRenderer() {
	    return (Renderer)itemClassMap.get(ItemRegistry.DEFAULT_NODE_CLASS);
	} //

	/**
     * Sets the Renderer for AggregateItems
	 * @@param renderer the new Renderer for AggregateItems
	 */
	public void setAggregateRenderer(Renderer renderer) {
	    itemClassMap.put(ItemRegistry.DEFAULT_AGGR_CLASS, renderer);
	} //

	/**
     * Sets the Renderer for EdgeItems
	 * @@param renderer the new Renderer for EdgeItems
	 */
	public void setEdgeRenderer(Renderer renderer) {
	    itemClassMap.put(ItemRegistry.DEFAULT_EDGE_CLASS, renderer);
	} //

	/**
     * Sets the Renderer for NodeItems
	 * @@param renderer the new Renderer for NodeItems
	 */
	public void setNodeRenderer(Renderer renderer) {
	    itemClassMap.put(ItemRegistry.DEFAULT_NODE_CLASS, renderer);
	} //

} // end of class DefaultRendererFactory
@


1.8
log
@Renderer updates, added PolygonRenderer
@
text
@@


1.8.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.7
log
@Added additional constructors
@
text
@d3 4
a6 2
import edu.berkeley.guir.prefuse.AggregateItem;
import edu.berkeley.guir.prefuse.EdgeItem;
a7 1
import edu.berkeley.guir.prefuse.NodeItem;
d18 1
a18 3
	private Renderer m_nodeRenderer;
	private Renderer m_edgeRenderer;
	private Renderer m_aggrRenderer;
d59 10
a68 3
		m_nodeRenderer = nodeRenderer;
		m_edgeRenderer = edgeRenderer;
		m_aggrRenderer = aggrRenderer;
d75 13
a87 9
        if ( item instanceof AggregateItem ) {
            return m_aggrRenderer;
        } else if ( item instanceof NodeItem ) {
			return m_nodeRenderer;
		} else if ( item instanceof EdgeItem ) {			
			return m_edgeRenderer;
		} else {
			return null;
		}
d95 1
a95 1
		return m_aggrRenderer;
d103 1
a103 1
		return m_edgeRenderer;
d111 1
a111 1
		return m_nodeRenderer;
d119 1
a119 1
		m_aggrRenderer = renderer;
d127 1
a127 1
		m_edgeRenderer = renderer;
d135 1
a135 1
		m_nodeRenderer = renderer;
@


1.6
log
@Removed vestigial code
@
text
@d33 20
@


1.5
log
@Fixed bad ordering in DefaultRendererFactory
@
text
@d27 1
a27 1
		     new DefaultAggregateRenderer());
@


1.4
log
@Major refactor
@
text
@d49 3
a51 1
		if ( item instanceof NodeItem ) {
a54 2
		} else if ( item instanceof AggregateItem ) {
			return m_aggrRenderer;
@


1.3
log
@More Javadoc updates
@
text
@d5 1
a5 1
import edu.berkeley.guir.prefuse.GraphItem;
d9 1
a9 1
 * Default factory from which to retrieve GraphItem renderers. Assumes only one
d22 1
a22 1
	 * Default constructor. Assumes default renderers for each GraphItem type.
d46 1
a46 1
	 * @@see edu.berkeley.guir.prefuse.render.RendererFactory#getRenderer(edu.berkeley.guir.prefuse.GraphItem)
d48 1
a48 1
	public Renderer getRenderer(GraphItem item) {
@


1.2
log
@Javadoc update and fixes
@
text
@d9 2
a10 4
 * Factory from which to retrieve GraphItem renderers. Assumes only one type
 * of renderer each for NodeItems, EdgeItems, and AggregateItems.
 * 
 * Apr 22, 2003 - jheer - Created class
d13 1
a13 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
@


1.1
log
@Initial import
@
text
@d63 2
a64 1
	 * @@return
d71 2
a72 1
	 * @@return
d79 2
a80 1
	 * @@return
d87 2
a88 1
	 * @@param renderer
d95 2
a96 1
	 * @@param renderer
d103 2
a104 1
	 * @@param renderer
@

