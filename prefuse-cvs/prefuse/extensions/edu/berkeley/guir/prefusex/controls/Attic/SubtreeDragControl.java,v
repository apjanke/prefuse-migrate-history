head	1.4;
access;
symbols
	alpha:1.3.0.2
	Root_alpha:1.3
	prefuse-alpha-20051229:1.3
	P20050401_Alpha_PreCHI:1.3;
locks; strict;
comment	@# @;


1.4
date	2006.02.11.06.38.43;	author jheer;	state dead;
branches;
next	1.3;

1.3
date	2004.03.23.03.55.41;	author jheer;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2004.03.15.03.33.27;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.08.21.41.27;	author jheer;	state Exp;
branches;
next	;

1.3.4.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches;
next	;


desc
@@


1.4
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefusex.controls;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;

import javax.swing.SwingUtilities;

import edu.berkeley.guir.prefuse.Display;
import edu.berkeley.guir.prefuse.NodeItem;
import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.event.ControlAdapter;

/**
 * Changes the location of a whole subtree when dragged on screen. This is
 * similar to the {@@link DragControl DragControl} class, except that it
 * moves the entire visible subtree rooted at an item, rather than just the
 * item itself.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class SubtreeDragControl extends ControlAdapter {

    private VisualItem activeItem;
    private Point2D down = new Point2D.Double();
    private Point2D tmp = new Point2D.Double();
    private boolean wasFixed;
    private boolean repaint = true;
    
    /**
     * Creates a new subtree drag control that issues repaint requests as an
     * item is dragged.
     */
    public SubtreeDragControl() {
    } //
    
    /**
     * Creates a new subtree drag control that optionally issues repaint 
     * requests as an item is dragged.
     * @@param repaint indicates whether or not repaint requests are issued
     *  as drag events occur. This can be set to false if other activities
     *  (for example, a continuously running force simulation) are already
     *  issuing repaint events.
     */
    public SubtreeDragControl(boolean repaint) {
        this.repaint = repaint;
    } //
    
    public void itemEntered(VisualItem item, MouseEvent e) {
        if ( !(item instanceof NodeItem) ) return;
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    } //
    
    public void itemExited(VisualItem item, MouseEvent e) {
        if ( !(item instanceof NodeItem) ) return;
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getDefaultCursor());
    } //
    
    public void itemPressed(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !(item instanceof NodeItem) ) return;
        Display d = (Display)e.getComponent();
        down = d.getAbsoluteCoordinate(e.getPoint(), down);
        activeItem = item;
        wasFixed = item.isFixed();
        item.setFixed(true);
    } //
    
    public void itemReleased(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !(item instanceof NodeItem) ) return;
        activeItem = null;
        item.setFixed(wasFixed);
    } //
    
    public void itemDragged(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !(item instanceof NodeItem) ) return;
        Display d = (Display)e.getComponent();
        tmp = d.getAbsoluteCoordinate(e.getPoint(), tmp);
        double dx = tmp.getX()-down.getX();
        double dy = tmp.getY()-down.getY();
        updateLocations((NodeItem)item, dx, dy);
        down.setLocation(tmp);
        if ( repaint )
            item.getItemRegistry().repaint();
    } //
    
    private void updateLocations(NodeItem n, double dx, double dy) {
        Point2D p = n.getLocation();
        n.updateLocation(p.getX()+dx,p.getY()+dy);
        n.setLocation(p.getX()+dx,p.getY()+dy);
        for ( int i=0; i<n.getChildCount(); i++ )
            updateLocations((NodeItem)n.getChild(i),dx,dy);
    } //
    
} // end of class SubtreeDragControl
@


1.3
log
@Major refactor
@
text
@@


1.3.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.2
log
@Updated Javadoc
@
text
@d6 2
a7 1
import java.util.Iterator;
a9 2
import edu.berkeley.guir.prefuse.GraphItem;
import edu.berkeley.guir.prefuse.ItemRegistry;
d11 1
d25 1
a25 1
    private GraphItem activeItem;
d50 1
a50 1
    public void itemEntered(GraphItem item, MouseEvent e) {
d56 1
a56 1
    public void itemExited(GraphItem item, MouseEvent e) {
d62 2
a63 1
    public void itemPressed(GraphItem item, MouseEvent e) {
d72 2
a73 1
    public void itemReleased(GraphItem item, MouseEvent e) {
d79 2
a80 1
    public void itemDragged(GraphItem item, MouseEvent e) {
d88 2
a89 7
        if ( repaint ) {
            ItemRegistry registry = item.getItemRegistry();
            Iterator iter = registry.getDisplaysRef().iterator();
            while ( iter.hasNext() ) {
                ((Display)iter.next()).repaint();
            }
        }
d97 1
a97 1
            updateLocations(n.getChild(i),dx,dy);
@


1.1
log
@Added SubtreeDragControl
@
text
@d15 4
a18 1
 * Changes the location of a whole subtree when dragged on screen.
d31 4
d38 8
d98 1
a98 1
        for ( int i=0; i<n.getNumChildren(); i++ )
@

