head	1.4;
access;
symbols
	alpha:1.3.0.2
	Root_alpha:1.3
	prefuse-alpha-20051229:1.3;
locks; strict;
comment	@# @;


1.4
date	2006.02.11.06.38.43;	author jheer;	state dead;
branches;
next	1.3;

1.3
date	2005.10.31.21.58.42;	author jheer;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2005.10.31.21.50.02;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.31.21.41.29;	author jheer;	state Exp;
branches;
next	;

1.3.4.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches;
next	;


desc
@@


1.4
log
@Merge beta branch back onto main trunk
@
text
@/**
 * 
 */
package edu.berkeley.guir.prefusex.controls;

import java.awt.event.MouseWheelEvent;

import edu.berkeley.guir.prefuse.Display;
import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.event.ControlAdapter;

/**
 * Zooms the display using the mouse scroll wheel, changing the scale of the
 * viewable region.
 *  
 * @@version 1.0
 * @@author bobruney
 * @@author mathis ahrens
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class WheelZoomControl extends ControlAdapter {
	
    private double minScale = 1E-3;
    private double maxScale = 75;
	private boolean zoomOverItem = true;
	
	public void itemWheelMoved(VisualItem item, MouseWheelEvent e) {
		if ( zoomOverItem )
			zoom(e);
	} //
	
	public void mouseWheelMoved(MouseWheelEvent e) {
		zoom(e);
	} //

	private void zoom(MouseWheelEvent e) {
		Display display = (Display) e.getComponent();
		
		double zoom = 1 + 0.1f * e.getWheelRotation();
		double scale = display.getScale();
		double result = scale * zoom;

		if ( result < minScale ) {
			zoom = minScale/scale;
        } else if ( result > maxScale ){
        	zoom = maxScale/scale;
        }		
		
		display.zoom(e.getPoint(),zoom);
		display.repaint();
	} //
	
    /**
     * Gets the maximum scale value allowed by this zoom control
     * @@return the maximum scale value 
     */
    public double getMaxScale() {
        return maxScale;
    } //
    
    /**
     * Sets the maximum scale value allowed by this zoom control
     * @@return the maximum scale value 
     */
    public void setMaxScale(double maxScale) {
        this.maxScale = maxScale;
    } //
    
    /**
     * Gets the minimum scale value allowed by this zoom control
     * @@return the minimum scale value 
     */
    public double getMinScale() {
        return minScale;
    } //
    
    /**
     * Sets the minimum scale value allowed by this zoom control
     * @@return the minimum scale value 
     */
    public void setMinScale(double minScale) {
        this.minScale = minScale;
    } //

    /**
	 * Indicates if the zoom control will work while the mouse is
	 * over a VisualItem.
	 * @@return true if the control still operates over a VisualItem
	 */
	public boolean isZoomOverItem() {
		return zoomOverItem;
	} //

	/**
	 * Determines if the zoom control will work while the mouse is
	 * over a VisualItem
	 * @@param zoomOverItem true to indicate the control operates
	 * over VisualItems, false otherwise
	 */
	public void setZoomOverItem(boolean zoomOverItem) {
		this.zoomOverItem = zoomOverItem;
	} //
    
} // end of class WheelZoomControl@


1.3
log
@Added contributors as @@author elements
@
text
@@


1.3.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.2
log
@Added zoomOverItem flag
@
text
@d17 2
@


1.1
log
@Added WheelZoomControl, updated minScale for ZoomControl
@
text
@d23 1
d26 2
a27 1
		zoom(e);
d82 20
a101 1
	
@

