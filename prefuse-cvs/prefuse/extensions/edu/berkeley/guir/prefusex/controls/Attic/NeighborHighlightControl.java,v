head	1.10;
access;
symbols
	alpha:1.9.0.2
	Root_alpha:1.9
	prefuse-alpha-20051229:1.9
	P20050401_Alpha_PreCHI:1.9;
locks; strict;
comment	@# @;


1.10
date	2006.02.11.06.38.43;	author jheer;	state dead;
branches;
next	1.9;

1.9
date	2005.01.14.23.11.39;	author jheer;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2005.01.05.00.49.36;	author jheer;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.15.00.35.16;	author jheer;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.25.04.35.38;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.23.03.55.41;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.15.03.33.27;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.11.19.11.13;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.01.20.02.22;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.27.21.35.46;	author jheer;	state Exp;
branches;
next	;

1.9.4.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches;
next	;


desc
@@


1.10
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefusex.controls;

import java.awt.event.MouseEvent;
import java.util.Iterator;

import edu.berkeley.guir.prefuse.EdgeItem;
import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.ItemRegistry;
import edu.berkeley.guir.prefuse.NodeItem;
import edu.berkeley.guir.prefuse.activity.Activity;
import edu.berkeley.guir.prefuse.event.ControlAdapter;

/**
 * <p>
 * A ControlListener that sets the highlighted status (using the
 * {@@link edu.berkeley.guir.prefuse.VisualItem#setHighlighted(boolean)
 * VisualItem.setHighlighted} method) for nodes neighboring the node 
 * currently under the mouse pointer. The highlight flag can then be used
 * by a color function to change node appearance as desired.
 * </p>
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class NeighborHighlightControl extends ControlAdapter {

    private Activity update = null;
    private boolean highlightWithInvisibleEdge = false;
    
    /**
     * Creates a new highlight control.
     */
    public NeighborHighlightControl() {
        this(null);
    } //
    
    /**
     * Creates a new highlight control that runs the given activity
     * whenever the neighbor highlight changes.
     * @@param update the update Activity to run
     */
    public NeighborHighlightControl(Activity update) {
        this.update = update;
    } //
    
    public void itemEntered(VisualItem item, MouseEvent e) {
        if ( item instanceof NodeItem )
            setNeighborHighlight((NodeItem)item, true);
    } //
    
    public void itemExited(VisualItem item, MouseEvent e) {
        if ( item instanceof NodeItem )
            setNeighborHighlight((NodeItem)item, false);
    } //
    
    public void setNeighborHighlight(NodeItem n, boolean state) {
        ItemRegistry registry = n.getItemRegistry();
        synchronized ( registry ) {
            Iterator iter = n.getEdges();
            while ( iter.hasNext() ) {
                EdgeItem eitem = (EdgeItem)iter.next();
                NodeItem nitem = (NodeItem)eitem.getAdjacentNode(n);
                if (eitem.isVisible() || highlightWithInvisibleEdge) {
                    eitem.setHighlighted(state);
                    registry.touch(eitem.getItemClass());
                    nitem.setHighlighted(state);
                    registry.touch(nitem.getItemClass());
                }
            }
        }
        if ( update != null )
            update.runNow();
    } //
    
    /**
     * Indicates if neighbor nodes with edges currently not visible still
     * get highlighted.
     * @@return true if neighbors with invisible edges still get highlighted,
     * false otherwise.
     */
    public boolean isHighlightWithInvisibleEdge() {
        return highlightWithInvisibleEdge;
    } //
   
    /**
     * Determines if neighbor nodes with edges currently not visible still
     * get highlighted.
     * @@param highlightWithInvisibleEdge assign true if neighbors with invisible
     * edges should still get highlighted, false otherwise.
     */
    public void setHighlightWithInvisibleEdge(boolean highlightWithInvisibleEdge) {
        this.highlightWithInvisibleEdge = highlightWithInvisibleEdge;
    } //
    
} // end of class NeighborHighlightControl
@


1.9
log
@Removed highlight disable on mouse release - was interfering with animations
@
text
@@


1.9.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.8
log
@Added parameter for highlighting with invisible edges
@
text
@a55 5
    public void itemReleased(VisualItem item, MouseEvent e) {
        if ( item instanceof NodeItem )
            setNeighborHighlight((NodeItem)item, false);
    } //
    
@


1.7
log
@Application-driven updates
@
text
@d28 1
d68 6
a73 4
                eitem.setHighlighted(state);
                nitem.setHighlighted(state);
                registry.touch(nitem.getItemClass());
                registry.touch(eitem.getItemClass());
d80 20
@


1.6
log
@A whole lot of update
@
text
@d69 2
@


1.5
log
@Major refactor
@
text
@d15 5
a19 13
 * A ControlListener that sets the visualization attribute "highlight" to
 * true for nodes neighboring the node currently under the mouse pointer. The
 * "highlight" flag can then be used by a color function to change node
 * appearance as desired.
 * </p>
 * 
 * <p>
 * To test whether not an item has been highlighted, use the method call
 * {@@link edu.berkeley.guir.prefuse.VisualItem#getVizAttribute(String)
 * item.getVizAttribute("highlight")}. The result will either be 
 * <code>null</code> or an object of type <code>Boolean</code> indicating
 * whether or not the item is highlighted (a value of <code>null</code>
 * indicates no highlighting).
d33 1
a61 1
        Boolean val = state ? Boolean.TRUE : null;
d67 2
a68 2
                eitem.setVizAttribute("highlight", val);
                nitem.setVizAttribute("highlight", val);
@


1.4
log
@Updated Javadoc
@
text
@d7 1
a7 1
import edu.berkeley.guir.prefuse.GraphItem;
a10 1
import edu.berkeley.guir.prefuse.activity.ActivityManager;
d23 1
a23 1
 * {@@link edu.berkeley.guir.prefuse.GraphItem#getVizAttribute(String)
d52 3
a54 2
    public void itemEntered(GraphItem item, MouseEvent e) {
        setNeighborHighlight((NodeItem)item, true);
d57 3
a59 2
    public void itemExited(GraphItem item, MouseEvent e) {
        setNeighborHighlight((NodeItem)item, false);
d62 3
a64 2
    public void itemReleased(GraphItem item, MouseEvent e) {
        setNeighborHighlight((NodeItem)item, false);
d74 1
a74 1
                NodeItem nitem = eitem.getAdjacentNode(n);
d80 1
a80 1
            ActivityManager.scheduleNow(update);
@


1.3
log
@Major refactoring of abstract graph data structures
@
text
@d15 1
d20 10
d38 3
d44 5
@


1.2
log
@Minor updates
@
text
@d53 1
a53 1
                NodeItem nitem = eitem.getOtherNode(n);
@


1.1
log
@Major commit of updated architecture
@
text
@d42 4
@

