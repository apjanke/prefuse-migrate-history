head	1.12;
access;
symbols
	alpha:1.11.0.2
	Root_alpha:1.11
	prefuse-alpha-20051229:1.11
	P20050401_Alpha_PreCHI:1.9;
locks; strict;
comment	@# @;


1.12
date	2006.02.11.06.38.43;	author jheer;	state dead;
branches;
next	1.11;

1.11
date	2005.10.04.20.20.32;	author jheer;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	2005.09.24.17.47.59;	author jheer;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.23.02.39.41;	author jheer;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.07.23.11.37;	author tha_jackl;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.01.22.54.46;	author jheer;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.25.04.35.38;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.23.03.55.41;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.15.03.33.27;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.13.02.16.44;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.07.18.03.24;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.27.21.35.46;	author jheer;	state Exp;
branches;
next	;

1.11.4.1
date	2005.12.30.09.13.31;	author jheer;	state dead;
branches;
next	;


desc
@@


1.12
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefusex.controls;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;

import javax.swing.SwingUtilities;

import edu.berkeley.guir.prefuse.Display;
import edu.berkeley.guir.prefuse.NodeItem;
import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.activity.Activity;
import edu.berkeley.guir.prefuse.event.ControlAdapter;

/**
 * Changes a node's location when dragged on screen. Other effects
 * include fixing a node's position when the mouse if over it, and
 * changing the mouse cursor to a hand when the mouse passes over an
 * item.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class DragControl extends ControlAdapter {

    private VisualItem activeItem;
    protected Activity update;
    protected Point2D down = new Point2D.Double();
    protected Point2D tmp = new Point2D.Double();
    protected boolean dragged;
    private boolean fixOnMouseOver = false;
    protected boolean repaint = true;
    
    /**
     * Creates a new drag control that issues repaint requests as an item
     * is dragged.
     */
    public DragControl() {
    } //
    
    /**
     * Creates a new drag control that optionally issues repaint requests
     * as an item is dragged.
     * @@param repaint indicates whether or not repaint requests are issued
     *  as drag events occur. This can be set to false if other activities
     *  (for example, a continuously running force simulation) are already
     *  issuing repaint events.
     */
    public DragControl(boolean repaint) {
        this.repaint = repaint;
    } //
    
    /**
     * Creates a new drag control that optionally issues repaint requests
     * as an item is dragged.
     * @@param repaint indicates whether or not repaint requests are issued
     *  as drag events occur. This can be set to false if other activities
     *  (for example, a continuously running force simulation) are already
     *  issuing repaint events.
     * @@param fixOnMouseOver indicates if object positions should become
     * fixed (made stationary) when the mouse pointer is over an item.
     */
    public DragControl(boolean repaint, boolean fixOnMouseOver) {
        this.repaint = repaint;
        this.fixOnMouseOver = fixOnMouseOver;
    } //
    
    public DragControl(Activity update) {
        this.repaint = false;
        this.update = update;
    } //
    
    public DragControl(Activity update, boolean fixOnMouseOver) {
        this.repaint = false;
        this.fixOnMouseOver = fixOnMouseOver;
        this.update = update;
    } //
    
    /**
     * Determines whether or not an item should have it's position fixed
     * when the mouse moves over it.
     * @@param s whether or not item position should become fixed upon
     *  mouse over.
     */
    public void setFixPositionOnMouseOver(boolean s) {
        fixOnMouseOver = s;
    } //
    
    public void itemEntered(VisualItem item, MouseEvent e) {
        if (!(item instanceof NodeItem)) return;
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        activeItem = item;
        if ( fixOnMouseOver )
            item.setFixed(true);
    } //
    
    public void itemExited(VisualItem item, MouseEvent e) {
        if (!(item instanceof NodeItem)) return;
        if ( activeItem == item ) {
            activeItem = null;
            if ( fixOnMouseOver )
                item.setFixed(item.wasFixed());
        }
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getDefaultCursor());
    } //
    
    public void itemPressed(VisualItem item, MouseEvent e) {
        if (!(item instanceof NodeItem)) return;
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !fixOnMouseOver )
            item.setFixed(true);
        dragged = false;
        Display d = (Display)e.getComponent();
        down = d.getAbsoluteCoordinate(e.getPoint(), down);
    } //
    
    public void itemReleased(VisualItem item, MouseEvent e) {
        if (!(item instanceof NodeItem)) return;
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( !fixOnMouseOver )
            item.setFixed(item.wasFixed());
        if ( dragged )
            dragged = false;
    } //
    
    public void itemDragged(VisualItem item, MouseEvent e) {
        if (!(item instanceof NodeItem)) return;
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        dragged = true;
        Display d = (Display)e.getComponent();
        tmp = d.getAbsoluteCoordinate(e.getPoint(), tmp);
        double dx = tmp.getX()-down.getX();
        double dy = tmp.getY()-down.getY();
        Point2D p = item.getLocation();
        item.updateLocation(p.getX()+dx,p.getY()+dy);
        item.setLocation(p.getX()+dx,p.getY()+dy);
        down.setLocation(tmp);
        if ( repaint )
            item.getItemRegistry().repaint();
        if ( update != null )
            update.runNow();
    } //
    
} // end of class DragControl
@


1.11
log
@Added user-inspired bug fixes.
@
text
@@


1.11.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.10
log
@Updated itemReleased code.
@
text
@d102 2
a103 1
            item.setFixed(item.wasFixed());
d122 1
a122 2
        if ( dragged && !item.wasFixed() ) {
            activeItem = null;
a123 1
        }
@


1.9
log
@Control updates
@
text
@d31 1
a31 1
    private boolean fixOnMouseOver;
d68 4
d73 1
a73 1
    public DragControl(Activity update) {
d75 1
d121 1
a121 1
        if ( dragged ) {
d124 2
a126 1
        }
@


1.8
log
@Private -> protected for subclassing
@
text
@d31 1
a31 1
    private boolean wasFixed, fixOnMouseOver;
a88 1
        wasFixed = item.isFixed();
d97 1
a97 1
            item.setFixed(wasFixed);
d106 2
a107 1
        item.setFixed(true);
d118 1
a118 1
            item.setFixed(wasFixed);
@


1.7
log
@Added constructor
@
text
@d27 6
a32 5
    private Activity update;
    private Point2D down = new Point2D.Double();
    private Point2D tmp = new Point2D.Double();
    private boolean wasFixed, dragged, fixOnMouseOver;
    private boolean repaint = true;
@


1.6
log
@A whole lot of update
@
text
@d52 16
@


1.5
log
@Major refactor
@
text
@d12 1
d27 1
d52 5
d120 2
@


1.4
log
@Updated Javadoc
@
text
@d6 2
a7 1
import java.util.Iterator;
d10 2
a11 2
import edu.berkeley.guir.prefuse.GraphItem;
import edu.berkeley.guir.prefuse.ItemRegistry;
d15 2
a16 2
 * Changes an item's location when dragged on screen. Other effects
 * include fixing a nodes position when the mouse if over it, and
d25 1
a25 1
    private GraphItem activeItem;
d28 1
a28 1
    private boolean wasFixed, dragged;
d50 12
a61 1
    public void itemEntered(GraphItem item, MouseEvent e) {
d66 2
a67 1
        item.setFixed(true);
d70 2
a71 1
    public void itemExited(GraphItem item, MouseEvent e) {
d80 4
a83 1
    public void itemPressed(GraphItem item, MouseEvent e) {
d89 3
a91 1
    public void itemReleased(GraphItem item, MouseEvent e) {
d99 3
a101 1
    public void itemDragged(GraphItem item, MouseEvent e) {
d111 2
a112 7
        if ( repaint ) {
            ItemRegistry registry = item.getItemRegistry();
            Iterator iter = registry.getDisplaysRef().iterator();
            while ( iter.hasNext() ) {
                ((Display)iter.next()).repaint();
            }
        }
@


1.3
log
@Updated drag control
@
text
@d14 4
a17 1
 * Changes an item's location when dragged on screen.
d30 4
d37 8
@


1.2
log
@Updated node "fixing"
@
text
@d24 1
a24 1
    private boolean wasFixed;
d37 3
d43 4
d52 1
a54 3
        activeItem = item;
        wasFixed = item.isFixed();
        item.setFixed(true);
d58 5
a62 2
        activeItem = null;
        item.setFixed(wasFixed);
d66 1
@


1.1
log
@Major commit of updated architecture
@
text
@d3 1
d24 1
d34 10
d48 2
d54 1
d63 1
@

