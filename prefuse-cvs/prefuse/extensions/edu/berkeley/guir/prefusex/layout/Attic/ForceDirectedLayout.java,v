head	1.22;
access;
symbols
	alpha:1.21.0.2
	Root_alpha:1.21
	prefuse-alpha-20051229:1.21
	P20050401_Alpha_PreCHI:1.21;
locks; strict;
comment	@# @;


1.22
date	2006.02.11.06.38.43;	author jheer;	state dead;
branches;
next	1.21;

1.21
date	2005.03.23.02.39.47;	author jheer;	state Exp;
branches
	1.21.4.1;
next	1.20;

1.20
date	2005.03.11.19.25.12;	author jheer;	state Exp;
branches;
next	1.19;

1.19
date	2005.02.15.02.21.40;	author jheer;	state Exp;
branches;
next	1.18;

1.18
date	2005.01.07.02.21.27;	author jheer;	state Exp;
branches;
next	1.17;

1.17
date	2005.01.05.01.01.19;	author jheer;	state Exp;
branches;
next	1.16;

1.16
date	2004.11.08.04.26.42;	author jheer;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.20.03.55.13;	author jheer;	state Exp;
branches;
next	1.14;

1.14
date	2004.04.16.07.00.06;	author jheer;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.15.01.49.58;	author jheer;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.10.20.54.13;	author jheer;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.25.04.35.38;	author jheer;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.24.01.57.26;	author jheer;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.23.03.55.41;	author jheer;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.09.03.44.42;	author jheer;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.08.21.31.50;	author jheer;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.08.20.05.51;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.08.01.00.29;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.07.19.07.07;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.07.18.03.24;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.06.00.50.41;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.27.21.35.18;	author jheer;	state Exp;
branches;
next	;

1.21.4.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches;
next	;


desc
@@


1.22
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefusex.layout;

import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import edu.berkeley.guir.prefuse.EdgeItem;
import edu.berkeley.guir.prefuse.ItemRegistry;
import edu.berkeley.guir.prefuse.NodeItem;
import edu.berkeley.guir.prefuse.action.assignment.Layout;
import edu.berkeley.guir.prefusex.force.DragForce;
import edu.berkeley.guir.prefusex.force.ForceItem;
import edu.berkeley.guir.prefusex.force.ForceSimulator;
import edu.berkeley.guir.prefusex.force.NBodyForce;
import edu.berkeley.guir.prefusex.force.SpringForce;

/**
 * Layout algorithm that positions graph elements based on a physics
 * simulation of interacting forces (e.g., anti-gravity, spring forces,
 * drag forces, etc).
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org</a>
 */
public class ForceDirectedLayout extends Layout {

    protected ItemRegistry registry; // temp member variable
    
    private ForceSimulator m_fsim;
    private long m_lasttime = -1L;
    private long m_maxstep = 50L;
    private boolean m_runonce;
    private int m_iterations = 100;
    private boolean m_enforceBounds;
    private transient NodeItem referrer;
    
    public ForceDirectedLayout(boolean enforceBounds) {
        this(enforceBounds, false);
    } //
    
    public ForceDirectedLayout(boolean enforceBounds, boolean runonce) {
        m_enforceBounds = enforceBounds;
        m_runonce = runonce;
        m_fsim = new ForceSimulator();
        m_fsim.addForce(new NBodyForce());
        m_fsim.addForce(new SpringForce());
        m_fsim.addForce(new DragForce());
    } //
    
    public ForceDirectedLayout(ForceSimulator fsim, boolean enforceBounds) {
        this(fsim, enforceBounds, false);
    } //
    
    public ForceDirectedLayout(ForceSimulator fsim, 
            boolean enforceBounds, boolean runonce)
    {
        m_enforceBounds = enforceBounds;
        m_runonce = runonce;
        m_fsim = fsim;
    } //
    
    public long getMaxTimeStep() {
        return m_maxstep;
    } //
    
    public void setMaxTimeStep(long maxstep) {
        this.m_maxstep = maxstep;
    } //
    
    public ForceSimulator getForceSimulator() {
        return m_fsim;
    } //
    
    public void setForceSimulator(ForceSimulator fsim) {
        m_fsim = fsim;
    } //
    
    public int getRunOnceIterations() {
        return m_iterations;
    } //
    
    public void setRunOnceIterations(int iter) {
        if ( iter < 1 )
            throw new IllegalArgumentException(
                    "Iterations must be a positive number!");
        m_iterations = iter;
    } //
    
    /**
     * @@see edu.berkeley.guir.prefuse.action.Action#run(edu.berkeley.guir.prefuse.ItemRegistry, double)
     */
    public void run(ItemRegistry registry, double frac) {
        this.registry = registry;
        // perform different actions if this is a run-once or
        // run-continuously layout
        if ( m_runonce ) {
            Point2D anchor = getLayoutAnchor(registry);
            Iterator iter = registry.getNodeItems();
            while ( iter.hasNext() ) {
                NodeItem  nitem = (NodeItem)iter.next();
                nitem.setLocation(anchor);
            }
            m_fsim.clear();
            long timestep = 1000L;
            initSimulator(registry, m_fsim);
            for ( int i = 0; i < m_iterations; i++ ) {
                // use an annealing schedule to set time step
                timestep *= (1.0 - i/(double)m_iterations);
                long step = timestep+50;
                // run simulator
                m_fsim.runSimulator(step);
                // debugging output
                if (i % 10 == 0 ) {
                    System.out.println("iter: "+i);
                }
            }
            updateNodePositions();
        } else {
            // get timestep
            if ( m_lasttime == -1 )
                m_lasttime = System.currentTimeMillis()-20;
            long time = System.currentTimeMillis();
            long timestep = Math.min(m_maxstep, time - m_lasttime);
            m_lasttime = time;
            
            // run force simulator
            m_fsim.clear();
            initSimulator(registry, m_fsim);
            m_fsim.runSimulator(timestep);
            updateNodePositions();
        }
        // clear temp member variable
        this.registry = null;
        if ( frac == 1.0 ) {
            reset(registry);
        }
    } //

    private void updateNodePositions() {
        Rectangle2D bounds = getLayoutBounds(registry);
        double x1=0, x2=0, y1=0, y2=0;
        if ( bounds != null ) {
            x1 = bounds.getMinX(); y1 = bounds.getMinY();
            x2 = bounds.getMaxX(); y2 = bounds.getMaxY();
        }
        
        // update positions
        Iterator iter = registry.getNodeItems();
        while ( iter.hasNext() ) {
            NodeItem  nitem = (NodeItem)iter.next();
            ForceItem fitem = (ForceItem)nitem.getVizAttribute("forceItem");
            
            if ( nitem.isFixed() ) {
                // clear any force computations
                fitem.force[0] = 0.0f;
                fitem.force[1] = 0.0f;
                fitem.velocity[0] = 0.0f;
                fitem.velocity[1] = 0.0f;
                
                if ( Double.isNaN(nitem.getX()) )
                    setLocation(nitem,referrer,0.0,0.0);
                continue;
            }
            
            double x = fitem.location[0];
            double y = fitem.location[1];
            
            if ( m_enforceBounds && bounds != null) {
                Rectangle2D b = nitem.getBounds();
                double hw = b.getWidth()/2;
                double hh = b.getHeight()/2;
                if ( x+hw > x2 ) x = x2-hw;
                if ( x-hw < x1 ) x = x1+hw;
                if ( y+hh > y2 ) y = y2-hh;
                if ( y-hh < y1 ) y = y1+hh;
            }
            setLocation(nitem,referrer,x,y);
        }
    } //
    
    public void reset(ItemRegistry registry) {
        Iterator iter = registry.getNodeItems();
        while ( iter.hasNext() ) {
            NodeItem nitem = (NodeItem)iter.next();
            ForceItem fitem = (ForceItem)nitem.getVizAttribute("forceItem");
            if ( fitem != null ) {
                fitem.location[0] = (float)nitem.getEndLocation().getX();
                fitem.location[1] = (float)nitem.getEndLocation().getY();
                fitem.force[0]    = fitem.force[1]    = 0;
                fitem.velocity[0] = fitem.velocity[1] = 0;
            }
        }
        m_lasttime = -1L;
    } //
    
    /**
     * Loads the simulator with all relevant force items and springs.
     */
    protected void initSimulator(ItemRegistry registry, ForceSimulator fsim) {
       float startX = (referrer == null ? 0f : (float)referrer.getX());
       float startY = (referrer == null ? 0f : (float)referrer.getY());
       startX = Float.isNaN(startX) ? 0f : startX;
       startY = Float.isNaN(startY) ? 0f : startY;
       
       Iterator iter = registry.getNodeItems();
       while ( iter.hasNext() ) {
           NodeItem nitem = (NodeItem)iter.next();
           ForceItem fitem = (ForceItem)nitem.getVizAttribute("forceItem");
           if ( fitem == null ) {
               fitem = new ForceItem();
               nitem.setVizAttribute("forceItem", fitem);
           }
           fitem.mass = getMassValue(nitem);
           double x = nitem.getEndLocation().getX();
           double y = nitem.getEndLocation().getY();
           fitem.location[0] = (Double.isNaN(x) ? startX : (float)x);
           fitem.location[1] = (Double.isNaN(y) ? startY : (float)y);
           fsim.addItem(fitem);
       }
       iter = registry.getEdgeItems();
       while ( iter.hasNext() ) {
           EdgeItem  e  = (EdgeItem)iter.next();
           NodeItem  n1 = (NodeItem)e.getFirstNode();
           ForceItem f1 = (ForceItem)n1.getVizAttribute("forceItem");
           NodeItem  n2 = (NodeItem)e.getSecondNode();
           ForceItem f2 = (ForceItem)n2.getVizAttribute("forceItem");
           float coeff = getSpringCoefficient(e);
           float slen = getSpringLength(e);
           fsim.addSpring(f1, f2, (coeff>=0?coeff:-1.f), (slen>=0?slen:-1.f));
       }      
    } //
    
    protected float getMassValue(NodeItem n) {
        return 1.0f;
    } //
    
    protected float getSpringLength(EdgeItem e) {
        return -1.f;
    } //
    
    protected float getSpringCoefficient(EdgeItem e) {
        return -1.f;
    } //
    
    /**
     * @@return Returns the referrer.
     */
    public NodeItem getReferrer() {
        return referrer;
    } //
    /**
     * @@param referrer The referrer to set.
     */
    public void setReferrer(NodeItem referrer) {
        this.referrer = referrer;
    } //
} // end of class ForceDirectedLayout@


1.21
log
@ForceSimulation updates
@
text
@@


1.21.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.20
log
@Added referrer, maxTimeStep, getMass fix, and bounds enforcement
@
text
@d151 2
d154 6
a164 1
            ForceItem fitem = (ForceItem)nitem.getVizAttribute("forceItem");
d202 3
@


1.19
log
@Added more support for non-interactive layout, including iteration setter and annealing schedule for layout
@
text
@d35 1
d62 8
d153 1
a153 1
                    setLocation(nitem,null,0.0,0.0);
d162 7
a168 4
                if ( x > x2 ) x = x2;
                if ( x < x1 ) x = x1;
                if ( y > y2 ) y = y2;
                if ( y < y1 ) y = y1;
d170 1
a170 1
            setLocation(nitem,null,x,y);
d193 2
a200 1
               fitem.mass = getMassValue(nitem);
d203 1
d206 2
a207 2
           fitem.location[0] = (Double.isNaN(x) ? 0f : (float)x);
           fitem.location[1] = (Double.isNaN(y) ? 0f : (float)y);
d235 12
@


1.18
log
@Resets on animFrac=1.0, Added new constructor
@
text
@d69 11
d95 1
d97 11
a107 2
            for ( int i = 0; i < m_iterations; i++ )
                m_fsim.runSimulator(50);
@


1.17
log
@Changed spring parameterization methods to take an EdgeItem as input
@
text
@d49 4
d104 3
@


1.16
log
@Added support for customized mass values
@
text
@d175 2
a176 2
           float coeff = getSpringCoefficient(n1, n2);
           float slen = getSpringLength(n1, n2);
d185 1
a185 1
    protected float getSpringLength(NodeItem n1, NodeItem n2) {
d189 1
a189 1
    protected float getSpringCoefficient(NodeItem n1, NodeItem n2) {
@


1.15
log
@Set default max time step to 50 ms
@
text
@d159 1
d181 4
@


1.14
log
@Added means to better parameterize spring constants
@
text
@d31 1
a31 1
    private long m_maxstep = 100L;
@


1.13
log
@Added max time step
@
text
@d174 1
d176 1
a176 1
           fsim.addSpring(f1, f2, (slen>=0 ? slen : -1.f));
d184 4
@


1.12
log
@Improved bounds handling
@
text
@d31 1
d89 1
a89 1
            long timestep = time - m_lasttime;
@


1.11
log
@A whole lot of update
@
text
@d102 7
d113 3
a115 1
            if ( nitem.isFixed() )
d117 1
d123 1
a123 4
            if ( m_enforceBounds ) {
                Rectangle2D bounds = getLayoutBounds(registry);
                double x1 = bounds.getMinX(), y1 = bounds.getMinY();
                double x2 = bounds.getMaxX(), y2 = bounds.getMaxY();
@


1.10
log
@New filters added plus more
@
text
@d3 1
d27 2
a29 1
    private ItemRegistry registry;
d31 2
a32 1
    private int m_preruns = 0;
d36 4
d41 1
d48 3
a50 1
    public ForceDirectedLayout(ForceSimulator fsim, boolean enforceBounds) {
d52 9
d69 29
a97 27
        // first time running through ?
//        if ( m_lasttime == -1 ) {
//            m_lasttime = System.currentTimeMillis();
//            Point2D anchor = getAnchor();
//            Iterator iter = registry.getNodeItems();
//            while ( iter.hasNext() ) {
//                NodeItem  nitem = (NodeItem)iter.next();
//                nitem.setLocation(anchor);
//            }
//            for ( int i = 0; i < m_preruns; i++ ) {
//                initSimulator();
//                m_fsim.runSimulator(50);
//                updateNodePositions();
//            }
//        }
        
        // get timestep
        if ( m_lasttime == -1 )
            m_lasttime = System.currentTimeMillis()-20;
        long time = System.currentTimeMillis();
        long timestep = time - m_lasttime;
        m_lasttime = time;
        
        // run force simulator
        initSimulator();
        m_fsim.runSimulator(timestep);
        updateNodePositions();
d122 1
a122 2
            nitem.updateLocation(x,y);
            nitem.setLocation(x,y);
d141 4
a144 2
    private void initSimulator() {
       m_fsim.clear();
d153 5
a157 3
           fitem.location[0] = (float)nitem.getEndLocation().getX();
           fitem.location[1] = (float)nitem.getEndLocation().getY();
           m_fsim.addItem(fitem);
d167 1
a167 1
           m_fsim.addSpring(f1, f2, (slen>=0 ? slen : -1.f));
@


1.9
log
@Major refactor
@
text
@d9 1
a9 1
import edu.berkeley.guir.prefuse.action.Layout;
@


1.8
log
@Fixed bug when setting Spring length
@
text
@d137 2
a138 2
           EdgeItem e = (EdgeItem)iter.next();
           NodeItem n1 = e.getFirstNode();
d140 1
a140 1
           NodeItem n2 = e.getSecondNode();
@


1.7
log
@Moved garbage collection into abstract Filter
@
text
@d142 2
a143 1
           m_fsim.addSpring(f1, f2);
d147 4
@


1.6
log
@Javadoc update and fixes
@
text
@d112 2
a113 2
                fitem.location[0] = (float)nitem.getX();
                fitem.location[1] = (float)nitem.getY();
@


1.5
log
@Minor fix to use endLocation
@
text
@d46 1
a46 1
     * @@see edu.berkeley.guir.prefuse.filter.PipelineComponent#process()
@


1.4
log
@Updated layout bounds handling
@
text
@d131 2
a132 2
           fitem.location[0] = (float)nitem.getX();
           fitem.location[1] = (float)nitem.getY();
@


1.3
log
@Updated node "fixing"
@
text
@d94 6
a99 6
                double xb = bounds.getX(), yb = bounds.getY();
                double w = bounds.getWidth(), h = bounds.getHeight();
                if ( x >= w ) x = xb+w;
                if ( x <= 0 ) x = xb;
                if ( y >= h ) y = yb+h;
                if ( y <= 0 ) y = yb;
@


1.2
log
@Updated naming of layout convenience routines
@
text
@d85 1
a85 2
            Boolean b = (Boolean)nitem.getVizAttribute("fixed");
            if ( b != null && b.booleanValue() )
@


1.1
log
@Major commit of updated architecture
@
text
@d94 1
a94 1
                Rectangle2D bounds = getBounds(registry);
@

