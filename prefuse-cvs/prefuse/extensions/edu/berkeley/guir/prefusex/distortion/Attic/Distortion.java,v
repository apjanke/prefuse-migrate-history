head	1.8;
access;
symbols
	alpha:1.7.0.2
	Root_alpha:1.7
	prefuse-alpha-20051229:1.7
	P20050401_Alpha_PreCHI:1.7;
locks; strict;
comment	@# @;


1.8
date	2006.02.11.06.38.43;	author jheer;	state dead;
branches;
next	1.7;

1.7
date	2004.08.06.17.53.49;	author tha_jackl;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2004.07.22.22.05.08;	author tha_jackl;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.25.04.35.38;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.24.01.57.26;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.23.19.34.05;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.23.03.55.58;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.08.00.47.39;	author jheer;	state Exp;
branches;
next	;

1.7.4.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches;
next	;


desc
@@


1.8
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefusex.distortion;

import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import edu.berkeley.guir.prefuse.ItemRegistry;
import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.action.assignment.Layout;

/**
 * Abstract class providing skeletal implementation for space-distortion
 * techniques.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public abstract class Distortion extends Layout {

    private Point2D m_tmp = new Point2D.Double();
    private boolean m_sizeDistorted = true;
    private final boolean useFilteredGraph;
    
    /**
     * 
     */
    public Distortion(final boolean useFilteredGraph) {
        this.useFilteredGraph = useFilteredGraph;
    }
    /**
     * Controls whether item sizes are distorted 
     * along with the item locations.
     * @@param s true to distort size, false to distort positions only
     */
    public void setSizeDistorted(boolean s) {
        m_sizeDistorted = s;
    } //
    
    /**
     * Indicates whether the item sizes are distorted 
     * along with the item locations.
     * @@return true if item sizes are distorted by this action, false otherwise
     */
    public boolean isSizeDistorted() {
        return m_sizeDistorted;
    } //
    
    /**
     * @@see edu.berkeley.guir.prefuse.action.Action#run(edu.berkeley.guir.prefuse.ItemRegistry, double)
     */
    public void run(ItemRegistry registry, double frac) {
        Rectangle2D bounds = getLayoutBounds(registry);
        Point2D anchor = correct(getLayoutAnchor(), bounds);
        final Iterator iter;
        if (useFilteredGraph) {
            //registry.printAllEntries();
            iter = registry.getFilteredGraph().getNodes();
        } else {
            iter = registry.getNodeItems();
        }
        int i = 0;
        while ( iter.hasNext() ) {
            //System.out.println(i++);
            VisualItem item = (VisualItem)iter.next();
            if ( item.isFixed() ) continue;
            
            // reset distorted values
            item.getLocation().setLocation(item.getEndLocation());
            item.setSize(item.getEndSize());
            
            // compute distortion if we have a distortion focus
            if ( anchor != null ) {
                Rectangle2D bbox = item.getBounds();
                Point2D loc = item.getLocation();
                transformPoint(item.getEndLocation(), 
                        loc, anchor, bounds);
                if ( m_sizeDistorted ) {
                    double sz = transformSize(bbox, loc, anchor, bounds);
                    item.setSize(sz*item.getEndSize());
                }
            }
        }
    } //
    
    /**
     * Corrects the anchor position, such that if the anchor is outside the
     * layout bounds, the anchor is adjusted to be the nearest point on the
     * edge of the bounds.
     * @@param anchor the un-corrected anchor point
     * @@param bounds the layout bounds
     * @@return the corrected anchor point
     */
    protected Point2D correct(Point2D anchor, Rectangle2D bounds) {
        if ( anchor == null ) return anchor;
        double x = anchor.getX(), y = anchor.getY();
        double x1 = bounds.getMinX(), y1 = bounds.getMinY();
        double x2 = bounds.getMaxX(), y2 = bounds.getMaxY();
        x = (x < x1 ? x1 : (x > x2 ? x2 : x));
        y = (y < y1 ? y1 : (y > y2 ? y2 : y));
        
        m_tmp.setLocation(x,y);
        return m_tmp;
    } //
    
    /**
     * Transforms the undistorted point <code>o</code> to the distorted point
     * <code>p</code>, subject to the given layout anchor (or focus) and
     * bounds.
     * @@param o the original, undistorted point
     * @@param p Point2D in which to store coordinates of the transformed point
     * @@param anchor the anchor or focus point of the display
     * @@param bounds the layout bounds
     */
    protected abstract void transformPoint(Point2D o, Point2D p, 
            Point2D anchor, Rectangle2D bounds);
    
    /**
     * Returns the scaling factor by which to transform the size of an 
     * undistorted item to a distorted item.
     * @@param bbox the bounding box of the undistorted item
     * @@param pf the location of the distorted item
     * @@param anchor the anchor or focus point of the display
     * @@param bounds the layout bounds
     * @@return the scaling factor by which to change the size
     */
    protected abstract double transformSize(Rectangle2D bbox, Point2D pf, 
            Point2D anchor, Rectangle2D bounds);

} // end of abstract class Distortion@


1.7
log
@Minor cleanup and one method's visibility changed private -> protected
@
text
@@


1.7.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.6
log
@Added boolean to constructors that specifies if the registry's filtered graph should be used
@
text
@a56 1
            // XXX Gotta switch back later
a57 2
            //System.out.println("using this class: "+nodeClass);
            //iter = registry.getItems(nodeClass, true);
a81 1
            
d93 1
a93 1
    private Point2D correct(Point2D anchor, Rectangle2D bounds) {
@


1.5
log
@A whole lot of update
@
text
@d22 1
d25 6
d54 11
a64 1
        Iterator iter = registry.getNodeItems();
d66 1
@


1.4
log
@New filters added plus more
@
text
@d21 1
a21 1
    private boolean m_transformSize = true;
d23 7
a29 2
    public void setTransformSize(boolean s) {
        m_transformSize = s;
d32 12
d47 1
a47 1
        Iterator iter = registry.getItems();
d61 2
a62 2
                               loc, anchor, bounds);
                if ( m_transformSize ) {
d67 1
d115 1
a115 1
} // end of abstract class Distortion
@


1.3
log
@More Javadoc updates
@
text
@d9 1
a9 1
import edu.berkeley.guir.prefuse.action.Layout;
@


1.2
log
@Updated distortion to change size
@
text
@d92 1
a92 1
     * @@return
@


1.1
log
@Perfected distortion code
@
text
@a6 1
import edu.berkeley.guir.prefuse.GraphItem;
d8 1
d20 6
a25 1
    Point2D m_tmp = new Point2D.Double();
d32 1
a32 1
            GraphItem item = (GraphItem)iter.next();
d35 5
d41 2
d44 5
a48 4
                               item.getLocation(), 
                               anchor, bounds);
            } else {
                item.getLocation().setLocation(item.getEndLocation());
d53 8
d84 12
@

