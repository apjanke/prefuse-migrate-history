head	1.10;
access;
symbols
	alpha:1.9.0.2
	Root_alpha:1.9
	prefuse-alpha-20051229:1.9
	P20050401_Alpha_PreCHI:1.9;
locks; strict;
comment	@# @;


1.10
date	2006.02.11.06.38.42;	author jheer;	state dead;
branches;
next	1.9;

1.9
date	2005.02.01.04.59.32;	author jheer;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2004.11.08.04.07.15;	author jheer;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.25.04.35.38;	author jheer;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.24.01.57.26;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.23.04.00.10;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.16.03.05.17;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.11.19.11.13;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.08.00.47.38;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.07.18.04.17;	author jheer;	state Exp;
branches;
next	;

1.9.4.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches;
next	;


desc
@@


1.10
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.demos;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JRadioButton;

import edu.berkeley.guir.prefuse.Display;
import edu.berkeley.guir.prefuse.ItemRegistry;
import edu.berkeley.guir.prefuse.action.ActionMap;
import edu.berkeley.guir.prefuse.action.ActionSwitch;
import edu.berkeley.guir.prefuse.action.RepaintAction;
import edu.berkeley.guir.prefuse.action.filter.GraphFilter;
import edu.berkeley.guir.prefuse.activity.ActionList;
import edu.berkeley.guir.prefuse.activity.ActivityMap;
import edu.berkeley.guir.prefuse.graph.Graph;
import edu.berkeley.guir.prefuse.graph.GraphLib;
import edu.berkeley.guir.prefusex.controls.AnchorUpdateControl;
import edu.berkeley.guir.prefusex.controls.DragControl;
import edu.berkeley.guir.prefusex.distortion.BifocalDistortion;
import edu.berkeley.guir.prefusex.distortion.Distortion;
import edu.berkeley.guir.prefusex.distortion.FisheyeDistortion;
import edu.berkeley.guir.prefusex.layout.GridLayout;

/**
 * Demonstration illustrating the use of distortion transformations on
 *  a visualization.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class DistortionDemo extends JFrame {

    private ItemRegistry registry;
    private ActivityMap  activityMap = new ActivityMap();
    private ActionMap    actionMap   = new ActionMap();
    
    public static void main(String argv[]) {
        new DistortionDemo();
    } //
    
    public DistortionDemo() {
        super("Distortion Demo");
        
        Graph g = GraphLib.getGrid(20,20);
        registry = new ItemRegistry(g);

        Display display = new Display();
        display.setItemRegistry(registry);
        display.setSize(600,600);
        display.setBorder(BorderFactory.createEmptyBorder(50,50,50,50));
        display.addControlListener(new DragControl(false));
        
        ActionList filter = new ActionList(registry);
        filter.add(new GraphFilter());
        filter.add(new GridLayout());
        filter.add(new RepaintAction());
        
        ActionList distort = new ActionList(registry);
        Distortion[] acts = new Distortion[] {
            (Distortion)actionMap.put("distort1",new BifocalDistortion()),
            (Distortion)actionMap.put("distort2",new FisheyeDistortion())
        };
        distort.add(actionMap.put("switch",new ActionSwitch(acts, 0)));
        distort.add(new RepaintAction());
        activityMap.put("distortion",distort);
        
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        getContentPane().add(display, BorderLayout.CENTER);
        getContentPane().add(new SwitchPanel(), BorderLayout.SOUTH);
        pack();
        setVisible(true);
        
        // run filter and layout
        filter.runNow();
        
        // enable distortion mouse-over
        AnchorUpdateControl auc = new AnchorUpdateControl(acts,distort);
        display.addMouseListener(auc);
        display.addMouseMotionListener(auc);
    } //
    
    class SwitchPanel extends JPanel implements ActionListener {
        public static final String BIFOCAL = "Bifocal";
        public static final String FISHEYE = "Fisheye";
        public static final String SIZES   = "Transform Sizes";
        public SwitchPanel() {
            setBackground(Color.WHITE);
            initUI();
        } //
        private void initUI() {
            JRadioButton bb = new JRadioButton(BIFOCAL);
            JRadioButton fb = new JRadioButton(FISHEYE);
            bb.setActionCommand(BIFOCAL);
            fb.setActionCommand(FISHEYE);
            bb.setSelected(true);
            
            JCheckBox cb = new JCheckBox(SIZES);
            cb.setActionCommand(SIZES);
            cb.setSelected(true);
            
            bb.setBackground(Color.WHITE);
            fb.setBackground(Color.WHITE);
            cb.setBackground(Color.WHITE);
            
            Font f = new Font("SanSerif",Font.PLAIN,24);
            bb.setFont(f);
            fb.setFont(f);
            cb.setFont(f);
            
            bb.addActionListener(this);
            fb.addActionListener(this);
            cb.addActionListener(this);
            
            ButtonGroup bg = new ButtonGroup();
            bg.add(bb); this.add(bb);
            this.add(Box.createHorizontalStrut(20));
            bg.add(fb); this.add(fb);
            this.add(Box.createHorizontalStrut(20));
            this.add(cb);
        } //
        public void actionPerformed(ActionEvent e) {
            String cmd = e.getActionCommand();
            if ( BIFOCAL == cmd ) {
                ((ActionSwitch)actionMap.get("switch")).setSwitchValue(0);
                activityMap.runNow("distortion");
            } else if ( FISHEYE == cmd ) {
                ((ActionSwitch)actionMap.get("switch")).setSwitchValue(1);
                activityMap.runNow("distortion");
            } else if ( SIZES == cmd ) {
                boolean s = ((JCheckBox)e.getSource()).isSelected();
                ((Distortion)actionMap.get("distort1")).setSizeDistorted(s);
                ((Distortion)actionMap.get("distort2")).setSizeDistorted(s);
                activityMap.runNow("distortion");
            }
        } //
    } // end of inner class SwitchPanel
    
} // end of class DistortionDemo
@


1.9
log
@Refactored ActivityMap methods
@
text
@@


1.9.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.8
log
@Added GridLayout and started ScatterplotLayout
@
text
@d135 1
a135 1
                activityMap.scheduleNow("distortion");
d138 1
a138 1
                activityMap.scheduleNow("distortion");
d143 1
a143 1
                activityMap.scheduleNow("distortion");
@


1.7
log
@A whole lot of update
@
text
@a7 2
import java.awt.geom.Rectangle2D;
import java.util.Iterator;
a18 1
import edu.berkeley.guir.prefuse.NodeItem;
a21 1
import edu.berkeley.guir.prefuse.action.assignment.Layout;
a26 1
import edu.berkeley.guir.prefuse.graph.Node;
d32 1
a91 25
    class GridLayout extends Layout {
        public void run(ItemRegistry registry, double frac) {
            Rectangle2D b = getLayoutBounds(registry);
            double bx = b.getMinX(), by = b.getMinY();
            double w = b.getWidth(), h = b.getHeight();
            int m, n;
            Graph g = (Graph)registry.getGraph();
            Iterator iter = g.getNodes(); iter.next();
            for ( n=2; iter.hasNext(); n++ ) {
                Node nd = (Node)iter.next();
                if ( nd.getEdgeCount() == 2 )
                    break;
            }
            m = g.getNodeCount() / n;
            iter = g.getNodes();
            for ( int i=0; iter.hasNext(); i++ ) {
                Node nd = (Node)iter.next();
                NodeItem ni = registry.getNodeItem(nd);
                double x = bx + w*((i%n)/(double)(n-1));
                double y = by + h*((i/n)/(double)(m-1));
                setLocation(ni,null,x,y);
            }
        } //
    } // end of inner class GridLayout
    
@


1.6
log
@New filters added plus more
@
text
@a5 1
import java.awt.Paint;
a7 4
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Point2D;
a21 2
import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.action.Action;
a24 1
import edu.berkeley.guir.prefuse.action.assignment.ColorFunction;
d32 1
a32 3
import edu.berkeley.guir.prefuse.render.DefaultEdgeRenderer;
import edu.berkeley.guir.prefuse.render.DefaultRendererFactory;
import edu.berkeley.guir.prefuse.render.TextItemRenderer;
a66 9
        registry.setRendererFactory(new DefaultRendererFactory(
            new TextItemRenderer() {
                public int getRenderType() {
                    return RENDER_TYPE_FILL;
                } //
            },
            new DefaultEdgeRenderer(), 
            null));
        
a68 5
        filter.add(new ColorFunction() {
            public Paint getFillColor(VisualItem item) {
                return Color.WHITE;
            } //
        });
d73 3
a75 3
        Action[] acts = new Action[] {
            actionMap.put("distort1",new BifocalDistortion()),
            actionMap.put("distort2",new FisheyeDistortion())
d91 3
a93 3
        DistortionController dc = new DistortionController();
        display.addMouseListener(dc);
        display.addMouseMotionListener(dc);
d116 1
a116 2
                ni.updateLocation(x,y);
                ni.setLocation(x,y);
a120 22
    class DistortionController extends MouseAdapter implements MouseMotionListener {
        Point2D tmp = new Point2D.Float();
        public void mouseExited(MouseEvent e) {
            ((Layout)actionMap.get("distort1")).setLayoutAnchor(null);
            ((Layout)actionMap.get("distort2")).setLayoutAnchor(null);
            activityMap.scheduleNow("distortion");
        } //
        public void mouseMoved(MouseEvent e) {
            moveEvent(e);
        } //
        public void mouseDragged(MouseEvent e) {
            moveEvent(e);
        } //
        public void moveEvent(MouseEvent e) {
            Display d = (Display)e.getSource();
            d.getAbsoluteCoordinate(e.getPoint(), tmp);
            ((Layout)actionMap.get("distort1")).setLayoutAnchor(tmp);
            ((Layout)actionMap.get("distort2")).setLayoutAnchor(tmp);
            activityMap.scheduleNow("distortion");
        } //
    } // end of inner class DistortionController
    
d170 2
a171 2
                ((Distortion)actionMap.get("distort1")).setTransformSize(s);
                ((Distortion)actionMap.get("distort2")).setTransformSize(s);
@


1.5
log
@Major refactor
@
text
@a30 4
import edu.berkeley.guir.prefuse.action.ColorFunction;
import edu.berkeley.guir.prefuse.action.GraphEdgeFilter;
import edu.berkeley.guir.prefuse.action.GraphNodeFilter;
import edu.berkeley.guir.prefuse.action.Layout;
d32 4
a35 1
import edu.berkeley.guir.prefuse.activity.ActionPipeline;
d86 2
a87 3
        ActionPipeline filter = new ActionPipeline(registry);
        filter.add(new GraphNodeFilter());
        filter.add(new GraphEdgeFilter());
d96 1
a96 1
        ActionPipeline distort = new ActionPipeline(registry);
@


1.4
log
@More Javadoc updates
@
text
@d19 1
a24 1
import edu.berkeley.guir.prefuse.GraphItem;
d27 1
a36 1
import edu.berkeley.guir.prefuse.activity.ActivityManager;
a41 1
import edu.berkeley.guir.prefuse.render.DefaultNodeRenderer;
d43 1
d46 1
d73 1
a73 1
        display.setRegistry(registry);
d79 1
a79 1
            new DefaultNodeRenderer() {
d83 1
a83 1
            }, 
d91 2
a92 2
            public Paint getFillColor(GraphItem item) {
                return Color.BLACK;
d113 2
a114 3
        // wait until graphics are available
        while ( display.getGraphics() == null );
        ActivityManager.scheduleNow(filter);
d173 1
d185 4
d191 1
d196 1
d200 1
d204 1
a204 1
            this.add(Box.createHorizontalStrut(50));
d206 2
d217 5
@


1.3
log
@Major refactoring of abstract graph data structures
@
text
@d6 1
d24 1
d89 5
a93 1
        filter.add(new ColorFunction()); // make everything black
@


1.2
log
@Perfected distortion code
@
text
@d126 1
a126 1
                if ( nd.getNumEdges() == 2 )
d129 1
a129 1
            m = g.getNumNodes() / n;
@


1.1
log
@Added distortion layout and demo
@
text
@d3 5
a7 1
import java.awt.Rectangle;
a10 2
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
d15 3
d19 2
d25 1
d27 1
a28 1
import edu.berkeley.guir.prefuse.action.DistortionLayout;
d43 2
d47 2
d68 1
a68 3
        
        DistortionController dc = new DistortionController();
        
d72 2
a73 3
        display.addControlListener(new DragControl());
        display.addMouseListener(dc);
        display.addMouseMotionListener(dc);
d79 1
a79 1
                }
d87 2
a88 2
        filter.add(new ColorFunction());
        filter.add(actionMap.put("grid",new GridLayout()));
d91 12
a102 14
        ((Layout)actionMap.get("grid"))
            .setLayoutBounds(new Rectangle(100,100,400,400));
        
        ActionPipeline bifocal = new ActionPipeline(registry);
        bifocal.add(actionMap.put("distort",new DistortionLayout()));
        bifocal.add(new RepaintAction());
        activityMap.put("bifocal",bifocal);
        
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
        getContentPane().add(display);
d109 5
d134 2
a135 2
                double x = bx + w*((i%n)+0.5)/(double)n;
                double y = by + h*((i/n)+0.5)/(double)m;
d145 3
a147 3
            Layout distort = (Layout)actionMap.get("distort");
            distort.setLayoutAnchor(null);
            activityMap.scheduleNow("bifocal");
d158 3
a160 3
            Layout distort = (Layout)actionMap.get("distort");
            distort.setLayoutAnchor(tmp);
            activityMap.scheduleNow("bifocal");
d164 41
@

