head	1.14;
access;
symbols
	alpha:1.13.0.2
	Root_alpha:1.13
	prefuse-alpha-20051229:1.13
	P20050401_Alpha_PreCHI:1.13;
locks; strict;
comment	@# @;


1.14
date	2006.02.11.06.38.42;	author jheer;	state dead;
branches;
next	1.13;

1.13
date	2005.01.14.23.13.04;	author jheer;	state Exp;
branches
	1.13.4.1;
next	1.12;

1.12
date	2005.01.05.02.35.27;	author jheer;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.08.02.53.31;	author jheer;	state Exp;
branches;
next	1.10;

1.10
date	2004.06.01.22.58.20;	author jheer;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.25.04.35.38;	author jheer;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.24.01.57.26;	author jheer;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.23.04.00.10;	author jheer;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.15.03.33.29;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.11.19.11.13;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.08.21.31.50;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.03.08.11.05;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.02.07.35.40;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.27.21.35.46;	author jheer;	state Exp;
branches;
next	;

1.13.4.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches;
next	;


desc
@@


1.14
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.demos;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Paint;

import javax.swing.JFrame;

import edu.berkeley.guir.prefuse.AggregateItem;
import edu.berkeley.guir.prefuse.Display;
import edu.berkeley.guir.prefuse.EdgeItem;
import edu.berkeley.guir.prefuse.FocusManager;
import edu.berkeley.guir.prefuse.ItemRegistry;
import edu.berkeley.guir.prefuse.NodeItem;
import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.action.RepaintAction;
import edu.berkeley.guir.prefuse.action.animate.ColorAnimator;
import edu.berkeley.guir.prefuse.action.animate.PolarLocationAnimator;
import edu.berkeley.guir.prefuse.action.assignment.ColorFunction;
import edu.berkeley.guir.prefuse.action.filter.TreeFilter;
import edu.berkeley.guir.prefuse.activity.ActionList;
import edu.berkeley.guir.prefuse.activity.SlowInSlowOutPacer;
import edu.berkeley.guir.prefuse.focus.DefaultFocusSet;
import edu.berkeley.guir.prefuse.graph.DefaultTreeNode;
import edu.berkeley.guir.prefuse.graph.Graph;
import edu.berkeley.guir.prefuse.graph.io.XMLGraphReader;
import edu.berkeley.guir.prefuse.render.DefaultEdgeRenderer;
import edu.berkeley.guir.prefuse.render.DefaultRendererFactory;
import edu.berkeley.guir.prefuse.render.Renderer;
import edu.berkeley.guir.prefuse.render.TextItemRenderer;
import edu.berkeley.guir.prefuse.util.ColorMap;
import edu.berkeley.guir.prefuse.util.StringAbbreviator;
import edu.berkeley.guir.prefusex.controls.DragControl;
import edu.berkeley.guir.prefusex.controls.FocusControl;
import edu.berkeley.guir.prefusex.controls.NeighborHighlightControl;
import edu.berkeley.guir.prefusex.controls.PanControl;
import edu.berkeley.guir.prefusex.controls.ZoomControl;
import edu.berkeley.guir.prefusex.layout.RadialTreeLayout;

/**
 * Demo application showcasing the use of an animated radial tree layout to
 * visualize a graph. This is a re-implementation of <a 
 * href="http://zesty.ca/pubs/yee-gtv-infovis2001.pdf">Ping Yee et al.'s 
 * Animated Exploration of Dynamic Graphs with Radial Layout</a>.
 * 
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class RadialGraphDemo extends JFrame {

	public static final String GRAPH_GUIR       = "etc/guir.xml";
	public static final String GRAPH_FRIENDSTER = "etc/friendster.xml";
	public static final String GRAPH_TERROR     = "etc/terror.xml";
	public static final String nameField = "label";
    
    public static void main(String[] argv) {
        new RadialGraphDemo();
    } //
		
	public RadialGraphDemo() {
	    super("RadialLayout Demo");
		try {
			// load graph
			String inputFile = GRAPH_TERROR;
			XMLGraphReader gr = new XMLGraphReader();
			gr.setNodeType(DefaultTreeNode.class);
			Graph graph = gr.loadGraph(inputFile);
			
			// create display and filter
            ItemRegistry registry = new ItemRegistry(graph);
            Display display = new Display();
            
			// initialize renderers
			TextItemRenderer nodeRenderer = new TextItemRenderer();
			nodeRenderer.setMaxTextWidth(75);
			nodeRenderer.setAbbrevType(StringAbbreviator.NAME);
            nodeRenderer.setRoundedCorner(8,8);
			
			Renderer edgeRenderer = new DefaultEdgeRenderer();
			
			registry.setRendererFactory(new DefaultRendererFactory(
				nodeRenderer, edgeRenderer));
			
			// initialize action pipelines
			ActionList layout = new ActionList(registry);
            layout.add(new TreeFilter(true));
            layout.add(new RadialTreeLayout());
            layout.add(new DemoColorFunction(3));
            
            ActionList update = new ActionList(registry);
            update.add(new DemoColorFunction(3));
            update.add(new RepaintAction());
            
            ActionList animate = new ActionList(registry, 1500, 20);
            animate.setPacingFunction(new SlowInSlowOutPacer());
            animate.add(new PolarLocationAnimator());
            animate.add(new ColorAnimator());
            animate.add(new RepaintAction());
            animate.alwaysRunAfter(layout);
            
            // initialize display 
            display.setItemRegistry(registry);
            display.setSize(700,700);
            display.setBackground(Color.WHITE);
            display.addControlListener(new FocusControl(layout));
            display.addControlListener(new FocusControl(0,FocusManager.HOVER_KEY));
            display.addControlListener(new DragControl());
            display.addControlListener(new PanControl());
            display.addControlListener(new ZoomControl());
            display.addControlListener(new NeighborHighlightControl(update));
            
            registry.getFocusManager().putFocusSet(
                    FocusManager.HOVER_KEY, new DefaultFocusSet());

			// create and display application window
            setDefaultCloseOperation(EXIT_ON_CLOSE);
			getContentPane().add(display, BorderLayout.CENTER);
			pack();
			setVisible(true);
            
            // run filter+layout, and perform initial animation
            layout.runNow();
		} catch ( Exception e ) {
			e.printStackTrace();
		}	
	} //
	
    public class DemoColorFunction extends ColorFunction {
	    private Color graphEdgeColor = Color.LIGHT_GRAY;
        private Color highlightColor = new Color(50,50,255);
        private Color focusColor = new Color(255,50,50);
        private ColorMap colorMap;
	   
	   	public DemoColorFunction(int thresh) {
	   	    colorMap = new ColorMap(
	   	        ColorMap.getInterpolatedMap(thresh+1, Color.RED, Color.BLACK),
	   	        0, thresh);
	   	} //
	   
	   	public Paint getFillColor(VisualItem item) {
	   		if ( item instanceof NodeItem ) {
	   			return Color.WHITE;
	   		} else if ( item instanceof AggregateItem ) {
	   			return Color.LIGHT_GRAY;
	   		} else if ( item instanceof EdgeItem ) {
	   			return getColor(item);
	   		} else {
	   			return Color.BLACK;
	   		}
	   	} //
	   
		public Paint getColor(VisualItem item) {
		    if ( item.isFocus() ) {
		        return focusColor;
		    } else if ( item.isHighlighted() ) {
                return highlightColor;
            } else if (item instanceof NodeItem) {
                int d = ((NodeItem)item).getDepth();
                return colorMap.getColor(d);
			} else if (item instanceof EdgeItem) {
				EdgeItem e = (EdgeItem) item;
				if ( e.isTreeEdge() ) {
					int d, d1, d2;
                    d1 = ((NodeItem)e.getFirstNode()).getDepth();
                    d2 = ((NodeItem)e.getSecondNode()).getDepth();
                    d = Math.max(d1, d2);
                    return colorMap.getColor(d);
				} else {
					return graphEdgeColor;
				}
			} else {
				return Color.BLACK;
			}
		} //
   } // end of inner class DemoColorFunction

} // end of classs RadialGraphDemo
@


1.13
log
@Some facelifts and updates to the prefuse demos
@
text
@@


1.13.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.12
log
@Created new package for FocusSet implementations
@
text
@a4 2
import java.awt.Font;
import java.awt.FontMetrics;
d12 1
d17 2
a20 2
import edu.berkeley.guir.prefuse.action.animate.ColorAnimator;
import edu.berkeley.guir.prefuse.action.animate.PolarLocationAnimator;
a22 2
import edu.berkeley.guir.prefuse.event.FocusEvent;
import edu.berkeley.guir.prefuse.event.FocusListener;
a25 3
import edu.berkeley.guir.prefuse.graph.GraphLib;
import edu.berkeley.guir.prefuse.graph.Node;
import edu.berkeley.guir.prefuse.graph.Tree;
d31 1
a31 1
import edu.berkeley.guir.prefuse.util.ColorLib;
a54 5
		
	private ItemRegistry registry;
	private Graph graph;
	private Display display;
    private ActionList layout, update, animate;
d61 1
d67 1
a67 1
			graph = gr.loadGraph(inputFile);
d70 2
a71 2
            registry = new ItemRegistry(graph);
            display = new Display();
d74 6
a79 31
			Renderer nodeRenderer = new TextItemRenderer() {
				private int maxWidth = 75;
				private StringAbbreviator abbrev = 
					new StringAbbreviator(null, null);
					
				protected String getText(VisualItem item) {
					String s = item.getAttribute(m_labelName);
					Font font = item.getFont();
					if ( font == null ) { font = m_font; }
					FontMetrics fm = DEFAULT_GRAPHICS.getFontMetrics(font);
					if ( fm.stringWidth(s) > maxWidth ) {
						s = abbrev.abbreviate(s, 
							StringAbbreviator.NAME, 
							fm, maxWidth);			
					}
					return s;
				} //
			};
			Renderer edgeRenderer = new DefaultEdgeRenderer() {
				protected int getLineWidth(VisualItem item) {
					String w = item.getAttribute("weight");
					if ( w != null ) {
						try {
							return Integer.parseInt(w);
						} catch ( Exception e ) {}
					}
					return m_width;
				} //
			};
			Renderer aggrRenderer = null;
            ((TextItemRenderer)nodeRenderer).setRoundedCorner(8,8);
a80 1
			// initialize item registry
d82 1
a82 1
				nodeRenderer, edgeRenderer, aggrRenderer));
d85 2
a86 4
            ActionList filter = new ActionList(registry);
            filter.add(new TreeFilter());
            
            layout = new ActionList(registry);
d90 1
a90 1
            update = new ActionList(registry);
d94 1
a94 1
            animate = new ActionList(registry, 1500, 20);
d99 1
d105 2
a106 2
            display.addControlListener(new FocusControl());
            display.addControlListener(new FocusControl(0,"MouseOver"));
d112 2
a113 17
            registry.getFocusManager().putFocusSet("MouseOver", new DefaultFocusSet());
            
			// set up initial focus and focus listener
            registry.getDefaultFocusSet().addFocusListener(new FocusListener() {
                public void focusChanged(FocusEvent e) {
                    if ( update.isScheduled() )
                        update.cancel();
                    Node node = (Node)e.getFirstAdded();
                    if ( node != null ) {
                        NodeItem item = (NodeItem)registry.getNodeItem(node);
                        Tree t = GraphLib.breadthFirstTree(item);
                        registry.setFilteredGraph(t);
                        layout.runNow();
                        animate.runNow();                     
                    }
                } //
            });			
d121 2
a122 2
            // run filter, layout, and perform initial animation
            filter.runNow(); layout.runNow(); animate.runNow();
d131 2
a132 2
	    private Color nodeColors[];
	   	private Color edgeColors[];
d135 3
a137 7
	   		nodeColors = new Color[thresh];
	   	    edgeColors = new Color[thresh];
	   	    for ( int i = 0; i < thresh; i++ ) {
	   	    	double frac = i / ((double)thresh);
	   	    	nodeColors[i] = ColorLib.getIntermediateColor(Color.RED, Color.BLACK, frac);
	   	    	edgeColors[i] = ColorLib.getIntermediateColor(Color.RED, Color.BLACK, frac);
	   	    }
d153 3
a155 1
            if ( item.isHighlighted() ) {
d159 1
a159 1
				return nodeColors[Math.min(d, nodeColors.length-1)];
d167 1
a167 1
					return edgeColors[Math.min(d, edgeColors.length-1)];
@


1.11
log
@Fixed multicaster bug, other small updates
@
text
@d26 1
a37 1
import edu.berkeley.guir.prefuse.util.DefaultFocusSet;
@


1.10
log
@Added reference to Ping et al's work
@
text
@d37 1
d143 1
d149 2
@


1.9
log
@A whole lot of update
@
text
@d47 3
a49 1
 * visualize a graph.
@


1.8
log
@New filters added plus more
@
text
@d20 2
a21 2
import edu.berkeley.guir.prefuse.action.interpolate.ColorInterpolator;
import edu.berkeley.guir.prefuse.action.interpolate.PolarInterpolator;
d90 1
a90 1
					FontMetrics fm = m_g.getFontMetrics(font);
d131 2
a132 2
            animate.add(new PolarInterpolator());
            animate.add(new ColorInterpolator());
d203 1
a203 2
            Boolean hl = (Boolean)item.getVizAttribute("highlight");
            if ( hl != null && hl.booleanValue() ) {
@


1.7
log
@Major refactor
@
text
@a16 6
import edu.berkeley.guir.prefuse.action.ColorFunction;
import edu.berkeley.guir.prefuse.action.ColorInterpolator;
import edu.berkeley.guir.prefuse.action.Filter;
import edu.berkeley.guir.prefuse.action.GraphEdgeFilter;
import edu.berkeley.guir.prefuse.action.GraphNodeFilter;
import edu.berkeley.guir.prefuse.action.PolarInterpolator;
d18 5
a22 2
import edu.berkeley.guir.prefuse.action.TreeEdgeFilter;
import edu.berkeley.guir.prefuse.activity.ActionPipeline;
a30 1
import edu.berkeley.guir.prefuse.graph.TreeNode;
a60 1
	private Tree tree;
d62 1
a62 6
    private ActionPipeline filter, update, animate;
		
	private static Tree getInitialTree(Graph g) {
        Node[] n = GraphLib.getMostConnectedNodes(g);
		return GraphLib.breadthFirstTree((TreeNode)n[0]);
	} //
a74 1
			tree = getInitialTree(graph);
d77 1
a77 1
            registry = new ItemRegistry(tree);
d118 6
a123 8
            filter  = new ActionPipeline(registry);
            filter.add(new GraphNodeFilter());
            Filter treeEdgeFilter = new TreeEdgeFilter();
            treeEdgeFilter.setGarbageCollect(false);
            filter.add(treeEdgeFilter);
            filter.add(new RadialTreeLayout());
            filter.add(new GraphEdgeFilter());
            filter.add(new DemoColorFunction(3));
d125 1
a125 1
            update = new ActionPipeline(registry);
d129 1
a129 1
            animate = new ActionPipeline(registry, 1500, 20);
d150 6
a155 5
                    DefaultTreeNode node = (DefaultTreeNode)e.getFirstAdded();
                    if ( node != null && !node.equals(tree.getRoot()) ) {                           
                        tree = GraphLib.breadthFirstTree(node);
                        registry.setGraph(tree);
                        filter.runNow();
d159 1
a159 2
            });
			registry.getDefaultFocusSet().set(tree.getRoot());			
d167 2
a168 3
            // run filter and perform initial animation
            filter.runNow();
            animate.runNow();
d176 1
a176 1
        private Color highlightColor = Color.BLUE;
d205 1
a205 1
                return Color.BLUE;
@


1.6
log
@Updated Javadoc
@
text
@a7 1
import java.util.Iterator;
a13 1
import edu.berkeley.guir.prefuse.GraphItem;
d16 1
d19 1
a25 1
import edu.berkeley.guir.prefuse.activity.ActivityManager;
d31 2
a33 1
import edu.berkeley.guir.prefuse.graph.TreeLib;
d40 1
a41 1
import edu.berkeley.guir.prefusex.layout.RadialTreeLayout;
d47 1
d59 1
a59 1
	public static final String GRAPH_FRIENDSTER = "../prefuse/etc/friendster.xml";
d69 3
a71 10
	private static Tree getInitialTree(Graph g) {		
		Iterator nodeIter = g.getNodes();
		TreeNode r = (TreeNode)nodeIter.next();
		while ( nodeIter.hasNext() ) {
			TreeNode n = (TreeNode)nodeIter.next();
			if ( n.getEdgeCount() > r.getEdgeCount() ) {
				r = n;
			}
		}
		return TreeLib.breadthFirstTree(r);
d81 1
a81 1
			String inputFile = GRAPH_FRIENDSTER;
d97 1
a97 1
				protected String getText(GraphItem item) {
d111 1
a111 1
				protected int getLineWidth(GraphItem item) {
d131 3
a133 1
            filter.add(new TreeEdgeFilter());
d149 1
a149 1
            display.setRegistry(registry);
d165 1
a165 1
                        tree = TreeLib.breadthFirstTree(node);
d167 2
a168 2
                        ActivityManager.scheduleNow(filter);
                        ActivityManager.scheduleNow(animate);                      
d179 4
a182 6
			
			// because awt doesn't always give us 
			// our graphics context right away...
			while ( display.getGraphics() == null );
            ActivityManager.scheduleNow(filter);
            ActivityManager.scheduleNow(animate);
d199 2
a200 2
	   	    	nodeColors[i] = calcIntermediateColor(Color.RED, Color.BLACK, frac);
	   	    	edgeColors[i] = calcIntermediateColor(Color.RED, Color.BLACK, frac);
d204 1
a204 1
	   	public Paint getFillColor(GraphItem item) {
d216 1
a216 1
		public Paint getColor(GraphItem item) {
d227 2
a228 2
                    d1 = e.getFirstNode().getDepth();
                    d2 = e.getSecondNode().getDepth();
@


1.5
log
@Major refactoring of abstract graph data structures
@
text
@d45 2
a46 2
import edu.berkeley.guir.prefusex.controls.PanHandler;
import edu.berkeley.guir.prefusex.controls.ZoomHandler;
d158 2
a159 2
            display.addControlListener(new PanHandler());
            display.addControlListener(new ZoomHandler());
@


1.4
log
@Moved garbage collection into abstract Filter
@
text
@d30 1
a30 1
import edu.berkeley.guir.prefuse.graph.Edge;
d32 1
a33 1
import edu.berkeley.guir.prefuse.graph.Tree;
d73 1
a73 1
			if ( n.getNumNeighbors() > r.getNumNeighbors() ) {
d89 1
a89 1
			gr.setNodeType(TreeNode.class);
d167 1
a167 1
                    TreeNode node = (TreeNode)e.getFirstAdded();
d231 1
a231 2
				Edge edge = (Edge) registry.getEntity(e);
				if (edge.isTreeEdge()) {
@


1.3
log
@Added javadoc documentation
@
text
@a7 2
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
d179 1
a179 5
			addWindowListener(new WindowAdapter() {
				public void windowClosing(WindowEvent e) {
					System.exit(0);
				}
			});
@


1.2
log
@Fixed bug causing jitter (aka a jitterbug?)
@
text
@d51 2
a52 3
 * Prefuse Demo Application
 * 
 * Apr 25, 2003 - jheer - Created class
d55 1
a55 1
 * @@author Jeffrey Heer <a href="mailto:jheer@@acm.org">jheer@@acm.org</a>
d57 1
a57 1
public class RadialGraphDemo {
a61 1

d64 5
a68 5
	public static ItemRegistry registry;
	public static Graph graph;
	public static Tree tree;
	public static Display display;
    public static ActionPipeline filter, update, animate;
d81 4
d86 1
a86 1
	public static void main(String[] args) {
d181 1
a181 2
			JFrame frame = new JFrame("RadialGraphDemo");
			frame.addWindowListener(new WindowAdapter() {
d186 3
a188 3
			frame.getContentPane().add(display, BorderLayout.CENTER);
			frame.pack();
			frame.setVisible(true);
d200 1
a200 1
    static class DemoColorFunction extends ColorFunction {
@


1.1
log
@Major commit of updated architecture
@
text
@a156 1
            display.addControlListener(new NeighborHighlightControl(update));
d160 1
d165 2
@

