head	1.13;
access;
symbols
	alpha:1.12.0.2
	Root_alpha:1.12
	prefuse-alpha-20051229:1.12
	P20050401_Alpha_PreCHI:1.12;
locks; strict;
comment	@# @;


1.13
date	2006.02.11.06.38.42;	author jheer;	state dead;
branches;
next	1.12;

1.12
date	2005.01.14.23.13.05;	author jheer;	state Exp;
branches
	1.12.4.1;
next	1.11;

1.11
date	2005.01.07.02.19.35;	author jheer;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.15.06.49.31;	author jheer;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.25.04.35.38;	author jheer;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.24.01.57.26;	author jheer;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.23.04.00.10;	author jheer;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.16.03.05.17;	author jheer;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.15.03.33.29;	author jheer;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.11.19.11.13;	author jheer;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.07.18.03.50;	author jheer;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.03.08.11.05;	author jheer;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.27.21.35.46;	author jheer;	state Exp;
branches;
next	;

1.12.4.1
date	2005.12.30.09.16.20;	author jheer;	state dead;
branches;
next	;


desc
@@


1.13
log
@Merge beta branch back onto main trunk
@
text
@package edu.berkeley.guir.prefuse.demos;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.Paint;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JFrame;

import edu.berkeley.guir.prefuse.Display;
import edu.berkeley.guir.prefuse.EdgeItem;
import edu.berkeley.guir.prefuse.ItemRegistry;
import edu.berkeley.guir.prefuse.NodeItem;
import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.action.RepaintAction;
import edu.berkeley.guir.prefuse.action.assignment.ColorFunction;
import edu.berkeley.guir.prefuse.action.filter.GraphFilter;
import edu.berkeley.guir.prefuse.activity.ActionList;
import edu.berkeley.guir.prefuse.activity.Activity;
import edu.berkeley.guir.prefuse.graph.Graph;
import edu.berkeley.guir.prefuse.graph.GraphLib;
import edu.berkeley.guir.prefuse.render.DefaultEdgeRenderer;
import edu.berkeley.guir.prefuse.render.DefaultNodeRenderer;
import edu.berkeley.guir.prefuse.render.DefaultRendererFactory;
import edu.berkeley.guir.prefuse.render.TextItemRenderer;
import edu.berkeley.guir.prefusex.controls.DragControl;
import edu.berkeley.guir.prefusex.controls.FocusControl;
import edu.berkeley.guir.prefusex.controls.NeighborHighlightControl;
import edu.berkeley.guir.prefusex.controls.PanControl;
import edu.berkeley.guir.prefusex.controls.ZoomControl;
import edu.berkeley.guir.prefusex.force.DragForce;
import edu.berkeley.guir.prefusex.force.ForcePanel;
import edu.berkeley.guir.prefusex.force.ForceSimulator;
import edu.berkeley.guir.prefusex.force.NBodyForce;
import edu.berkeley.guir.prefusex.force.SpringForce;
import edu.berkeley.guir.prefusex.layout.ForceDirectedLayout;

/**
 * Application demo of a graph visualization using an interactive
 * force-based layout.
 *
 * @@version 1.0
 * @@author <a href="http://jheer.org">Jeffrey Heer</a> prefuse(AT)jheer.org
 */
public class ForceDemo extends Display {

    private JFrame     frame;
    private ForcePanel fpanel;
    
    private ForceSimulator m_fsim;
    private String         m_textField;
    private ItemRegistry   m_registry;
    private Activity       m_actionList;
    
    private Font frameCountFont = new Font("SansSerif", Font.PLAIN, 14);
    
    public ForceDemo(Graph g, ForceSimulator fsim) {
        this(g, fsim, "label");
    } //
    
    public ForceDemo(Graph g, ForceSimulator fsim, String textField) {
        // set up component first
        m_fsim = fsim;
        m_textField = textField;
        m_registry = new ItemRegistry(g);
        this.setItemRegistry(m_registry);
        initRenderers();
        m_actionList = initActionList();
        setSize(700,700);
        pan(350,350);
        this.addControlListener(new NeighborHighlightControl());
        this.addControlListener(new DragControl(false, true));
        this.addControlListener(new FocusControl(0));
        this.addControlListener(new PanControl(false));
        this.addControlListener(new ZoomControl(false));
    } //
    
    public void runDemo() {
        // now set up application window
        fpanel = new ForcePanel(m_fsim);
        
        frame = new JFrame("Force Simulator Demo");
        Container c = frame.getContentPane();
        c.setLayout(new BorderLayout());
        c.add(this, BorderLayout.CENTER);
        c.add(fpanel, BorderLayout.EAST);
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
        frame.addComponentListener(new ComponentAdapter() {
            public void componentResized(ComponentEvent e) {
                Dimension d = frame.getSize();
                Dimension p = fpanel.getSize();
                Insets in = frame.getInsets();
                ForceDemo.this.setSize(d.width-in.left-in.right-p.width,
                        d.height-in.top-in.bottom);
            } //
            
        });
        frame.pack();
        frame.setVisible(true);
        
        // start force simulation
        m_actionList.runNow();
    } //
    
    private void initRenderers() {
        TextItemRenderer    nodeRenderer = new TextItemRenderer();
        nodeRenderer.setRenderType(TextItemRenderer.RENDER_TYPE_FILL);
        nodeRenderer.setRoundedCorner(8,8);
        nodeRenderer.setTextAttributeName(m_textField);
        DefaultNodeRenderer nRenderer = new DefaultNodeRenderer();
        DefaultEdgeRenderer edgeRenderer = new DefaultEdgeRenderer();    
        m_registry.setRendererFactory(new DefaultRendererFactory(
                nodeRenderer, edgeRenderer, null));
    } //
    
    private ActionList initActionList() {
        ActionList actionList = new ActionList(m_registry,-1,20);
        actionList.add(new GraphFilter());
        actionList.add(new ForceDirectedLayout(m_fsim, false, false));
        actionList.add(new DemoColorFunction());
        actionList.add(new RepaintAction());
        return actionList;
    } //
    
    public static void main(String argv[]) {
        String file = (argv.length==0 ? "etc/friendster.xml" : argv[0]);
        //String file = "../prefuse/etc/terror.xml";
        //Graph g;
        //try {
        //    g = (new XMLGraphReader()).loadGraph(file);
        //} catch ( Exception e ) { e.printStackTrace(); return; }
        
        Graph g = GraphLib.getGrid(15,15);
        
        System.out.println("Visualizing Graph: "
            +g.getNodeCount()+" nodes, "+g.getEdgeCount()+" edges");
        
        ForceSimulator fsim = new ForceSimulator();
        fsim.addForce(new NBodyForce(-0.4f, -1f, 0.9f));
        fsim.addForce(new SpringForce(4E-5f, 75f));
        fsim.addForce(new DragForce(-0.005f));
        
        ForceDemo fdemo = new ForceDemo(g, fsim);
        fdemo.runDemo();
    } //

    public class DemoColorFunction extends ColorFunction {
        private Color pastelRed = new Color(255,125,125);
        private Color pastelOrange = new Color(255,200,125);
        private Color lightGray = new Color(220,220,255);
        public Paint getColor(VisualItem item) {
            if ( item instanceof EdgeItem ) {
                if ( item.isHighlighted() )
                    return pastelOrange;
                else
                    return Color.LIGHT_GRAY;
            } else {
                return Color.BLACK;
            }
        } //
        public Paint getFillColor(VisualItem item) {
            if ( item.isHighlighted() )
                return pastelOrange;
            else if ( item instanceof NodeItem ) {
                if ( item.isFocus() )
                    return pastelRed;
                else
                    return lightGray;
            } else {
                return Color.BLACK;
            }
        } //        
    } //
    
} // end of class ForceDemo
@


1.12
log
@Some facelifts and updates to the prefuse demos
@
text
@@


1.12.4.1
log
@Initial commit of prefuse beta
@
text
@@


1.11
log
@Removed unnecessary control listener
@
text
@d176 1
a176 1
                if ( item.isFixed() )
@


1.10
log
@Update to match other prefuse changes
@
text
@a5 1
import java.awt.Cursor;
a11 1
import java.awt.event.MouseEvent;
a26 1
import edu.berkeley.guir.prefuse.event.ControlAdapter;
d79 1
a79 1
        this.addControlListener(new DragControl(false));
a80 1
        this.addControlListener(new MouseOverControl());
a185 21
    /**
     * Tags and fixes the node under the mouse pointer.
     */
    public class MouseOverControl extends ControlAdapter {
        
        public void itemEntered(VisualItem item, MouseEvent e) {
            ((Display)e.getSource()).setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            item.setFixed(true);
        } //
        
        public void itemExited(VisualItem item, MouseEvent e) {
            ((Display)e.getSource()).setCursor(Cursor.getDefaultCursor());
            item.setFixed(false);
        } //
        
        public void itemReleased(VisualItem item, MouseEvent e) {
            item.setFixed(false);
        } //
        
    } // end of inner class FocusControl
    
@


1.9
log
@A whole lot of update
@
text
@d37 1
d83 1
@


1.8
log
@New filters added plus more
@
text
@d132 1
a132 1
        actionList.add(new ForceDirectedLayout(m_fsim, false));
d152 1
a152 1
        fsim.addForce(new NBodyForce(-0.4f, 0.9f));
d166 1
a166 2
                Boolean h = (Boolean)item.getVizAttribute("highlight");
                if ( h != null && h.booleanValue() )
d175 1
a175 2
            Boolean h = (Boolean)item.getVizAttribute("highlight");
            if ( h != null && h.booleanValue() )
@


1.7
log
@Major refactor
@
text
@a23 3
import edu.berkeley.guir.prefuse.action.ColorFunction;
import edu.berkeley.guir.prefuse.action.GraphEdgeFilter;
import edu.berkeley.guir.prefuse.action.GraphNodeFilter;
d25 3
a27 1
import edu.berkeley.guir.prefuse.activity.ActionPipeline;
d62 1
a62 1
    private Activity       m_pipeline;
d77 1
a77 1
        m_pipeline = initPipeline();
d115 1
a115 1
        m_pipeline.runNow();
d129 7
a135 8
    private ActionPipeline initPipeline() {
        ActionPipeline pipeline = new ActionPipeline(m_registry,-1,20);
        pipeline.add(new GraphNodeFilter());
        pipeline.add(new GraphEdgeFilter());
        pipeline.add(new ForceDirectedLayout(m_fsim, false));
        pipeline.add(new DemoColorFunction());
        pipeline.add(new RepaintAction());
        return pipeline;
@


1.6
log
@More Javadoc updates
@
text
@a8 2
import java.awt.FontMetrics;
import java.awt.Graphics2D;
a15 1
import java.awt.geom.AffineTransform;
a20 1
import edu.berkeley.guir.prefuse.GraphItem;
d23 1
a29 1
import edu.berkeley.guir.prefuse.activity.ActivityManager;
a36 1
import edu.berkeley.guir.prefusex.layout.ForceDirectedLayout;
d46 1
d76 1
a76 1
        this.setRegistry(m_registry);
d115 2
a116 2
        while ( getGraphics() == null ); // cycle until we can draw!
        ActivityManager.scheduleNow(m_pipeline);
a139 15
    protected void prePaint(Graphics2D g) {
        Dimension d = getSize();
        String fr = String.valueOf(frameRate) + "00";
        fr = fr.substring(0,fr.indexOf(".")+3);
        String s = "frame rate: " + fr + "fps";
        g.setTransform(new AffineTransform());
        FontMetrics fm = g.getFontMetrics(frameCountFont);
        int h = fm.getHeight();
        int w = fm.stringWidth(s);
        g.setFont(frameCountFont);
        g.setColor(Color.BLACK);
        g.drawString(s, d.width-w-10, 5+h);
        g.setTransform(getTransform());
    } //
    
d166 1
a166 1
        public Paint getColor(GraphItem item) {
d177 1
a177 1
        public Paint getFillColor(GraphItem item) {
d197 1
a197 1
        public void itemEntered(GraphItem item, MouseEvent e) {
d202 1
a202 1
        public void itemExited(GraphItem item, MouseEvent e) {
d207 1
a207 1
        public void itemReleased(GraphItem item, MouseEvent e) {
@


1.5
log
@Updated Javadoc
@
text
@d124 2
a125 5
        TextItemRenderer    nodeRenderer = new TextItemRenderer() {
            protected int getRenderType() {
                return RENDER_TYPE_FILL; 
            } //
        };
@


1.4
log
@Major refactoring of abstract graph data structures
@
text
@d44 2
a45 2
import edu.berkeley.guir.prefusex.controls.PanHandler;
import edu.berkeley.guir.prefusex.controls.ZoomHandler;
d88 2
a89 2
        this.addControlListener(new PanHandler(false));
        this.addControlListener(new ZoomHandler(false));
@


1.3
log
@Updated node "fixing"
@
text
@d173 1
a173 1
            +g.getNumNodes()+" nodes, "+g.getNumEdges()+" edges");
@


1.2
log
@Added javadoc documentation
@
text
@a84 1
        this.addControlListener(new MouseOverControl());
d87 1
d170 1
a170 1
        Graph g = GraphLib.getStar(40);
d177 1
a177 1
        fsim.addForce(new SpringForce(4E-5f, 100f));
d204 1
a204 2
                Boolean f = (Boolean)item.getVizAttribute("fixed");
                if ( f != null && f.booleanValue() )
d221 1
a221 1
            item.setVizAttribute("fixed", Boolean.TRUE);
d226 1
a226 1
            item.setVizAttribute("fixed", null);
d230 1
a230 1
            item.setVizAttribute("fixed", null);
@


1.1
log
@Major commit of updated architecture
@
text
@d163 6
a168 6
//        String file = (argv.length==0 ? "etc/friendster.xml" : argv[0]);
//        //String file = "../prefuse/etc/terror.xml";
//        Graph g;
//        try {
//            g = (new XMLGraphReader()).loadGraph(file);
//        } catch ( Exception e ) { e.printStackTrace(); return; }
d170 1
a170 1
        Graph g = GraphLib.getClique(40);
d177 1
a177 1
        fsim.addForce(new SpringForce(4E-5f, 250f));
@

