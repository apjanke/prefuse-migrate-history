head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2004.07.15.20.03.25;	author tha_jackl;	state dead;
branches;
next	1.5;

1.5
date	2004.07.13.07.00.32;	author tha_jackl;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.12.23.57.52;	author tha_jackl;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.09.08.30.46;	author tha_jackl;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.06.23.34.57;	author tha_jackl;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.04.08.37.27;	author tha_jackl;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Moved timeline into the demos
@
text
@/*
 * Created on Jul 3, 2004
 */
package edu.berkeley.guir.prefuse.demos;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import javax.swing.JFrame;

import edu.berkeley.guir.prefuse.Display;
import edu.berkeley.guir.prefuse.ItemRegistry;
import edu.berkeley.guir.prefuse.NodeItem;
import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.action.RepaintAction;
import edu.berkeley.guir.prefuse.action.assignment.ColorFunction;
import edu.berkeley.guir.prefuse.action.filter.GraphFilter;
import edu.berkeley.guir.prefuse.activity.ActionList;
import edu.berkeley.guir.prefuse.graph.DefaultEdge;
import edu.berkeley.guir.prefuse.graph.DefaultNode;
import edu.berkeley.guir.prefuse.graph.Graph;
import edu.berkeley.guir.prefuse.graph.Node;
import edu.berkeley.guir.prefuse.graph.io.XMLGraphReader;
import edu.berkeley.guir.prefuse.render.DefaultEdgeRenderer;
import edu.berkeley.guir.prefuse.render.DefaultRendererFactory;
import edu.berkeley.guir.prefuse.timeline.TimelineConstants;
import edu.berkeley.guir.prefuse.timeline.TimelineDataRenderer;
import edu.berkeley.guir.prefuse.timeline.TimelineLayout;
import edu.berkeley.guir.prefusex.controls.DragControl;

/**
 * @@author Jack Li jack(AT)cs_D0Tberkeley_D0Tedu
 */
public class TimelineDemo extends JFrame implements TimelineConstants {
    // (( CONSTANTS )) \\
    private static final String MUSIC_HISTORY = "etc/musichistory.xml";
    private static final String TITLE = "The History of Music";
    private static final int NUM_DIVISIONS = 0, NOTCH_LENGTH = 1;

    
    // (( FIELDS )) \\
    private final int appWidth = 1000;
    private final int appHeight = 800; // this should be more fixed than the width
    private final int divisionSpecification =
        //NOTCH_LENGTH;
        NUM_DIVISIONS;
    private final int timeline_start = 0;
    private final int timeline_end = 2005;
    private final int timelineSpan = timeline_end - timeline_start;
    private Graph graph;

    // (( CONSTRUCTOR )) \\
    public TimelineDemo() {
        // 1a. Load the timeline data into graph
        try {
            graph = new XMLGraphReader().loadGraph(MUSIC_HISTORY);
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }

        // 1b. Add notch nodes into the graph
        final double notchLength;
        Node prevNotchNode = null;
        int nextNotchNum = timeline_start;
        prevNotchNode = connectNewNotchNode(START, prevNotchNode, nextNotchNum); // start
                                                                                 // node
        int notchIndex = 1; // (0 is time_start, taken care of in the line
                            // before)
        if (divisionSpecification == NUM_DIVISIONS) {
            final int numDivisions = 20; // entered desired division in this
                                         // mode
            notchLength = timelineSpan / numDivisions;
            for (; notchIndex < numDivisions; notchIndex++) {
                nextNotchNum = (int) ((notchIndex * notchLength) + timeline_start);
                prevNotchNode = connectNewNotchNode("" + notchIndex,
                        prevNotchNode, nextNotchNum);
            }
        } else if (divisionSpecification == NOTCH_LENGTH) {
            notchLength = 311; // entered desired length in this mode
            nextNotchNum += notchLength;
            for (; nextNotchNum < timeline_end; nextNotchNum += notchLength) {
                //notchIndex = (nextNotchNum - timeline_start) / notchLength;
                prevNotchNode = connectNewNotchNode("" + notchIndex,
                        prevNotchNode, nextNotchNum);
                notchIndex++;
            }
        }
        connectNewNotchNode(END, prevNotchNode, timeline_end); // end node

        // 2. Create a new item registry
        final ItemRegistry registry = new ItemRegistry(graph);
        final int timelineLength = appWidth * 3 / 4; // this factor ought to be
                                                     // shared across all
                                                     // timeline instances
        registry.setRendererFactory(new DefaultRendererFactory(
                new TimelineDataRenderer(timeline_start, timeline_end,
                        timelineLength), new DefaultEdgeRenderer(), null));

        final Display display = new Display(registry);
        display.setSize(appWidth, appHeight);
        display.addControlListener(new DragControl());

        // set up this JFrame
        final JFrame frame = new JFrame(TITLE);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(display);
        frame.pack();
        frame.setVisible(true);

        final ActionList actions = new ActionList(registry);
        actions.add(new GraphFilter());
        actions.add(new MusicHistoryColorFunction());
        actions.add(new MusicHistoryLayout(timelineLength, notchIndex));
        actions.add(new RepaintAction());
        actions.runNow();
    }

    // (( METHODS )) \\
    private Node connectNewNotchNode(final String notchIndex,
            final Node prevNotchNode, final int nextNotchNum) {
        final DefaultNode nextNotchNode = new DefaultNode();
        nextNotchNode.setAttribute(XMLGraphReader.XMLGraphHandler.ID, NOTCH
                + notchIndex);
        nextNotchNode.setAttribute(XMLGraphReader.XMLGraphHandler.LABEL, ""
                + nextNotchNum);
        nextNotchNode.setAttribute(NODE_TYPE, NOTCH_TYPE);
        graph.addNode(nextNotchNode);

        if (prevNotchNode != null) { // the first node doesn't have an in-edge
            graph.addEdge(new DefaultEdge(prevNotchNode, nextNotchNode));
        }

        return nextNotchNode;
    }

    // (( INNER CLASSES )) \\
    private static class MusicHistoryColorFunction extends ColorFunction {
        public Paint getFillColor(VisualItem item) {
            if (item instanceof NodeItem) {
                final String nodeType = item.getAttribute(NODE_TYPE);
                if (nodeType.equals(PERIOD_TYPE)) {
                    return Color.BLUE;
                } else if (nodeType.equals(EVENT_TYPE)) {
                    return Color.RED;
                } else if (nodeType.equals(PERSON_TYPE)) {
                    return Color.GRAY;
                } else if (nodeType.equals(PIECE_TYPE)) {
                    return Color.DARK_GRAY;
                } else {
                    return Color.MAGENTA;
                }
            }
            return super.getFillColor(item);
        }
    } // end of class MusicHistoryColorFunction

    private class MusicHistoryLayout extends TimelineLayout {
        /**
         * @@param timelineLength
         * @@param numDivisions
         */
        public MusicHistoryLayout(final int m_timelineLength,
                final int m_numDivisions) {
            super(m_timelineLength, m_numDivisions);
        }

        private double getNodePosition(final int startYear, final int endYear, final double leftOffset) {
            final int yearsFromLeft = startYear - timeline_start;
            final double centerCorrection = ((double) endYear - startYear) / (timeline_end - timeline_start) * m_timelineLength / 2;
            final double fractionFromLeft = (double) yearsFromLeft / timelineSpan; // horn or not?
            return leftOffset + centerCorrection + (fractionFromLeft * m_timelineLength);
        }

        public void run(final ItemRegistry registry, final double frac) {
            final Iterator nodeItems = registry.getNodeItems();
            final Dimension displaySize = registry.getDisplay(0).getSize();
            final double leftOffset = (displaySize.getWidth() - m_timelineLength) / 2;
            final Rectangle2D bounds = getLayoutBounds(registry);
            VisualItem node;
            while (nodeItems.hasNext()) {
                node = (VisualItem) nodeItems.next();
                if (node.getAttribute(NODE_TYPE).equals(NOTCH_TYPE)) {
                    final String notchIndexString = getNotchIndex(node
                            .getAttribute(XMLGraphReader.XMLGraphHandler.ID));
                    final double y = displaySize.getHeight() / 3;
                    final double x;
                    if (notchIndexString.equals(START)) {
                        x = leftOffset;
                    } else if (notchIndexString.equals(END)) {
                        x = leftOffset + m_timelineLength;
                    } else { // a regular notch node
                        final int notchIndex = new Integer(notchIndexString)
                                .intValue();
                        x = leftOffset
                                + ((double) notchIndex / m_numDivisions * m_timelineLength);
                    }
                    setLocation(node, null, x, y);
                } else {
                    final String startYearString = node.getAttribute(START_YEAR);
                    final String endYearString = node.getAttribute(END_YEAR);

                    final int startYear, endYear;
                    if (startYearString.equals(TIMELINE_START)) {
                    	startYear = timeline_start;
                    } else {
                    	startYear = new Integer(startYearString).intValue(); // whoever gets children's hsopital
                    }
                    if (endYearString.equals(TIMELINE_END)) {
                    	endYear = timeline_end;
                    }
                    else {
                    	endYear = new Integer(endYearString).intValue();
                    }
                    final double x = getNodePosition(startYear, endYear, leftOffset);
                    final double yOffset;
                    final String nodeType = node.getAttribute(NODE_TYPE);
                    if (nodeType.equals(PERIOD_TYPE)) {
                        yOffset = 1.0 / 6;
                    } else if (nodeType.equals(EVENT_TYPE)) {
                        yOffset = 2.0 / 5;
                    } else if (nodeType.equals(PERSON_TYPE)) {
                        yOffset = 3.0 / 5;
                    } else if (nodeType.equals(PIECE_TYPE)) {
                        yOffset = 4.0 / 5;
                    } else {
                        yOffset = 1.0;
                    }
                    //final double y = bounds.getY() + Math.random()*bounds.getHeight();
                    final double y = bounds.getY() + yOffset * bounds.getHeight()
                    		+ Math.random() / 8 * bounds.getHeight();
                    setLocation(node, null, x, y);
                }
            }
        }
    } // end of class MusicHistoryLayout

    // (( MAIN )) \\
    public static void main(String[] args) {
        new TimelineDemo();
    }
} // end of class TimelineDemo
@


1.5
log
@Semi-random layout, lazily sorted that appears clustered when dealing with a lot of information
@
text
@@


1.4
log
@Preliminary layout written; packaged timeline stuff together
@
text
@a32 1
import edu.berkeley.guir.prefusex.layout.RandomLayout;
d74 1
a74 1
            final int numDivisions = 12; // entered desired division in this
a116 4
        actions.add(new RandomLayout()); // change to timeline layout,
                                         // musictimelinelayout
        //actions.add(new TimelineLayout(timelineLength, notchIndex)); // the
        // final notchIndex is the number of divisions
d171 5
a175 5
        private double getNodePosition(final int year, final double leftOffset) {
            final int yearsFromLeft = year - timeline_start;
            final double fractionFromLeft = (double) yearsFromLeft
                    / timelineSpan;
            return leftOffset + (fractionFromLeft * m_timelineLength);
d203 6
a208 4
                    final String startYear = node.getAttribute(START_YEAR);
                    final double x;
                    if (startYear.equals(TIMELINE_START)) {
                        x = getNodePosition(timeline_start, leftOffset);
d210 7
a216 3
                        System.out.println(startYear);
                        x = getNodePosition(new Integer(startYear).intValue(),
                                leftOffset);
d218 1
d222 1
a222 1
                        yOffset = 1 / 5;
d224 1
a224 1
                        yOffset = 2 / 5;
d226 1
a226 1
                        yOffset = 3 / 5;
d228 1
a228 1
                        yOffset = 4 / 5;
d230 1
a230 1
                        yOffset = 1;
d232 3
a234 4
                    final Rectangle2D b = getLayoutBounds(registry);
                    final double y = b.getY() + Math.random()*b.getHeight();
                    //final double y = bounds.getY() - yOffset * bounds.getHeight();//
                    		//+ Math.random() / 10 * bounds.getHeight(); // make y random for now
@


1.3
log
@Added node/edge rendering and color
@
text
@a0 1

d7 1
d9 1
a19 1
import edu.berkeley.guir.prefuse.action.assignment.Layout;
d29 3
a31 1
import edu.berkeley.guir.prefuse.render.TimelineDataRenderer;
d38 111
a148 115
public class TimelineDemo extends JFrame {
	// (( CONSTANTS )) \\
	private static final String MUSIC_HISTORY = "etc/musichistory.xml";
	private static final String TITLE = "The History of Music";
	private static final int NUM_DIVISIONS = 0, NOTCH_LENGTH = 1;
	private static final String NOTCH = "notch";
	private static final String START = "start";
	private static final String END = "end";
	public static final String NOTCH_START = NOTCH+START;
	public static final String NOTCH_END = NOTCH+END;
	public static final String NODE_TYPE = "nodetype";
	public static final String NOTCH_TYPE = "notch";
	public static final String PERIOD_TYPE = "period";
	public static final String EVENT_TYPE = "event";
	public static final String PERSON_TYPE = "person";
	public static final String PIECE_TYPE = "piece";
	
	
	// (( FIELDS )) \\
	private final int appWidth = 1000;
	private final int appHeight = 400; // this should be more fixed than the width
	private final int divisionSpecification = 
		//NOTCH_LENGTH; 
		NUM_DIVISIONS;
	private final int timeline_start = 0;
	private final int timeline_end = 2005;
	
	private Graph graph;

	
	// (( CONSTRUCTOR )) \\
	public TimelineDemo() {
		// load timeline data
		try {
			graph = new XMLGraphReader().loadGraph(MUSIC_HISTORY);
		} catch (Exception e) {
			e.printStackTrace();
			return;
		}
		
		// add notch nodes, which may allow dragging, or zooming
		final int notchLength;
		Node prevNotchNode = null;
		final int timeline_length = timeline_end - timeline_start;
		int nextNotchNum = timeline_start;
		prevNotchNode = connectNewNotchNode(START, prevNotchNode, nextNotchNum); // start node
		int i = 1; // 0 is time_start
		if (divisionSpecification == NUM_DIVISIONS) {
			final int numDivisions = 3; // entered desired division in this mode
			notchLength = timeline_length / numDivisions;
			for ( ; i < numDivisions; i++) {
				nextNotchNum = (i * notchLength) + timeline_start;
				prevNotchNode = connectNewNotchNode(""+i, prevNotchNode, nextNotchNum);
			}
		} else if (divisionSpecification == NOTCH_LENGTH) {
			notchLength = 311; // entered desired length in this mode
			for ( ; nextNotchNum < timeline_end; nextNotchNum += notchLength) {
				i = (nextNotchNum - timeline_start) / notchLength;
				prevNotchNode = connectNewNotchNode(""+i, prevNotchNode, nextNotchNum);
			}
		}
		connectNewNotchNode(END, prevNotchNode, timeline_end); // end node
		
		// create a new item registry
		final ItemRegistry registry = new ItemRegistry(graph);
		registry.setRendererFactory(new DefaultRendererFactory(
				new TimelineDataRenderer(), new DefaultEdgeRenderer(), null));
		
		final Display display = new Display(registry);
		display.setSize(appWidth, appHeight);
		display.addControlListener(new DragControl());
		
		// set up this JFrame
		final JFrame frame = new JFrame(TITLE);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().add(display);
		frame.pack();
		frame.setVisible(true);
		
		final ActionList actions = new ActionList(registry);
		actions.add(new GraphFilter());
		actions.add(new MusicHistoryColorFunction());
		actions.add(new RandomLayout());
		actions.add(new RepaintAction());
		actions.runNow();
	}


	private Node connectNewNotchNode(final String i, final Node prevNotchNode, final int nextNotchNum) {
		final DefaultNode nextNotchNode = new DefaultNode();
		nextNotchNode.setAttribute(
				XMLGraphReader.XMLGraphHandler.ID, NOTCH+i);
		nextNotchNode.setAttribute(
				XMLGraphReader.XMLGraphHandler.LABEL, ""+nextNotchNum);
		nextNotchNode.setAttribute(
				NODE_TYPE, NOTCH_TYPE);
		graph.addNode(nextNotchNode);
		
		if (prevNotchNode != null) { // the first node doesn't have an in-edge
			graph.addEdge(new DefaultEdge(prevNotchNode, nextNotchNode));
		}
		
		return nextNotchNode;
	}
	
	
	// (( INNER CLASS )) \\
	private static class MusicHistoryColorFunction extends ColorFunction {

		/*
		 * (non-Javadoc)
		 * @@see edu.berkeley.guir.prefuse.action.assignment.ColorFunction#getFillColor(edu.berkeley.guir.prefuse.VisualItem)
		 */
		public Paint getFillColor(VisualItem item) {
            if ( item instanceof NodeItem ) {
d151 1
a151 1
                	return Color.BLUE;
d153 1
a153 1
                	return Color.RED;
d155 1
a155 1
                	return Color.GRAY;
d157 1
a157 1
                	return Color.DARK_GRAY;
d159 1
a159 1
                	return Color.MAGENTA;
d162 83
a244 21
			return super.getFillColor(item);
		}
	}
	
	private static class TimelineLayout extends Layout {

		/* (non-Javadoc)
		 * @@see edu.berkeley.guir.prefuse.action.assignment.Layout#run(edu.berkeley.guir.prefuse.ItemRegistry, double)
		 */
		public void run(ItemRegistry registry, double frac) {
			final Iterator nodeItems = registry.getNodeItems();
			
		}
		
	}
	
	// (( MAIN )) \\
	public static void main(String[] args) {
		new TimelineDemo();
	}
}
@


1.2
log
@Added nodes for timeline notches and ways to specify number of notches
@
text
@d7 4
d15 2
d18 2
d22 1
d25 1
d27 1
d29 1
a29 1
import edu.berkeley.guir.prefuse.render.TextItemRenderer;
d37 1
a37 1
	
a40 1

d42 11
d54 10
a63 2
	private static class TimelineDataRenderer extends TextItemRenderer {
	}
d65 4
a68 12
	public static void main(String[] args) {
		final int appWidth = 1000;
		final int appHeight = 400; // this should be more fixed than the width
		final int divisionSpecification = NOTCH_LENGTH; 
										  //NUM_DIVISIONS;

		final int timeline_start = 0;
		final int timeline_end = 2005;
		
		// load graph
		//graphReader.setNodeType(DefaultTreeNode.class);
		final Graph graph;
d70 1
a70 1
			graph = /*graphReader*/new XMLGraphReader().loadGraph(MUSIC_HISTORY);
d76 1
a76 1
		// add mark nodes, which may allow dragging, or zooming
d78 1
d80 3
d84 1
a84 1
			final int numDivisions = 10; // entered desired division in this mode
d86 3
a88 8
			for (int i = 0; i < numDivisions; i++) {
				final int nextNotch = (i * notchLength) + timeline_start;
				final DefaultNode nextNotchNode = new DefaultNode();
				nextNotchNode.setAttribute(
						XMLGraphReader.XMLGraphHandler.ID, NOTCH+i);
				nextNotchNode.setAttribute(
						XMLGraphReader.XMLGraphHandler.LABEL, ""+nextNotch);
				graph.addNode(nextNotchNode);
d92 3
a94 8
			for (int nextNotch = timeline_start; nextNotch < timeline_end; nextNotch += notchLength) {
				final int i = (nextNotch - timeline_start) / notchLength;
				final DefaultNode nextNotchNode = new DefaultNode();
				nextNotchNode.setAttribute(
						XMLGraphReader.XMLGraphHandler.ID, NOTCH+i);
				nextNotchNode.setAttribute(
						XMLGraphReader.XMLGraphHandler.LABEL, ""+nextNotch);
				graph.addNode(nextNotchNode);
d97 1
a97 1

d99 1
d101 2
a102 1
		registry.setRendererFactory(new DefaultRendererFactory(new TimelineDataRenderer(), null, null));
d117 1
d122 62
@


1.1
log
@Initial framework for timeline widget demo
@
text
@d1 1
a3 3
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
d14 1
a14 1
import edu.berkeley.guir.prefuse.graph.DefaultTreeNode;
d23 1
a23 1
 * @@author Jack Li jack(AT)cs_DOTberkeley_DOTedu
d26 1
d29 3
d37 8
d46 1
a46 2
		final XMLGraphReader graphReader = new XMLGraphReader();
		graphReader.setNodeType(DefaultTreeNode.class);
d49 1
a49 1
			graph = graphReader.loadGraph(MUSIC_HISTORY);
d55 29
d88 1
a88 1
		display.setSize(1000, 400);
@

