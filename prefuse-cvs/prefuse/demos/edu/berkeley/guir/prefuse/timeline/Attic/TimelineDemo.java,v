head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2004.11.08.02.53.30;	author jheer;	state dead;
branches;
next	1.10;

1.10
date	2004.10.27.16.20.20;	author tha_jackl;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.12.04.04.28;	author tha_jackl;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.24.18.38.04;	author tha_jackl;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.12.06.00.27;	author tha_jackl;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.07.23.09.17;	author tha_jackl;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.06.17.51.33;	author tha_jackl;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.23.09.25.30;	author tha_jackl;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.23.08.02.42;	author tha_jackl;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.22.22.01.09;	author tha_jackl;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.15.20.03.52;	author tha_jackl;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Fixed multicaster bug, other small updates
@
text
@/*
 * Created on Jul 3, 2004
 */
package edu.berkeley.guir.prefuse.timeline;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import javax.swing.DefaultButtonModel;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JPanel;

import edu.berkeley.guir.prefuse.Display;
import edu.berkeley.guir.prefuse.EdgeItem;
import edu.berkeley.guir.prefuse.ItemRegistry;
import edu.berkeley.guir.prefuse.NodeItem;
import edu.berkeley.guir.prefuse.VisualItem;
import edu.berkeley.guir.prefuse.action.RepaintAction;
import edu.berkeley.guir.prefuse.action.assignment.ResizeBoundsFunction;
import edu.berkeley.guir.prefuse.action.assignment.SetBoundsFunction;
import edu.berkeley.guir.prefuse.activity.ActionList;
import edu.berkeley.guir.prefuse.graph.DefaultEdge;
import edu.berkeley.guir.prefuse.graph.DefaultNode;
import edu.berkeley.guir.prefuse.graph.Graph;
import edu.berkeley.guir.prefuse.graph.Node;
import edu.berkeley.guir.prefuse.graph.io.XMLGraphReader;
import edu.berkeley.guir.prefuse.render.DefaultEdgeRenderer;
import edu.berkeley.guir.prefuse.render.DefaultRendererFactory;
import edu.berkeley.guir.prefuse.render.TextItemRenderer;
import edu.berkeley.guir.prefusex.controls.MultiSelectFocusControl;
import edu.berkeley.guir.prefusex.controls.YAxisDragControl;
import edu.berkeley.guir.prefusex.distortion.FisheyeDistortion;

/**
 * @@author Jack Li jack(AT)cs_D0Tberkeley_D0Tedu
 */
public class TimelineDemo extends JFrame implements TimelineConstants {
    // (( CONSTANTS )) \\
    private static final String MUSIC_HISTORY = "etc/musichistory.xml";
    private static final String TITLE = "The History of Music";
    private static final int NUM_DIVISIONS = 0, NOTCH_LENGTH = 1;

    
    // (( FIELDS )) \\\
    private final int appWidth = 1000;
    private final int appHeight = 800; // this should be more fixed than the width
    private final int divisionSpecification =
        //NOTCH_LENGTH;
        NUM_DIVISIONS;
    private final int timeline_start = 0;
    private final int timeline_end = 2005;
    private final int timelineSpan = timeline_end - timeline_start;
    final ActionList initialArrange;

    private final int timelineLength = appWidth * 9 / 10; // this factor ought to be
                                                 // shared across all
                                                 // timeline instances
    private final double yearPerPixel = (double) timelineSpan / timelineLength;
    
    private Graph graph;

    
    // (( CONSTRUCTORS )) 
    
    public TimelineDemo() {
        // 1a. Load the timeline data into graph
        try {
            graph = new XMLGraphReader().loadGraph(MUSIC_HISTORY);
        } catch (Exception e) {
            e.printStackTrace();
        }

        // 1b. Add notch nodes into the graph
        final int numNotches = addNotchNodesToGraph();

        // 2. Create a new item registry
        final ItemRegistry registry = new ItemRegistry(graph, false);
        registry.addItemClass(XMLGraphReader.XMLGraphHandler.NODE, NodeItem.class);
        registry.addItemClass(ItemRegistry.DEFAULT_EDGE_CLASS, EdgeItem.class);
        final TextItemRenderer nodeRenderer = new TimelineDataRenderer(
        		timeline_start, timeline_end, timelineLength);
        //nodeRenderer.setVerticalAlignment(TextItemRenderer.ALIGNMENT_CENTER);
        nodeRenderer.setHorizontalAlignment(TextItemRenderer.ALIGNMENT_CENTER);
		registry.setRendererFactory(new DefaultRendererFactory(
                nodeRenderer, new DefaultEdgeRenderer(), null));

        final Display display = new Display(registry);
        //display.setUseCustomTooltips(true);
        display.setSize(appWidth, appHeight);
        display.addControlListener(new MultiSelectFocusControl(registry));
        display.addControlListener(new YAxisDragControl());
/*        display.addControlListener(new ControlAdapter() {
            private Point2D  m_tmp = new Point2D.Float();
            
            public void mouseMoved(MouseEvent e) {
                final Display d = (Display)e.getSource();
                d.getAbsoluteCoordinate(e.getPoint(), m_tmp);
                d.setToolTipText(""+getYear(m_tmp.getX()));
            } //
            
        });*/
        
        final ActionList distort = new ActionList(registry);
        final TimelineGraphFilter filter = new TimelineGraphFilter();
        distort.add(filter);//new /*Timeline*/GraphFilter());
        final FisheyeDistortion feye = new FisheyeDistortion(1,0,true);//NOTCH_NODE_TYPE);
        distort.add(feye);
        distort.add(new ResizeBoundsFunction(feye));
        distort.add(new MusicHistoryColorFunction());
        distort.add(new RepaintAction());
        
        // enable distortion mouse-over: should be only
        final TimelineInteractionListener mouseOverUpdates = 
            new TimelineInteractionListener(feye, distort, 10, timelineSpan, appWidth, timelineLength);
        display.addMouseListener(mouseOverUpdates);
        display.addMouseMotionListener(mouseOverUpdates);

        // set up this JFrame
        final JFrame frame = new JFrame(TITLE);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        final Container content = frame.getContentPane();
        content.add(new CheckBoxFilters(filter), BorderLayout.SOUTH);
		content.add(display, BorderLayout.CENTER);
        frame.pack();
        frame.setVisible(true);

        initialArrange = new ActionList(registry);
        initialArrange.add(new TimelineGraphFilter());
        initialArrange.add(new MusicHistoryColorFunction());
        initialArrange.add(new RandomTimelineLayout(timeline_start, timeline_end, timelineLength, numNotches));
        //initialArrange.add(new TimelineLayout(timelineLength, numNotches));
        initialArrange.add(new SetBoundsFunction()); // after layout
        initialArrange.add(new RepaintAction());
        initialArrange.runNow();
    }
    
    
	// (( METHODS )) \\
    /**
	 * @@return number of notches added
	 */
	private int addNotchNodesToGraph() {
		final double notchLength;
        Node prevNotchNode = null;
        int nextNotchNum = timeline_start;
        prevNotchNode = connectNewNotchNode(START, prevNotchNode, nextNotchNum); // start
                                                                                 // node
        int notchIndex = 1; // (0 is time_start, taken care of in the line
                            // before)
        if (divisionSpecification == NUM_DIVISIONS) {
            final int numDivisions = 20; // entered desired division in this
                                         // mode
            notchLength = timelineSpan / numDivisions;
            for (; notchIndex < numDivisions; notchIndex++) {
                nextNotchNum = (int) ((notchIndex * notchLength) + timeline_start);
                prevNotchNode = connectNewNotchNode("" + notchIndex,
                        prevNotchNode, nextNotchNum);
            }
        } else if (divisionSpecification == NOTCH_LENGTH) {
            notchLength = 311; // entered desired length in this mode
            nextNotchNum += notchLength;
            for (; nextNotchNum < timeline_end; nextNotchNum += notchLength) {
                //notchIndex = (nextNotchNum - timeline_start) / notchLength;
                prevNotchNode = connectNewNotchNode("" + notchIndex,
                        prevNotchNode, nextNotchNum);
                notchIndex++;
            }
        }
        connectNewNotchNode(END, prevNotchNode, timeline_end); // end node
		return notchIndex;
	}

    private int getYear(final double xCoord) {
        //return (int) ((xCoord - (appWidth / 8)) * timelineSpan / timelineLength);
        return ((8 * (int) xCoord * timelineSpan) - (timelineSpan * appWidth)) / (8 * timelineLength);
    }
    
    private Node connectNewNotchNode(final String notchIndex,
            final Node prevNotchNode, final int nextNotchNum) {
        final Node nextNotchNode = new /*NotchNode();*/DefaultNode();
        nextNotchNode.setAttribute(NODE_TYPE, NOTCH_TYPE);
        nextNotchNode.setAttribute(
        		XMLGraphReader.XMLGraphHandler.ID, NOTCH+notchIndex);
        nextNotchNode.setAttribute(
        		XMLGraphReader.XMLGraphHandler.LABEL, ""+nextNotchNum);
        graph.addNode(nextNotchNode);

        if (prevNotchNode != null) { // the first node doesn't have an in-edge
            graph.addEdge(new DefaultEdge(prevNotchNode, nextNotchNode));
        }

        return nextNotchNode;
    }

    
    // (( INNER CLASSES )) \\
    private class CheckBoxFilters extends JPanel {
        //private final TimelineGraphFilter filter;
        
        public CheckBoxFilters(final TimelineGraphFilter filter) {
            super();
            //this.filter = filter;
            setLayout(new FlowLayout()); // 
            for (final Iterator it = filter.getRegisteredTypes().iterator(); it.hasNext();) {
                final TTypeWrapper type = (TTypeWrapper) it.next();
                //System.out.println("name: "+type.toString()+" ;  isShown: "+type.isShown());
                final JCheckBox checkBox = new JCheckBox(type.toString());//, type.isShown());
                checkBox.setModel(new TTypeCheckBoxModel(type));
                checkBox.addActionListener(new ActionListener() {
                    public void actionPerformed(final ActionEvent act) {
                        type.setShown(!type.isShown()); // checkBox automatically gets set
                        checkBox.setSelected(!type.isShown());
                        initialArrange.runNow();
                        // refilter and show new timeline
                    }});
                add(checkBox);
            }
        }
    }
    
    private static class TTypeCheckBoxModel extends DefaultButtonModel {
        private final TTypeWrapper type;
        
        public TTypeCheckBoxModel(final TTypeWrapper type) {
            this.type = type;
        }
        
        /**
         * @@return Returns the type.
         */
        public TTypeWrapper getType() {
            return type;
        }
    }

    
    // (( MAIN )) \\
    public static void main(String[] args) {
        new TimelineDemo();
    }
} // end of class TimelineDemo
@


1.10
log
@Took out random layout
@
text
@@


1.9
log
@Checkboxes filter their respective data types
@
text
@d60 1
a60 1
    private final ActionList initialArrange;
d95 1
a95 1
        display.setUseCustomTooltips(true);
d137 2
a138 1
        initialArrange.add(new MusicHistoryLayout(timeline_start, timeline_end, timelineLength, numNotches));
a203 109
    private static class MusicHistoryLayout extends TimelineLayout {
    	private final int start;
    	private final int end;
    	
    	/**
    	 * 
    	 * @@param start
    	 * @@param end
    	 * @@param m_timelineLength
    	 * @@param m_numDivisions
    	 */
        public MusicHistoryLayout(final int start, final int end,
        		final int m_timelineLength, final int m_numDivisions) {
            super(m_timelineLength, m_numDivisions);
            this.start = start;
            this.end = end;
        }

        private double getNodePosition(final int startYear, final int endYear, final double leftOffset) {
            final int yearsFromLeft = startYear - start;
            final double centerCorrection = ((double) endYear - startYear) / (end - start) * m_timelineLength / 2;
            final double fractionFromLeft = (double) yearsFromLeft / (end - start); // horn or not?
            return leftOffset + centerCorrection + (fractionFromLeft * m_timelineLength);
        }

        public void run(final ItemRegistry registry, final double frac) {
            final Iterator nodeItems = registry.getFilteredGraph().getNodes();//getNodeItems();
            final Dimension displaySize = registry.getDisplay(0).getSize();
            final double leftOffset = (displaySize.getWidth() - m_timelineLength) / 2;
            VisualItem node;
            while (nodeItems.hasNext()) {
                node = (VisualItem) nodeItems.next();
                if (node.getAttribute(NODE_TYPE).equals(NOTCH_TYPE)) {
                    layoutNotchNode(displaySize, leftOffset, node);
                } else { // regular data node
                    final Rectangle2D bounds = getLayoutBounds(registry);
                    layoutDataNode(leftOffset, bounds, node);
                }
            }
        }

		/**
		 * @@param leftOffset
		 * @@param bounds
		 * @@param node
		 */
		private void layoutDataNode(final double leftOffset, final Rectangle2D bounds, VisualItem node) {
			final String startYearString = node.getAttribute(START_YEAR);
			final String endYearString = node.getAttribute(END_YEAR);

			final int startYear, endYear;
			if (startYearString.equals(TIMELINE_START)) {
				startYear = start;
			} else {
				startYear = new Integer(startYearString).intValue(); // whoever gets children's hsopital
			}
			if (endYearString.equals(TIMELINE_END)) {
				endYear = end;
			} else {
				endYear = new Integer(endYearString).intValue();
			}
			final double x = getNodePosition(startYear, endYear, leftOffset);
			final double yOffset;
			final String nodeType = node.getAttribute(NODE_TYPE);
			if (nodeType.equals(PERIOD_TYPE)) {
			    yOffset = 1.0 / 6;
			} else if (nodeType.equals(EVENT_TYPE)) {
			    yOffset = 2.0 / 5;
			} else if (nodeType.equals(PERSON_TYPE)) {
			    yOffset = 3.0 / 5;
			} else if (nodeType.equals(PIECE_TYPE)) {
			    yOffset = 4.0 / 5;
			} else {
			    yOffset = 1.0;
			}
			//final double y = bounds.getY() + Math.random()*bounds.getHeight();
			final double y = bounds.getY() + yOffset * bounds.getHeight()
					+ Math.random() / 8 * bounds.getHeight();
			setLocation(node, null, x, y);
		}

		/**
		 * @@param displaySize
		 * @@param leftOffset
		 * @@param node
		 */
		private void layoutNotchNode(final Dimension displaySize, final double leftOffset, VisualItem node) {
			final String notchIndexString = getNotchIndex(node
			        .getAttribute(XMLGraphReader.XMLGraphHandler.ID));
			final double y = displaySize.getHeight() / 3;
			final double x;
			if (notchIndexString.equals(START)) {
			    x = leftOffset;
			    //node.setFixed(true);
			} else if (notchIndexString.equals(END)) {
			    x = leftOffset + m_timelineLength;
			    //node.setFixed(true);
			} else { // a regular notch node
			    final int notchIndex = new Integer(notchIndexString)
			            .intValue();
			    x = leftOffset
			            + ((double) notchIndex / m_numDivisions * m_timelineLength);
			}
			setLocation(node, null, x, y);
		}
    } // end of class MusicHistoryLayout
    

    
d205 1
a205 1
        private final TimelineGraphFilter filter;
d209 1
a209 1
            this.filter = filter;
d213 1
a213 1
                System.out.println("name: "+type.toString()+" ;  isShown: "+type.isShown());
@


1.8
log
@Refactored some long methods, took some classes out into the package
@
text
@d10 2
a12 1
import java.util.HashSet;
a13 1
import java.util.Set;
d15 1
a27 1
import edu.berkeley.guir.prefuse.action.filter.GraphFilter;
d51 1
a51 4
    // (( FIELDS )) \\
    private static final String[] TYPES = {
    		PERIOD_TYPE, EVENT_TYPE, PERSON_TYPE, PIECE_TYPE};
    private static final Set registeredTypes = new HashSet();
d60 1
d70 1
a70 6
    // (( CONSTRUCTORS )) \\
    static {
    	for (int i = 0; i < TYPES.length; i++) {
    		registeredTypes.add(new TypeWrapper(TYPES[i]));
    	}
    }
a77 1
            return;
d111 2
a112 1
        distort.add(new /*Timeline*/GraphFilter());
d129 1
a129 1
        content.add(new CheckBoxFilters(), BorderLayout.SOUTH);
d134 2
a135 2
        final ActionList initialArrange = new ActionList(registry);
        initialArrange.add(new GraphFilter());
d229 1
a229 1
            final Iterator nodeItems = registry.getNodeItems();
a309 6
    private static class TypeWrapper {
    	private final String typeId;
    	
    	public TypeWrapper(final String typeId) {
    		this.typeId = typeId;
    	}
d311 23
a333 6
    	/**
    	 * Capitalize the first letter
    	 */
		public String toString() {
			return typeId.substring(0, 1).toUpperCase()+typeId.substring(1);
		}
d336 13
a348 10
    private static class CheckBoxFilters extends JPanel {
    	public CheckBoxFilters() {
    		super();
    		setLayout(new FlowLayout());
    		for (final Iterator it = registeredTypes.iterator(); it.hasNext(); ) {
    			final TypeWrapper type = (TypeWrapper) it.next();
    			final JCheckBox checkBox = new JCheckBox(type.toString(), true);
    			add(checkBox);
    		}
    	}
@


1.7
log
@Allows multiple selections to be made by shift-clicking
@
text
@d6 2
a7 1
import java.awt.Color;
d9 1
a9 1
import java.awt.Paint;
d11 1
d13 1
d15 1
d17 1
a24 1
import edu.berkeley.guir.prefuse.action.assignment.ColorFunction;
d52 3
d72 7
a78 1
    // (( CONSTRUCTOR )) \\
d89 1
a89 27
        final double notchLength;
        Node prevNotchNode = null;
        int nextNotchNum = timeline_start;
        prevNotchNode = connectNewNotchNode(START, prevNotchNode, nextNotchNum); // start
                                                                                 // node
        int notchIndex = 1; // (0 is time_start, taken care of in the line
                            // before)
        if (divisionSpecification == NUM_DIVISIONS) {
            final int numDivisions = 20; // entered desired division in this
                                         // mode
            notchLength = timelineSpan / numDivisions;
            for (; notchIndex < numDivisions; notchIndex++) {
                nextNotchNum = (int) ((notchIndex * notchLength) + timeline_start);
                prevNotchNode = connectNewNotchNode("" + notchIndex,
                        prevNotchNode, nextNotchNum);
            }
        } else if (divisionSpecification == NOTCH_LENGTH) {
            notchLength = 311; // entered desired length in this mode
            nextNotchNum += notchLength;
            for (; nextNotchNum < timeline_end; nextNotchNum += notchLength) {
                //notchIndex = (nextNotchNum - timeline_start) / notchLength;
                prevNotchNode = connectNewNotchNode("" + notchIndex,
                        prevNotchNode, nextNotchNum);
                notchIndex++;
            }
        }
        connectNewNotchNode(END, prevNotchNode, timeline_end); // end node
a92 3
        //registry.addItemClass(NOTCH_NODE_TYPE, NOTCH_NODE_ITEM_CLASS); // order matters
        //registry.addItemClass(NOTNOTCH_NODE_TYPE, NOTNOTCH_NODE_ITEM_CLASS);
        // XXX Gotta switch back later (comment out)
d135 3
a137 1
        frame.getContentPane().add(display);
d144 1
a144 1
        initialArrange.add(new MusicHistoryLayout(timelineLength, notchIndex));
d149 36
a185 2
    
    // (( METHODS )) \\
d210 13
a222 43
    private static class MusicHistoryColorFunction extends ColorFunction {
        private Color pastelOrange = new Color(255,200,125);

        public Paint getColor(VisualItem item) {
            if ( item instanceof NodeItem ) {
                if (item.isFocus()) 
                	return Color.MAGENTA;
                else if ( item.isHighlighted() )
                    return pastelOrange;
                else
                    return Color.BLACK;//Color.LIGHT_GRAY;
            } else {
                return Color.BLACK;
            }
        }
        
        public Paint getFillColor(VisualItem item) {
            if (item instanceof NodeItem) {
                final String nodeType = item.getAttribute(NODE_TYPE);
                if (nodeType.equals(PERIOD_TYPE)) {
                    return Color.BLUE;
                } else if (nodeType.equals(EVENT_TYPE)) {
                    return Color.RED;
                } else if (nodeType.equals(PERSON_TYPE)) {
                    return Color.GRAY;
                } else if (nodeType.equals(PIECE_TYPE)) {
                    return Color.DARK_GRAY;
                } else {
                    return Color.MAGENTA;
                }
            } else {
                return super.getFillColor(item);
            }
        }
    } // end of class MusicHistoryColorFunction

    private class MusicHistoryLayout extends TimelineLayout {
        /**
         * @@param timelineLength
         * @@param numDivisions
         */
        public MusicHistoryLayout(final int m_timelineLength,
                final int m_numDivisions) {
d224 2
d229 3
a231 3
            final int yearsFromLeft = startYear - timeline_start;
            final double centerCorrection = ((double) endYear - startYear) / (timeline_end - timeline_start) * m_timelineLength / 2;
            final double fractionFromLeft = (double) yearsFromLeft / timelineSpan; // horn or not?
a238 1
            final Rectangle2D bounds = getLayoutBounds(registry);
d243 1
a243 17
                    final String notchIndexString = getNotchIndex(node
                            .getAttribute(XMLGraphReader.XMLGraphHandler.ID));
                    final double y = displaySize.getHeight() / 3;
                    final double x;
                    if (notchIndexString.equals(START)) {
                        x = leftOffset;
                        //node.setFixed(true);
                    } else if (notchIndexString.equals(END)) {
                        x = leftOffset + m_timelineLength;
                        //node.setFixed(true);
                    } else { // a regular notch node
                        final int notchIndex = new Integer(notchIndexString)
                                .intValue();
                        x = leftOffset
                                + ((double) notchIndex / m_numDivisions * m_timelineLength);
                    }
                    setLocation(node, null, x, y);
d245 2
a246 33
                    final String startYearString = node.getAttribute(START_YEAR);
                    final String endYearString = node.getAttribute(END_YEAR);

                    final int startYear, endYear;
                    if (startYearString.equals(TIMELINE_START)) {
                    	startYear = timeline_start;
                    } else {
                    	startYear = new Integer(startYearString).intValue(); // whoever gets children's hsopital
                    }
                    if (endYearString.equals(TIMELINE_END)) {
                    	endYear = timeline_end;
                    }
                    else {
                    	endYear = new Integer(endYearString).intValue();
                    }
                    final double x = getNodePosition(startYear, endYear, leftOffset);
                    final double yOffset;
                    final String nodeType = node.getAttribute(NODE_TYPE);
                    if (nodeType.equals(PERIOD_TYPE)) {
                        yOffset = 1.0 / 6;
                    } else if (nodeType.equals(EVENT_TYPE)) {
                        yOffset = 2.0 / 5;
                    } else if (nodeType.equals(PERSON_TYPE)) {
                        yOffset = 3.0 / 5;
                    } else if (nodeType.equals(PIECE_TYPE)) {
                        yOffset = 4.0 / 5;
                    } else {
                        yOffset = 1.0;
                    }
                    //final double y = bounds.getY() + Math.random()*bounds.getHeight();
                    final double y = bounds.getY() + yOffset * bounds.getHeight()
                    		+ Math.random() / 8 * bounds.getHeight();
                    setLocation(node, null, x, y);
d250 65
d316 27
@


1.6
log
@Can only drag items on the y axis now
@
text
@d21 2
d33 2
d69 1
a69 2
            //graph = new XMLGraphReader().loadGraph(MUSIC_HISTORY);
            graph = new /*Timeline*/XMLGraphReader().loadGraph(MUSIC_HISTORY);
d121 1
a121 1
        
d195 3
a197 1
                if ( item.isHighlighted() )
@


1.5
log
@All timeline nodes correctly distorted: function classes to calculate distortion
@
text
@a30 1
import edu.berkeley.guir.prefusex.controls.DragControl;
d119 1
a119 1
        display.addControlListener(new DragControl());
@


1.4
log
@Added tooltips which unfortunately seem to greatly slow things down
@
text
@d54 1
a54 1
    private final int timelineLength = appWidth * 3 / 4; // this factor ought to be
d104 2
a105 2
        registry.addItemClass(NOTCH_NODE_TYPE, NOTCH_NODE_ITEM_CLASS); // order matters
        registry.addItemClass(NOTNOTCH_NODE_TYPE, NOTNOTCH_NODE_ITEM_CLASS);
d111 2
a112 1
        nodeRenderer.setVerticalAlignment(TextItemRenderer.ALIGNMENT_CENTER);
d119 1
d133 1
a133 1
        distort.add(new TimelineGraphFilter());
d136 1
a136 1

d140 1
a140 1
        // enable distortion mouse-over
d154 1
a154 1
        initialArrange.add(new /*Timeline*/GraphFilter());
d157 1
d265 1
a265 1
                } else {
@


1.3
log
@Updated color function for highlighted nodes; added mouseOver highlighting of nearby nodes
@
text
@d53 6
a108 3
        final int timelineLength = appWidth * 3 / 4; // this factor ought to be
                                                     // shared across all
                                                     // timeline instances
d116 1
d119 10
d140 1
a140 1
            new TimelineInteractionListener(feye, distort, 10);
d161 5
@


1.2
log
@Timeline has fisheye on mouseover in window
@
text
@a30 1
import edu.berkeley.guir.prefusex.controls.AnchorUpdateControl;
d125 4
a128 3
        final AnchorUpdateControl auc = new AnchorUpdateControl(feye, distort);
        display.addMouseListener(auc);
        display.addMouseMotionListener(auc);
d167 13
d194 2
a196 1
            return super.getFillColor(item);
@


1.1
log
@Moved timeline into the demos
@
text
@d15 1
d61 2
a62 1
            graph = new XMLGraphReader().loadGraph(MUSIC_HISTORY);
d98 6
a103 1
        final ItemRegistry registry = new ItemRegistry(graph);
d119 1
a119 1
        final FisheyeDistortion feye = new FisheyeDistortion(1,0);
d121 2
d138 1
a138 1
        initialArrange.add(new GraphFilter());
d149 1
a149 1
        final DefaultNode nextNotchNode = new DefaultNode();
d218 1
d221 1
@

