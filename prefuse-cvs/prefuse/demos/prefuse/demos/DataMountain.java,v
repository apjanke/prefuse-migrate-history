head	2.0;
access;
symbols
	java_1_5:2.0.0.4
	Root_java_1_5:2.0
	beta:2.0.0.2
	beta-20080113:2.0
	beta-20071021:2.0
	beta-20060220:2.0
	beta-20060209:2.0;
locks; strict;
comment	@# @;


2.0
date	2006.02.11.06.38.42;	author jheer;	state Exp;
branches
	2.0.4.1;
next	1.1;

1.1
date	2005.12.30.09.16.19;	author jheer;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.12.30.09.16.19;	author jheer;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.01.16.20.07.41;	author jheer;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2006.01.23.22.08.47;	author jheer;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2006.01.23.23.07.20;	author jheer;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2006.02.02.19.01.52;	author jheer;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2006.02.07.00.42.28;	author jheer;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2006.02.09.05.12.45;	author jheer;	state Exp;
branches;
next	;

2.0.4.1
date	2008.01.23.23.55.46;	author jogiles;	state Exp;
branches;
next	2.0.4.2;

2.0.4.2
date	2008.03.14.09.21.06;	author amarsden;	state Exp;
branches;
next	;


desc
@@


2.0
log
@Merge beta branch back onto main trunk
@
text
@package prefuse.demos;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.util.Iterator;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

import prefuse.Constants;
import prefuse.Display;
import prefuse.Visualization;
import prefuse.action.ActionList;
import prefuse.action.RepaintAction;
import prefuse.action.assignment.ColorAction;
import prefuse.action.assignment.SizeAction;
import prefuse.action.layout.RandomLayout;
import prefuse.action.layout.graph.ForceDirectedLayout;
import prefuse.activity.Activity;
import prefuse.activity.ActivityAdapter;
import prefuse.activity.ActivityListener;
import prefuse.controls.ControlAdapter;
import prefuse.data.Schema;
import prefuse.data.Table;
import prefuse.data.io.DelimitedTextTableReader;
import prefuse.data.tuple.TupleSet;
import prefuse.render.DefaultRendererFactory;
import prefuse.render.LabelRenderer;
import prefuse.util.ColorLib;
import prefuse.util.PrefuseLib;
import prefuse.util.force.DragForce;
import prefuse.util.force.ForceItem;
import prefuse.util.force.ForceSimulator;
import prefuse.util.force.NBodyForce;
import prefuse.util.force.SpringForce;
import prefuse.util.ui.BrowserLauncher;
import prefuse.visual.VisualItem;
import prefuse.visual.sort.ItemSorter;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class DataMountain extends Display {
    
    public DataMountain(Table t) {
        super(new Visualization());
        m_vis.addTable("data", t);
        
        LabelRenderer nodeRenderer = new LabelRenderer(null, "image");
        nodeRenderer.setTextField(null);
        nodeRenderer.setVerticalAlignment(Constants.BOTTOM);
        nodeRenderer.setHorizontalPadding(0);
        nodeRenderer.setVerticalPadding(0);
        nodeRenderer.setMaxImageDimensions(100,100);
        
        m_vis.setRendererFactory(new DefaultRendererFactory(nodeRenderer));
        
        ActionList init = new ActionList();
        init.add(new RandomLayout());
        init.add(new DataMountainSizeAction());
        m_vis.putAction("init", init);
        
        ActionList update = new ActionList();
        update.add(new DataMountainSizeAction());
        update.add(new ColorAction("data", VisualItem.STROKECOLOR) {
            public int getColor(VisualItem item) {
                return ColorLib.rgb((item.isHover() ? 255 : 0), 0, 0);
            }
        });
        update.add(new RepaintAction());
        m_vis.putAction("update", update);

        // we run this to make sure the forces are stabilized
        ActionList preforce = new ActionList(1000);
        preforce.add(new DataMountainForceLayout(true));
        m_vis.putAction("preforce", preforce);

        // this will cause docs to move out of the way when dragging
        final ForceDirectedLayout fl = new DataMountainForceLayout(false);
        ActivityListener fReset = new ActivityAdapter() {
            public void activityCancelled(Activity a) {
                fl.reset(); 
             } 
        };
        ActionList forces = new ActionList(Activity.INFINITY);
        forces.add(fl);
        forces.add(update);
        forces.addActivityListener(fReset);
        m_vis.putAction("forces", forces);
        
        setSize(640,450);
        setDamageRedraw(false); // disable due to Java2D image clipping errors
        setBorder(BorderFactory.createEmptyBorder(30,20,5,20));
        setItemSorter(new DataMountainSorter());
        addControlListener(new DataMountainControl());
        
        // pre-load images, otherwise they will be loaded asynchronously
        nodeRenderer.getImageFactory().preloadImages(m_vis.items(),"image");
        
        // initialize and present the interface
        m_vis.run("init");
        m_vis.runAfter("preforce", "update");
        m_vis.run("preforce");
    }

    // ------------------------------------------------------------------------
    
    public static void main(String[] args) {       
        JFrame frame = new JFrame("p r e f u s e  |  d a t a m o u n t a i n");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(demo());
        frame.pack();
        frame.setVisible(true);
    }
    
    public static JComponent demo() {
        String datafile = "/amazon.txt";
        Table data = null;
        try {
            data = (new DelimitedTextTableReader()).readTable(datafile);
            data.addColumn("image","CONCAT('/images/',id,'.01.MZZZZZZZ.jpg')");
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        return new DataMountain(data);
    }
    
    // ------------------------------------------------------------------------
    
    public static class DataMountainSorter extends ItemSorter {
        public int score(VisualItem item) {
            return (int)(10000*item.getY());
        }
    } // end of inner class DataMountainComparator
    
    public class DataMountainSizeAction extends SizeAction {
        public double getSize(VisualItem item) {
            double y = item.getEndY();
            return 0.2 + y/1400;
        }
    } // end of inner class DataMountainSizeAction
    
    private static final String ANCHORITEM = "_anchorItem";
    private static final Schema ANCHORITEM_SCHEMA = new Schema();
    static {
        ANCHORITEM_SCHEMA.addColumn(ANCHORITEM, ForceItem.class);
    }
    
    public class DataMountainForceLayout extends ForceDirectedLayout {
        
        public DataMountainForceLayout(boolean enforceBounds) {
            super("data",enforceBounds,false);
            
            ForceSimulator fsim = new ForceSimulator();
            fsim.addForce(new NBodyForce(-0.4f, 25f, NBodyForce.DEFAULT_THETA));
            fsim.addForce(new SpringForce(1e-5f,0f));
            fsim.addForce(new DragForce());
            setForceSimulator(fsim);
            
            m_nodeGroup = "data";
            m_edgeGroup = null;
        }
        
        protected float getMassValue(VisualItem n) {
            return n.isHover() ? 5f : 1f;
        }

        public void reset() {
            Iterator iter = m_vis.visibleItems(m_nodeGroup);
            while ( iter.hasNext() ) {
                VisualItem item = (VisualItem)iter.next();
                ForceItem aitem = (ForceItem)item.get(ANCHORITEM);
                if ( aitem != null ) {
                    aitem.location[0] = (float)item.getEndX();
                    aitem.location[1] = (float)item.getEndY();
                }
            }
            super.reset();
        }
        protected void initSimulator(ForceSimulator fsim) {
            // make sure we have force items to work with
            TupleSet t = (TupleSet)m_vis.getGroup(m_group);
            t.addColumns(ANCHORITEM_SCHEMA);
            t.addColumns(FORCEITEM_SCHEMA);
            
            Iterator iter = m_vis.visibleItems(m_nodeGroup);
            while ( iter.hasNext() ) {
                VisualItem item = (VisualItem)iter.next();
                // get force item
                ForceItem fitem = (ForceItem)item.get(FORCEITEM);
                if ( fitem == null ) {
                    fitem = new ForceItem();
                    item.set(FORCEITEM, fitem);
                }
                fitem.location[0] = (float)item.getEndX();
                fitem.location[1] = (float)item.getEndY();
                fitem.mass = getMassValue(item);
                
                // get spring anchor
                ForceItem aitem = (ForceItem)item.get(ANCHORITEM);
                if ( aitem == null ) {
                    aitem = new ForceItem();
                    item.set(ANCHORITEM, aitem);
                    aitem.location[0] = fitem.location[0];
                    aitem.location[1] = fitem.location[1];
                }
                
                fsim.addItem(fitem);
                fsim.addSpring(fitem, aitem, 0);
            }     
        }       
    } // end of inner class DataMountainForceLayout
    
    public class DataMountainControl extends ControlAdapter {
        public static final String URL = "http://www.amazon.com/exec/obidos/tg/detail/-/";
        private VisualItem activeItem;
        private Point2D down = new Point2D.Double();
        private Point2D tmp = new Point2D.Double();
        private boolean wasFixed, dragged;
        private boolean repaint = false;
        
        public void itemEntered(VisualItem item, MouseEvent e) {
            Display d = (Display)e.getSource();
            d.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            d.setToolTipText(item.getString("id"));
            activeItem = item;
            wasFixed = item.isFixed();
        }
        
        public void itemExited(VisualItem item, MouseEvent e) {
            if ( activeItem == item ) {
                activeItem = null;
                item.setFixed(wasFixed);
            }
            Display d = (Display)e.getSource();
            d.setToolTipText(null);
            d.setCursor(Cursor.getDefaultCursor());
        }
        
        public void itemPressed(VisualItem item, MouseEvent e) {
            if (!SwingUtilities.isLeftMouseButton(e)) return;
            
            // set the focus to the current node
            Visualization vis = item.getVisualization();
            vis.getFocusGroup(Visualization.FOCUS_ITEMS).setTuple(item);
            
            item.setFixed(true);
            dragged = false;
            Display d = (Display)e.getComponent();
            down = d.getAbsoluteCoordinate(e.getPoint(), down);
            
            vis.run("forces");
        }
        
        public void itemReleased(VisualItem item, MouseEvent e) {
            if (!SwingUtilities.isLeftMouseButton(e)) return;
            if ( dragged ) {
                activeItem = null;
                item.setFixed(wasFixed);
                dragged = false;
            }
            // clear the focus
            Visualization vis = item.getVisualization();
            vis.getFocusGroup(Visualization.FOCUS_ITEMS).clear();

            vis.cancel("forces");
        }
        
        public void itemClicked(VisualItem item, MouseEvent e) {
            if (!SwingUtilities.isLeftMouseButton(e)) return;
            if ( e.getClickCount() == 2 ) {
                String id = item.getString("id");
                BrowserLauncher.showDocument(URL+id);
            }
        }
        
        public void itemDragged(VisualItem item, MouseEvent e) {
            if (!SwingUtilities.isLeftMouseButton(e)) return;
            dragged = true;
            Display d = (Display)e.getComponent();
            tmp = d.getAbsoluteCoordinate(e.getPoint(), tmp);
            double dx = tmp.getX()-down.getX();
            double dy = tmp.getY()-down.getY();
            
            PrefuseLib.setX(item, null, item.getX()+dx);
            PrefuseLib.setY(item, null, item.getY()+dy);
            down.setLocation(tmp);
            if ( repaint )
                item.getVisualization().repaint();
        }
    } // end of inner class DataMountainControl
    
} // end of class DataMountain

@


2.0.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d6 1
d13 1
a13 1
import prefuse.Alignment;
a36 1
import prefuse.util.force.ForceSimulatorImpl;
d47 2
a48 2

    public DataMountain(Table<?> t) {
d51 1
a51 1

d54 1
a54 1
        nodeRenderer.setVerticalAlignment(Alignment.BOTTOM);
d58 1
a58 1

d60 1
a60 1

d65 1
a65 1

d69 1
a69 2
            @@Override
			public int getColor(VisualItem<?> item) {
d84 3
a86 4
            @@Override
			public void activityCancelled(Activity a) {
                fl.reset();
             }
d93 1
a93 1

d99 1
a99 1

d101 2
a102 2
        nodeRenderer.getImageFactory().preloadImages(m_vis.items().iterator(),"image");

d110 2
a111 2

    public static void main(String[] args) {
d118 1
a118 1

d121 1
a121 1
        Table<?> data = null;
d131 1
a131 1

d133 1
a133 1

d135 1
a135 2
        @@Override
		public int score(VisualItem<?> item) {
d139 1
a139 1

d141 1
a141 2
        @@Override
		public double getSize(VisualItem<?> item) {
d146 1
a146 1

d152 1
a152 1

d154 1
a154 1

d157 2
a158 2

            ForceSimulator fsim = new ForceSimulatorImpl();
d163 1
a163 1

d167 2
a168 3

        @@Override
		protected float getMassValue(VisualItem<?> n) {
d172 4
a175 3
        @@Override
		public void reset() {
        	for(VisualItem<?> item : m_vis.visibleItems(m_nodeGroup)) {
d184 1
a184 2
        @@Override
		protected void initSimulator(ForceSimulator fsim) {
d186 1
a186 1
            TupleSet<?> t = m_vis.getGroup(m_group);
d189 4
a192 2

        	for(VisualItem<?> item : m_vis.visibleItems(m_nodeGroup)) {
d202 1
a202 1

d211 1
a211 1

d214 2
a215 2
            }
        }
d217 1
a217 1

d220 1
a220 1
        private VisualItem<?> activeItem;
d224 3
a226 4
        private final boolean repaint = false;

        @@Override
		public void itemEntered(VisualItem<?> item, MouseEvent e) {
d233 2
a234 3

        @@Override
		public void itemExited(VisualItem<?> item, MouseEvent e) {
d243 4
a246 7

        @@Override
		public void itemPressed(VisualItem<?> item, MouseEvent e) {
            if (!SwingUtilities.isLeftMouseButton(e)) {
				return;
			}

d250 1
a250 1

d255 1
a255 1

d258 3
a260 6

        @@Override
		public void itemReleased(VisualItem<?> item, MouseEvent e) {
            if (!SwingUtilities.isLeftMouseButton(e)) {
				return;
			}
d272 3
a274 6

        @@Override
		public void itemClicked(VisualItem<?> item, MouseEvent e) {
            if (!SwingUtilities.isLeftMouseButton(e)) {
				return;
			}
d280 3
a282 6

        @@Override
		public void itemDragged(VisualItem<?> item, MouseEvent e) {
            if (!SwingUtilities.isLeftMouseButton(e)) {
				return;
			}
d288 1
a288 1

d292 2
a293 3
            if ( repaint ) {
				item.getVisualization().repaint();
			}
d296 1
a296 1

@


2.0.4.2
log
@Changed preloadImages interface to accept an Iterable rather than an Iterator
@
text
@d103 1
a103 1
        nodeRenderer.getImageFactory().preloadImages(m_vis.items(),"image");
@


1.1
log
@file DataMountain.java was initially added on branch beta.
@
text
@d1 298
@


1.1.2.1
log
@Initial commit of prefuse beta
@
text
@a0 318
package prefuse.demos;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.util.Iterator;

import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

import prefuse.Constants;
import prefuse.Display;
import prefuse.Visualization;
import prefuse.action.ActionList;
import prefuse.action.RepaintAction;
import prefuse.action.assignment.ColorFunction;
import prefuse.action.assignment.SizeFunction;
import prefuse.action.layout.RandomLayout;
import prefuse.action.layout.graph.ForceDirectedLayout;
import prefuse.activity.Activity;
import prefuse.activity.ActivityAdapter;
import prefuse.activity.ActivityListener;
import prefuse.controls.ControlAdapter;
import prefuse.data.Table;
import prefuse.data.io.DelimitedTextTableReader;
import prefuse.render.DefaultRendererFactory;
import prefuse.render.ImageItemRenderer;
import prefuse.util.ColorLib;
import prefuse.util.PrefuseLib;
import prefuse.util.force.DragForce;
import prefuse.util.force.ForceItem;
import prefuse.util.force.ForceSimulator;
import prefuse.util.force.NBodyForce;
import prefuse.util.force.SpringForce;
import prefuse.util.ui.BrowserLauncher;
import prefuse.visual.VisualItem;
import prefuse.visual.sort.ItemSorter;

/**
 * @@author <a href="http://jheer.org">jeffrey heer</a> prefuse(AT)jheer.org
 */
public class DataMountain extends Display {
    
    public DataMountain(Table t) {
        super(new Visualization());
        m_vis.addTable("data", t);
        
        ImageItemRenderer nodeRenderer = new ImageItemRenderer();
        nodeRenderer.setTextField(null);
        nodeRenderer.setVerticalAlignment(Constants.BOTTOM);
        nodeRenderer.setHorizontalPadding(0);
        nodeRenderer.setVerticalPadding(0);
        nodeRenderer.setMaxImageDimensions(100,100);
        
        m_vis.setRendererFactory(new DefaultRendererFactory(nodeRenderer));
        
        ActionList init = new ActionList();
        init.add(new RandomLayout());
        init.add(new DataMountainSizeFunction());
        m_vis.putAction("init", init);
        
        ActionList update = new ActionList();
        update.add(new DataMountainSizeFunction());
        update.add(new ColorFunction("data", VisualItem.STROKECOLOR) {
            public int getColor(VisualItem item) {
                return ColorLib.rgb((item.isHover() ? 255 : 0), 0, 0);
            }
        });
        update.add(new RepaintAction());
        m_vis.putAction("update", update);

        // we run this to make sure the forces are stabilized
        ActionList preforce = new ActionList(1000);
        preforce.add(new DataMountainForceLayout(true));
        m_vis.putAction("preforce", preforce);

        // this will cause docs to move out of the way when dragging
        final ForceDirectedLayout fl = new DataMountainForceLayout(false);
        ActivityListener fReset = new ActivityAdapter() {
            public void activityCancelled(Activity a) {
                fl.reset(); 
             } 
        };
        ActionList forces = new ActionList(Activity.INFINITY);
        forces.add(fl);
        forces.add(update);
        forces.addActivityListener(fReset);
        m_vis.putAction("forces", forces);
        
        setSize(640,450);
        setBorder(BorderFactory.createEmptyBorder(30,20,5,20));
        setItemSorter(new DataMountainSorter());
        addControlListener(new DataMountainControl());
        
        // pre-load images, otherwise they will be loaded asynchronously
        nodeRenderer.getImageFactory().preloadImages(m_vis.items(),"image");
        
        // initialize and present the interface
        m_vis.run("init");
        m_vis.runAfter("preforce", "update");
        m_vis.run("preforce");
    } //

    // ------------------------------------------------------------------------
    
    public static void main(String[] args) {
    	JFrame frame = null;
        if ( args.length > 0 )
            frame = demo(args[0]);
        else
        	frame = demo();
        
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    } //
    
    public static JFrame demo() {
        String datafile = "/amazon.txt";
        Table data = null;
        try {
            data = (new DelimitedTextTableReader()).readTable(datafile);
            data.addColumn("image","CONCAT('/images/',id,'.01.MZZZZZZZ.jpg')");
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        
        DataMountain dm = new DataMountain(data);
        JFrame frame = new JFrame("p r e f u s e  |  d a t a m o u n t a i n");
        frame.getContentPane().add(dm);
        frame.pack();
        return frame;
    }
    
    public static JFrame demo(String datafile) {
        Table data = null;
        try {
            data = (new DelimitedTextTableReader()).readTable(datafile);
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        
        DataMountain dm = new DataMountain(data);
        JFrame frame = new JFrame("p r e f u s e  |  d a t a m o u n t a i n");
        frame.getContentPane().add(dm);
        frame.pack();
        return frame;
    }
    
    // ------------------------------------------------------------------------
    
    public static class DataMountainSorter extends ItemSorter {
        public int score(VisualItem item) {
            return (int)(10000*item.getY());
        }
    } // end of inner class DataMountainComparator
    
    public class DataMountainSizeFunction extends SizeFunction {
        public double getSize(VisualItem item) {
            double y = item.getEndY();
            return 0.2 + y/1400;
        }
    } // end of inner class DataMountainSizeFunction
    
    public class DataMountainForceLayout extends ForceDirectedLayout {
        private static final String ANCHORITEM = "_anchorItem";
        
        public DataMountainForceLayout(boolean enforceBounds) {
            super("data",enforceBounds,false);
            
            ForceSimulator fsim = new ForceSimulator();
            fsim.addForce(new NBodyForce(-0.4f, 25f, NBodyForce.DEFAULT_THETA));
            fsim.addForce(new SpringForce(1e-5f,0f));
            fsim.addForce(new DragForce());
            setForceSimulator(fsim);
            
            m_nodeGroup = "data";
            m_edgeGroup = null;
        }
        
        protected float getMassValue(VisualItem n) {
            return n.isHover() ? 5f : 1f;
        }

        public void reset() {
            Iterator iter = m_vis.visibleItems(m_nodeGroup);
            while ( iter.hasNext() ) {
                VisualItem item = (VisualItem)iter.next();
                ForceItem aitem = (ForceItem)item.get(ANCHORITEM);
                if ( aitem != null ) {
                    aitem.location[0] = (float)item.getEndX();
                    aitem.location[1] = (float)item.getEndY();
                }
            }
            super.reset();
        } //
        protected void initSimulator(ForceSimulator fsim) {
            // make sure we have force items to work with
            Table t = (Table)m_vis.getGroup(m_group);
            if ( t.getColumnIndex(ANCHORITEM) == -1 ) {
                t.addColumn(ANCHORITEM, ForceItem.class, null);
            }
            if ( (m_fidx=t.getColumnIndex(FORCEITEM)) == -1 ) {
                t.addColumns(FORCEITEM_SCHEMA);
                m_fidx = t.getColumnIndex(FORCEITEM);
            }
            
            Iterator iter = m_vis.visibleItems(m_nodeGroup);
            while ( iter.hasNext() ) {
                VisualItem item = (VisualItem)iter.next();
                // get force item
                ForceItem fitem = (ForceItem)item.get(FORCEITEM);
                if ( fitem == null ) {
                    fitem = new ForceItem();
                    item.set(fitem, FORCEITEM);
                }
                fitem.location[0] = (float)item.getEndX();
                fitem.location[1] = (float)item.getEndY();
                fitem.mass = getMassValue(item);
                
                // get spring anchor
                ForceItem aitem = (ForceItem)item.get(ANCHORITEM);
                if ( aitem == null ) {
                    aitem = new ForceItem();
                    item.set(aitem, ANCHORITEM);
                    aitem.location[0] = fitem.location[0];
                    aitem.location[1] = fitem.location[1];
                }
                
                fsim.addItem(fitem);
                fsim.addSpring(fitem, aitem, 0);
            }     
        } //        
    } // end of inner class DataMountainForceLayout
    
    public class DataMountainControl extends ControlAdapter {
        public static final String URL = "http://www.amazon.com/exec/obidos/tg/detail/-/";
        private VisualItem activeItem;
        private Point2D down = new Point2D.Double();
        private Point2D tmp = new Point2D.Double();
        private boolean wasFixed, dragged;
        private boolean repaint = false;
        
        public void itemEntered(VisualItem item, MouseEvent e) {
            Display d = (Display)e.getSource();
            d.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            d.setToolTipText(item.getString("id"));
            activeItem = item;
            wasFixed = item.isFixed();
        } //
        
        public void itemExited(VisualItem item, MouseEvent e) {
            if ( activeItem == item ) {
                activeItem = null;
                item.setFixed(wasFixed);
            }
            Display d = (Display)e.getSource();
            d.setToolTipText(null);
            d.setCursor(Cursor.getDefaultCursor());
        } //
        
        public void itemPressed(VisualItem item, MouseEvent e) {
            if (!SwingUtilities.isLeftMouseButton(e)) return;
            
            // set the focus to the current node
            Visualization vis = item.getVisualization();
            vis.getFocusGroup(Visualization.FOCUS_ITEMS).setTuple(item);
            
            item.setFixed(true);
            dragged = false;
            Display d = (Display)e.getComponent();
            down = d.getAbsoluteCoordinate(e.getPoint(), down);
            
            vis.run("forces");
        } //
        
        public void itemReleased(VisualItem item, MouseEvent e) {
            if (!SwingUtilities.isLeftMouseButton(e)) return;
            if ( dragged ) {
                activeItem = null;
                item.setFixed(wasFixed);
                dragged = false;
            }
            // clear the focus
            Visualization vis = item.getVisualization();
            vis.getFocusGroup(Visualization.FOCUS_ITEMS).clear();

            vis.cancel("forces");
        } //
        
        public void itemClicked(VisualItem item, MouseEvent e) {
            if (!SwingUtilities.isLeftMouseButton(e)) return;
            if ( e.getClickCount() == 2 ) {
                String id = item.getString("id");
                BrowserLauncher.showDocument(URL+id);
            }
        } //
        
        public void itemDragged(VisualItem item, MouseEvent e) {
            if (!SwingUtilities.isLeftMouseButton(e)) return;
            dragged = true;
            Display d = (Display)e.getComponent();
            tmp = d.getAbsoluteCoordinate(e.getPoint(), tmp);
            double dx = tmp.getX()-down.getX();
            double dy = tmp.getY()-down.getY();
            
            PrefuseLib.setX(item, null, item.getX()+dx);
            PrefuseLib.setY(item, null, item.getY()+dy);
            down.setLocation(tmp);
            if ( repaint )
                item.getVisualization().repaint();
        } //
    } // end of class DataMountainControl
    
} // end of class DataMountain

@


1.1.2.2
log
@Table method refactoring. Added PredicateChain, included in ColorFunction, SizeFunction, and RendererFactory. Added ItemBoundsListener, included in GraphView demo. Updated ColorMap to use int representation, moved palette creators to ColorLib. Added minExtent to JRangeSlider. Fixed round-off rendering glitches int optimized rendering, added RenderingAccuracy test class. Updated PrefuseConfig to support logging output to file system. Added DelmitedTextTableWriter. Added CompositeTupleSet. Added directionality to edges, increased support to EdgeRenderer, including reversed directionality.
@
text
@d217 1
a217 1
                    item.set(FORCEITEM, fitem);
d227 1
a227 1
                    item.set(ANCHORITEM, aitem);
@


1.1.2.3
log
@Added support for aggregates as a visual data type (AggregateItem, AggregateTable).
Added listener callback to DataSourceWorker.
Reworked graph representation to use an internal table of adjacency lists (the "links" table).
Added spanning tree functionality for all graph instances.
Reworked RadialTreeLayout. Updated PolarLocationAnimator to use an externally defined set for linear Cartesian interpolation cases.
Fixed out-of-order row manager indexing bug in CascadedTable -- all row indexing is now complete once a table insert event is fired.
Made filterRows() public in CascadedTable.
Reorganized visual data support classes to prefuse.visual.tuple package.
@
text
@a24 1
import prefuse.data.Schema;
a26 1
import prefuse.data.tuple.TupleSet;
a166 6
    private static final String ANCHORITEM = "_anchorItem";
    private static final Schema ANCHORITEM_SCHEMA = new Schema();
    static {
    	ANCHORITEM_SCHEMA.addColumn(ANCHORITEM, ForceItem.class);
    }
    
d168 2
a169 1
    	
d201 8
a208 3
            TupleSet t = (TupleSet)m_vis.getGroup(m_group);
            t.addColumns(ANCHORITEM_SCHEMA);
            t.addColumns(FORCEITEM_SCHEMA);
@


1.1.2.4
log
@Replaced all tab characters with 4 spaces.
Ensured UNIX style line endings.
@
text
@d110 1
a110 1
        JFrame frame = null;
d114 1
a114 1
            frame = demo();
d172 1
a172 1
        ANCHORITEM_SCHEMA.addColumn(ANCHORITEM, ForceItem.class);
d176 1
a176 1
        
@


1.1.2.5
log
@Standardized @@author tag contents
Added toggle for enabling/disabling damage/redraw
EdgeRenderer now cleanly pulls edge widths from the size field
Refactored TupleManager to a single reusable class
@
text
@d43 1
a43 1
 * @@author <a href="http://jheer.org">jeffrey heer</a>
a93 1
        setDamageRedraw(false); // disable due to Java2D image clipping errors
@


1.1.2.6
log
@Intermediate commit in run-up to release.
Upgraded Tuple, Node, and Edge to the data package.
Renamed "Function" classes to "Action" classes.
Added Shape to VisualItem Schema.
Added ShapeActions, moved Shape constants to Constants interface.
Added Background image handling to the Display class.
Added social network data file.
@
text
@a8 1
import javax.swing.JComponent;
d17 2
a18 2
import prefuse.action.assignment.ColorAction;
import prefuse.action.assignment.SizeAction;
d62 1
a62 1
        init.add(new DataMountainSizeAction());
d66 2
a67 2
        update.add(new DataMountainSizeAction());
        update.add(new ColorAction("data", VisualItem.STROKECOLOR) {
d106 1
a106 1
    }
d110 7
a116 2
    public static void main(String[] args) {       
        JFrame frame = new JFrame("p r e f u s e  |  d a t a m o u n t a i n");
a117 2
        frame.getContentPane().add(demo());
        frame.pack();
d119 1
a119 1
    }
d121 1
a121 1
    public static JComponent demo() {
d131 22
a152 1
        return new DataMountain(data);
d163 1
a163 1
    public class DataMountainSizeAction extends SizeAction {
d168 1
a168 1
    } // end of inner class DataMountainSizeAction
d206 1
a206 1
        }
d238 1
a238 1
        }       
d255 1
a255 1
        }
d265 1
a265 1
        }
d280 1
a280 1
        }
d294 1
a294 1
        }
d302 1
a302 1
        }
d317 2
a318 2
        }
    } // end of inner class DataMountainControl
@


1.1.2.7
log
@Various pre-release edits
Added RadialGraphView
Added new applets
Renamed ShapeRenderer to AbstractShapeRenderer
Renamed ShapeItemRenderer to ShapeRenderer
Merged TextItemRenderer and ImageItemRenderer into LabelRenderer
Removed demo launcher (and commented line in build.xml), will reintroduce demo launcher later
@
text
@d31 1
a31 1
import prefuse.render.LabelRenderer;
d52 1
a52 1
        LabelRenderer nodeRenderer = new LabelRenderer(null, "image");
@


