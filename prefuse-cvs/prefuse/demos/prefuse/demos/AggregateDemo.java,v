head	1.1;
access;
symbols
	java_1_5:1.1.0.4
	Root_java_1_5:1.1
	beta:1.1.0.2
	beta-20080113:1.1
	beta-20071021:1.1;
locks; strict;
comment	@# @;


1.1
date	2006.03.15.04.53.20;	author jheer;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2008.01.23.23.55.46;	author jogiles;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2008.02.24.00.22.31;	author amarsden;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Added AggregateDemo to showcase use of aggregate items
@
text
@/**
 * Copyright (c) 2004-2006 Regents of the University of California.
 * See "license-prefuse.txt" for licensing terms.
 */
package prefuse.demos;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;

import javax.swing.JFrame;
import javax.swing.SwingUtilities;

import prefuse.Constants;
import prefuse.Display;
import prefuse.Visualization;
import prefuse.action.ActionList;
import prefuse.action.RepaintAction;
import prefuse.action.assignment.ColorAction;
import prefuse.action.assignment.DataColorAction;
import prefuse.action.layout.Layout;
import prefuse.action.layout.graph.ForceDirectedLayout;
import prefuse.activity.Activity;
import prefuse.controls.ControlAdapter;
import prefuse.controls.PanControl;
import prefuse.controls.ZoomControl;
import prefuse.data.Graph;
import prefuse.data.Node;
import prefuse.render.DefaultRendererFactory;
import prefuse.render.PolygonRenderer;
import prefuse.render.Renderer;
import prefuse.render.ShapeRenderer;
import prefuse.util.ColorLib;
import prefuse.util.GraphicsLib;
import prefuse.visual.AggregateItem;
import prefuse.visual.AggregateTable;
import prefuse.visual.VisualGraph;
import prefuse.visual.VisualItem;


/**
 * Demo application showcasing the use of AggregateItems to
 * visualize groupings of nodes with in a graph visualization.
 * 
 * This class uses the AggregateLayout class to compute bounding
 * polygons for each aggregate and the AggregateDragControl to
 * enable drags of both nodes and node aggregates.
 * 
 * @@author <a href="http://jheer.org">jeffrey heer</a>
 */
public class AggregateDemo extends Display {

    public static final String GRAPH = "graph";
    public static final String NODES = "graph.nodes";
    public static final String EDGES = "graph.edges";
    public static final String AGGR = "aggregates";
    
    public AggregateDemo() {
        // initialize display and data
        super(new Visualization());
        initDataGroups();
        
        // set up the renderers
        // draw the nodes as basic shapes
        Renderer nodeR = new ShapeRenderer(20);
        // draw aggregates as polygons with curved edges
        Renderer polyR = new PolygonRenderer(Constants.POLY_TYPE_CURVE);
        ((PolygonRenderer)polyR).setCurveSlack(0.15f);
        
        DefaultRendererFactory drf = new DefaultRendererFactory();
        drf.setDefaultRenderer(nodeR);
        drf.add("ingroup('aggregates')", polyR);
        m_vis.setRendererFactory(drf);
        
        // set up the visual operators
        // first set up all the color actions
        ColorAction nStroke = new ColorAction(NODES, VisualItem.STROKECOLOR);
        nStroke.setDefaultColor(ColorLib.gray(100));
        nStroke.add("_hover", ColorLib.gray(50));
        
        ColorAction nFill = new ColorAction(NODES, VisualItem.FILLCOLOR);
        nFill.setDefaultColor(ColorLib.gray(255));
        nFill.add("_hover", ColorLib.gray(200));
        
        ColorAction nEdges = new ColorAction(EDGES, VisualItem.STROKECOLOR);
        nEdges.setDefaultColor(ColorLib.gray(100));
        
        ColorAction aStroke = new ColorAction(AGGR, VisualItem.STROKECOLOR);
        aStroke.setDefaultColor(ColorLib.gray(200));
        aStroke.add("_hover", ColorLib.rgb(255,100,100));
        
        int[] palette = new int[] {
            ColorLib.rgba(255,200,200,150),
            ColorLib.rgba(200,255,200,150),
            ColorLib.rgba(200,200,255,150)
        };
        ColorAction aFill = new DataColorAction(AGGR, "id",
                Constants.NOMINAL, VisualItem.FILLCOLOR, palette);
        
        // bundle the color actions
        ActionList colors = new ActionList();
        colors.add(nStroke);
        colors.add(nFill);
        colors.add(nEdges);
        colors.add(aStroke);
        colors.add(aFill);
        
        // now create the main layout routine
        ActionList layout = new ActionList(Activity.INFINITY);
        layout.add(colors);
        layout.add(new ForceDirectedLayout(GRAPH, true));
        layout.add(new AggregateLayout(AGGR));
        layout.add(new RepaintAction());
        m_vis.putAction("layout", layout);
        
        // set up the display
        setSize(500,500);
        pan(250, 250);
        setHighQuality(true);
        addControlListener(new AggregateDragControl());
        addControlListener(new ZoomControl());
        addControlListener(new PanControl());
        
        // set things running
        m_vis.run("layout");
    }
    
    private void initDataGroups() {
        // create sample graph
        // 9 nodes broken up into 3 interconnected cliques
        Graph g = new Graph();
        for ( int i=0; i<3; ++i ) {
            Node n1 = g.addNode();
            Node n2 = g.addNode();
            Node n3 = g.addNode();
            g.addEdge(n1, n2);
            g.addEdge(n1, n3);
            g.addEdge(n2, n3);
        }
        g.addEdge(0, 3);
        g.addEdge(3, 6);
        g.addEdge(6, 0);
        
        // add visual data groups
        VisualGraph vg = m_vis.addGraph(GRAPH, g);
        m_vis.setInteractive(EDGES, null, false);
        m_vis.setValue(NODES, null, VisualItem.SHAPE,
                new Integer(Constants.SHAPE_ELLIPSE));
        
        AggregateTable at = m_vis.addAggregates(AGGR);
        at.addColumn(VisualItem.POLYGON, float[].class);
        at.addColumn("id", int.class);
        
        // add nodes to aggregates
        // create an aggregate for each 3-clique of nodes
        Iterator nodes = vg.nodes();
        for ( int i=0; i<3; ++i ) {
            AggregateItem aitem = (AggregateItem)at.addItem();
            aitem.setInt("id", i);
            for ( int j=0; j<3; ++j ) {
                aitem.addItem((VisualItem)nodes.next());
            }
        }
    }
    
    public static void main(String[] argv) {
        JFrame frame = demo();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
    
    public static JFrame demo() {
        AggregateDemo ad = new AggregateDemo();
        JFrame frame = new JFrame("p r e f u s e  |  a g g r e g a t e d");
        frame.getContentPane().add(ad);
        frame.pack();
        return frame;
    }
    
} // end of class AggregateDemo


/**
 * Layout algorithm that computes a convex hull surrounding
 * aggregate items and saves it in the "_polygon" field.
 */
class AggregateLayout extends Layout {
    
    private int m_margin = 5; // convex hull pixel margin
    private double[] m_pts;   // buffer for computing convex hulls
    
    public AggregateLayout(String aggrGroup) {
        super(aggrGroup);
    }
    
    /**
     * @@see edu.berkeley.guir.prefuse.action.Action#run(edu.berkeley.guir.prefuse.ItemRegistry, double)
     */
    public void run(double frac) {
        
        AggregateTable aggr = (AggregateTable)m_vis.getGroup(m_group);
        // do we have any  to process?
        int num = aggr.getTupleCount();
        if ( num == 0 ) return;
        
        // update buffers
        int maxsz = 0;
        for ( Iterator aggrs = aggr.tuples(); aggrs.hasNext();  )
            maxsz = Math.max(maxsz, 4*2*
                    ((AggregateItem)aggrs.next()).getAggregateSize());
        if ( m_pts == null || maxsz > m_pts.length ) {
            m_pts = new double[maxsz];
        }
        
        // compute and assign convex hull for each aggregate
        Iterator aggrs = m_vis.visibleItems(m_group);
        while ( aggrs.hasNext() ) {
            AggregateItem aitem = (AggregateItem)aggrs.next();

            int idx = 0;
            if ( aitem.getAggregateSize() == 0 ) continue;
            VisualItem item = null;
            Iterator iter = aitem.items();
            while ( iter.hasNext() ) {
                item = (VisualItem)iter.next();
                if ( item.isVisible() ) {
                    addPoint(m_pts, idx, item, m_margin);
                    idx += 2*4;
                }
            }
            // if no aggregates are visible, do nothing
            if ( idx == 0 ) continue;

            // compute convex hull
            double[] nhull = GraphicsLib.convexHull(m_pts, idx);
            
            // prepare viz attribute array
            float[]  fhull = (float[])aitem.get(VisualItem.POLYGON);
            if ( fhull == null || fhull.length < nhull.length )
                fhull = new float[nhull.length];
            else if ( fhull.length > nhull.length )
                fhull[nhull.length] = Float.NaN;
            
            // copy hull values
            for ( int j=0; j<nhull.length; j++ )
                fhull[j] = (float)nhull[j];
            aitem.set(VisualItem.POLYGON, fhull);
            aitem.setValidated(false); // force invalidation
        }
    }
    
    private static void addPoint(double[] pts, int idx, 
                                 VisualItem item, int growth)
    {
        Rectangle2D b = item.getBounds();
        double minX = (b.getMinX())-growth, minY = (b.getMinY())-growth;
        double maxX = (b.getMaxX())+growth, maxY = (b.getMaxY())+growth;
        pts[idx]   = minX; pts[idx+1] = minY;
        pts[idx+2] = minX; pts[idx+3] = maxY;
        pts[idx+4] = maxX; pts[idx+5] = minY;
        pts[idx+6] = maxX; pts[idx+7] = maxY;
    }
    
} // end of class AggregateLayout


/**
 * Interactive drag control that is "aggregate-aware"
 */
class AggregateDragControl extends ControlAdapter {

    private VisualItem activeItem;
    protected Point2D down = new Point2D.Double();
    protected Point2D temp = new Point2D.Double();
    protected boolean dragged;
    
    /**
     * Creates a new drag control that issues repaint requests as an item
     * is dragged.
     */
    public AggregateDragControl() {
    }
        
    /**
     * @@see prefuse.controls.Control#itemEntered(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemEntered(VisualItem item, MouseEvent e) {
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        activeItem = item;
        if ( !(item instanceof AggregateItem) )
            setFixed(item, true);
    }
    
    /**
     * @@see prefuse.controls.Control#itemExited(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemExited(VisualItem item, MouseEvent e) {
        if ( activeItem == item ) {
            activeItem = null;
            setFixed(item, false);
        }
        Display d = (Display)e.getSource();
        d.setCursor(Cursor.getDefaultCursor());
    }
    
    /**
     * @@see prefuse.controls.Control#itemPressed(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemPressed(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        dragged = false;
        Display d = (Display)e.getComponent();
        d.getAbsoluteCoordinate(e.getPoint(), down);
        if ( item instanceof AggregateItem )
            setFixed(item, true);
    }
    
    /**
     * @@see prefuse.controls.Control#itemReleased(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemReleased(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        if ( dragged ) {
            activeItem = null;
            setFixed(item, false);
            dragged = false;
        }            
    }
    
    /**
     * @@see prefuse.controls.Control#itemDragged(prefuse.visual.VisualItem, java.awt.event.MouseEvent)
     */
    public void itemDragged(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) return;
        dragged = true;
        Display d = (Display)e.getComponent();
        d.getAbsoluteCoordinate(e.getPoint(), temp);
        double dx = temp.getX()-down.getX();
        double dy = temp.getY()-down.getY();
        
        move(item, dx, dy);
        
        down.setLocation(temp);
    }

    protected static void setFixed(VisualItem item, boolean fixed) {
        if ( item instanceof AggregateItem ) {
            Iterator items = ((AggregateItem)item).items();
            while ( items.hasNext() ) {
                setFixed((VisualItem)items.next(), fixed);
            }
        } else {
            item.setFixed(fixed);
        }
    }
    
    protected static void move(VisualItem item, double dx, double dy) {
        if ( item instanceof AggregateItem ) {
            Iterator items = ((AggregateItem)item).items();
            while ( items.hasNext() ) {
                move((VisualItem)items.next(), dx, dy);
            }
        } else {
            double x = item.getX();
            double y = item.getY();
            item.setStartX(x);  item.setStartY(y);
            item.setX(x+dx);    item.setY(y+dy);
            item.setEndX(x+dx); item.setEndY(y+dy);
        }
    }
    
} // end of class AggregateDragControl@


1.1.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d16 1
a17 1
import prefuse.ShapeType;
a19 1
import prefuse.action.DataType;
a30 1
import prefuse.data.Tuple;
a34 1
import prefuse.render.PolygonRenderer.PolygonType;
a38 1
import prefuse.visual.NodeItem;
a40 1
import prefuse.visual.tuple.TableAggregateItem;
d46 1
a46 1
 *
d50 1
a50 1
 *
d59 1
a59 1

d64 1
a64 1

d69 1
a69 1
        Renderer polyR = new PolygonRenderer(PolygonType.CURVE);
d71 1
a71 1

d76 1
a76 1

d82 1
a82 1

d86 1
a86 1

d89 1
a89 1

d93 1
a93 1

d100 2
a101 2
                DataType.NOMINAL, VisualItem.FILLCOLOR, palette);

d109 1
a109 1

d117 1
a117 1

d125 1
a125 1

d129 1
a129 1

d133 1
a133 1
        Graph<?,?,?> g = Graph.createGraph();
d135 3
a137 3
            Node<?,?> n1 = g.addNode();
            Node<?,?> n2 = g.addNode();
            Node<?,?> n3 = g.addNode();
d145 1
a145 1

d147 1
a147 1
        VisualGraph<?,?,?> vg = m_vis.addGraph(GRAPH, g);
d149 4
a152 3
        m_vis.setValue(NODES, null, VisualItem.SHAPE, ShapeType.ELLIPSE.ordinal());

        AggregateTable<TableAggregateItem<VisualItem<?>>,VisualItem<?>> at = m_vis.<VisualItem<?>>addAggregates(AGGR);
d155 1
a155 1

d158 1
a158 1
        Iterator<NodeItem<?,?>> nodes = (Iterator<NodeItem<?,?>>) (Object) vg.nodes().iterator();
d160 1
a160 1
        	TableAggregateItem<VisualItem<?>> aitem = at.addItem();
d163 1
a163 1
                aitem.addItem(nodes.next());
d167 1
a167 1

d173 1
a173 1

d181 1
a181 1

d190 2
a191 2

    private final int m_margin = 5; // convex hull pixel margin
d193 1
a193 1

d197 1
a197 1

d201 2
a202 3
    @@Override
	public void run(double frac) {

d206 2
a207 4
        if ( num == 0 ) {
			return;
		}

d210 2
a211 2
        for ( Iterator<Tuple> aggrs = aggr.tuples().iterator(); aggrs.hasNext();  ) {
			maxsz = Math.max(maxsz, 4*2*
a212 1
		}
d216 1
a216 1

d218 1
a218 1
        Iterator<? extends VisualItem> aggrs = m_vis.visibleItems(m_group).iterator();
d223 1
a223 3
            if ( aitem.getAggregateSize() == 0 ) {
				continue;
			}
d225 1
a225 1
            Iterator<VisualItem> iter = aitem.items().iterator();
d227 1
a227 1
                item = iter.next();
d234 1
a234 3
            if ( idx == 0 ) {
				continue;
			}
d238 1
a238 1

d241 5
a245 6
            if ( fhull == null || fhull.length < nhull.length ) {
				fhull = new float[nhull.length];
			} else if ( fhull.length > nhull.length ) {
				fhull[nhull.length] = Float.NaN;
			}

d247 2
a248 3
            for ( int j=0; j<nhull.length; j++ ) {
				fhull[j] = (float)nhull[j];
			}
d253 2
a254 2

    private static void addPoint(double[] pts, int idx,
d258 2
a259 2
        double minX = b.getMinX()-growth, minY = b.getMinY()-growth;
        double maxX = b.getMaxX()+growth, maxY = b.getMaxY()+growth;
d265 1
a265 1

d278 1
a278 1

d285 1
a285 1

d289 1
a289 2
    @@Override
	public void itemEntered(VisualItem item, MouseEvent e) {
d293 2
a294 3
        if ( !(item instanceof AggregateItem) ) {
			setFixed(item, true);
		}
d296 1
a296 1

d300 1
a300 2
    @@Override
	public void itemExited(VisualItem item, MouseEvent e) {
d308 1
a308 1

d312 2
a313 5
    @@Override
	public void itemPressed(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) {
			return;
		}
d317 2
a318 3
        if ( item instanceof AggregateItem ) {
			setFixed(item, true);
		}
d320 1
a320 1

d324 2
a325 5
    @@Override
	public void itemReleased(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) {
			return;
		}
d330 1
a330 1
        }
d332 1
a332 1

d336 2
a337 5
    @@Override
	public void itemDragged(VisualItem item, MouseEvent e) {
        if (!SwingUtilities.isLeftMouseButton(e)) {
			return;
		}
d343 1
a343 1

d345 1
a345 1

d351 1
a351 1
            Iterator<VisualItem> items = ((AggregateItem)item).items().iterator();
d353 1
a353 1
                setFixed(items.next(), fixed);
d359 1
a359 1

d362 1
a362 1
            Iterator<VisualItem> items = ((AggregateItem)item).items().iterator();
d364 1
a364 1
                move(items.next(), dx, dy);
d374 1
a374 1

@


1.1.4.2
log
@Refactored the shape work to allow for custom ShapeBuilders. VisualItem.SHAPE has been replaced with VisualItem.SHAPEBUILDER.
@
text
@d17 1
a17 1
import prefuse.PredefinedShape;
d154 1
a154 1
        m_vis.setValue(NODES, null, VisualItem.SHAPEBUILDER, PredefinedShape.ELLIPSE);
@


