head	2.3;
access;
symbols
	java_1_5:2.3.0.4
	Root_java_1_5:2.3
	beta:2.3.0.2
	beta-20080113:2.3
	beta-20071021:2.3;
locks; strict;
comment	@# @;


2.3
date	2006.07.15.17.13.21;	author jheer;	state Exp;
branches
	2.3.4.1;
next	2.2;

2.2
date	2006.04.14.06.59.30;	author jheer;	state Exp;
branches;
next	2.1;

2.1
date	2006.02.27.03.59.10;	author jheer;	state Exp;
branches;
next	;

2.3.4.1
date	2008.01.23.23.55.45;	author jogiles;	state Exp;
branches;
next	;


desc
@@


2.3
log
@Added error-checking for existing group names
Added source data assignment for derived tables and decorators
Added new expert-level addTable method for custom VisualTables
Added new test case for duplicate group names
@
text
@package test.prefuse.visual;

import junit.framework.TestCase;
import prefuse.Visualization;
import prefuse.data.Graph;
import prefuse.data.Node;
import prefuse.data.Table;
import prefuse.data.Tuple;
import prefuse.data.tuple.TupleSet;
import prefuse.visual.NodeItem;
import prefuse.visual.VisualGraph;
import prefuse.visual.VisualItem;
import prefuse.visual.VisualTable;
import test.prefuse.data.GraphTest;
import test.prefuse.data.TableTest;

public class VisualizationTest extends TestCase {

    private Graph m_g;
    private Table m_t;
    private Visualization m_vis;
    private Tuple m_t0;
    private Node m_n0;
    private VisualItem m_vt0;
    private NodeItem m_vn0;
    
    public void setUp() {
        m_vis = new Visualization();
        m_t = TableTest.getTestCaseTable();
        m_g = GraphTest.getTestCaseGraph();
        
        m_t0 = m_t.getTuple(0);
        m_n0 = m_g.getNode(0);
        
        VisualTable vt = (VisualTable)m_vis.add("t", m_t);
        VisualGraph vg = (VisualGraph)m_vis.add("g", m_g);
        
        m_vt0 = vt.getItem(0);
        m_vn0 = (NodeItem)vg.getNode(0);
        
        TupleSet ts = m_vis.getFocusGroup(Visualization.FOCUS_ITEMS);
        ts.addTuple(m_vt0);
        ts.addTuple(m_vn0);
    }
    
    public void testRepeatGroup() {
    	Table t = new Table();
    	Graph g = new Graph();
    	try {
    		m_vis.add("t", t);
    		fail("Should not allow duplicate groups");
    	} catch ( Exception e ) {
    	}
    	try {
    		m_vis.addFocusGroup(Visualization.FOCUS_ITEMS, t);
    		fail("Should not allow duplicate groups");
    	} catch ( Exception e ) {
    	}
    	try {
    		m_vis.add("g", g);
    		fail("Should not allow duplicate groups");
    	} catch ( Exception e ) {
    	}
    	m_vis.removeGroup("t");
    	try {
    		m_vis.add("t", t);
    	} catch ( Exception e ) {
    		fail("Should be able to re-use group name after removal");
    	}
    	m_vis.removeGroup("g");
    	try {
    		m_vis.add("g", t);
    	} catch ( Exception e ) {
    		fail("Should be able to re-use group name after removal");
    	}
    }
    
    /*
     * Test method for 'prefuse.Visualization.removeGroup(String)'
     */
    public void testRemoveGroup() {
        m_vis.removeGroup("g");
        assertEquals(null, m_vis.getGroup("g"));
        assertEquals(null, m_vis.getGroup("g.nodes"));
        assertEquals(null, m_vis.getGroup("g.edges"));
        assertEquals(null, m_vis.getSourceData("g"));
        assertEquals(null, m_vis.getSourceData("g.nodes"));
        assertEquals(null, m_vis.getSourceData("g.edges"));
        assertEquals(false, m_vis.getFocusGroup("_focus_").containsTuple(m_n0));
    }

    /*
     * Test method for 'prefuse.Visualization.reset()'
     */
    public void testReset() {
        m_vis.reset();
        
        assertEquals(null, m_vis.getGroup("t"));
        assertEquals(null, m_vis.getSourceData("t"));
        
        assertEquals(null, m_vis.getGroup("g"));
        assertEquals(null, m_vis.getGroup("g.nodes"));
        assertEquals(null, m_vis.getGroup("g.edges"));
        assertEquals(null, m_vis.getSourceData("g"));
        assertEquals(null, m_vis.getSourceData("g.nodes"));
        assertEquals(null, m_vis.getSourceData("g.edges"));
        
        assertEquals(0, m_vis.size("t"));
        assertEquals(0, m_vis.size("g"));
        assertEquals(0, m_vis.size("g.nodes"));
        assertEquals(0, m_vis.size("g.edges"));
        assertEquals(0, m_vis.getFocusGroup("_focus_").getTupleCount());
        assertEquals(false, m_vis.items().hasNext());
    }

    /*
     * Test method for 'prefuse.Visualization.getSourceData(String)'
     */
    public void testGetSourceData() {
        assertEquals(m_t, m_vis.getSourceData("t"));
        assertEquals(m_t, m_vt0.getSourceData());
        
        assertEquals(m_g, m_vis.getSourceData("g"));
        assertEquals(m_g.getNodeTable(), m_vis.getSourceData("g.nodes"));
        assertEquals(m_g.getEdgeTable(), m_vis.getSourceData("g.edges"));
        assertEquals(m_g.getNodeTable(), m_vn0.getSourceData());
    }

    /*
     * Test method for 'prefuse.Visualization.getSourceTuple(VisualItem)'
     */
    public void testGetSourceTuple() {
        assertEquals(m_t0, m_vis.getSourceTuple(m_vt0));
        assertEquals(m_n0, m_vis.getSourceTuple(m_vn0));
        assertEquals(m_t0, m_vt0.getSourceTuple());
        assertEquals(m_n0, m_vn0.getSourceTuple());
    }
    
    /*
     * Test method for 'prefuse.Visualization.getVisualItem(String,Tuple)'
     */
    public void testGetVisualItem() {
        assertEquals(m_vt0, m_vis.getVisualItem("t", m_t0));
        assertEquals(m_vn0, m_vis.getVisualItem("g", m_n0));
        assertEquals(m_vn0, m_vis.getVisualItem("g.nodes", m_n0));
    }

}
@


2.3.4.1
log
@First import of a Java 1.5-targetted version of prefuse.
@
text
@d26 2
a27 3

    @@Override
	public void setUp() {
d31 1
a31 1

d34 1
a34 1

d37 1
a37 1

d40 1
a40 1

d45 1
a45 1

d47 2
a48 2
    	Table t = Table.createTable();
    	Graph g = Graph.createGraph();
d77 1
a77 1

d97 1
a97 1

d100 1
a100 1

d107 1
a107 1

d113 1
a113 1
        assertEquals(false, m_vis.items().iterator().hasNext());
d122 1
a122 1

d138 1
a138 1

@


2.2
log
@Added visual item lookup by source data tuple
@
text
@d46 32
@


2.1
log
@Fixes and test cases for Visualizations and VisualItems.
Revisited reset, removeGroup, getSourceData, and getSourceTuple.
Added getSourceXXX methods to VisualItem
Added new test cases
@
text
@d106 9
@

